import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import PropTypes from 'prop-types';
import styled, { css } from 'styled-components';
import sx from '../sx';
import { get, COMMON } from '../constants';
import theme from '../theme';
import Box from '../Box';
import { buildPaginationModel, buildComponentData } from './model';
var Page = styled.a.withConfig({
  displayName: "Pagination__Page",
  componentId: "sc-58gpf2-0"
})(["position:relative;float:left;padding:7px 12px;margin-left:-1px;font-size:", ";font-style:normal;font-weight:", ";color:", ";white-space:nowrap;vertical-align:middle;cursor:pointer;user-select:none;background:", ";border:", " solid ", ";text-decoration:none;&:first-child{margin-left:0;border-top-left-radius:", ";border-bottom-left-radius:", ";}&:last-child{border-top-right-radius:", ";border-bottom-right-radius:", ";}", " ", " ", " ", ";"], get('pagination.fontSize'), get('pagination.fontWeight'), get('pagination.colors.normal.fg'), get('pagination.colors.normal.bg'), get('borderWidths.1'), get('pagination.colors.normal.border'), get('pagination.borderRadius'), get('pagination.borderRadius'), get('pagination.borderRadius'), get('pagination.borderRadius'), function (props) {
  return !props.selected && !props.disabled && css(["&:hover,&:focus{z-index:2;color:", ";background-color:", ";border-color:", ";}"], get('pagination.colors.hover.fg'), get('pagination.colors.hover.bg'), get('pagination.colors.hover.border'));
}, function (props) {
  return props.selected && css(["z-index:3;color:", ";background-color:", ";border-color:", ";"], get('pagination.colors.selected.fg'), get('pagination.colors.selected.bg'), get('pagination.colors.selected.border'));
}, function (props) {
  return props.disabled && css(["color:", ";cursor:default;background-color:", ";border-color:", ";"], get('pagination.colors.disabled.fg'), get('pagination.colors.disabled.bg'), get('pagination.colors.disabled.border'));
}, COMMON);

function usePaginationPages(_ref) {
  var theme = _ref.theme,
      pageCount = _ref.pageCount,
      currentPage = _ref.currentPage,
      onPageChange = _ref.onPageChange,
      hrefBuilder = _ref.hrefBuilder,
      marginPageCount = _ref.marginPageCount,
      showPages = _ref.showPages,
      surroundingPageCount = _ref.surroundingPageCount;
  var pageChange = React.useCallback(function (n) {
    return function (e) {
      return onPageChange(e, n);
    };
  }, [onPageChange]);
  var model = React.useMemo(function () {
    return buildPaginationModel(pageCount, currentPage, showPages, marginPageCount, surroundingPageCount);
  }, [pageCount, currentPage, showPages, marginPageCount, surroundingPageCount]);
  var children = React.useMemo(function () {
    return model.map(function (page) {
      var _buildComponentData = buildComponentData(page, hrefBuilder, pageChange(page.num)),
          props = _buildComponentData.props,
          key = _buildComponentData.key,
          content = _buildComponentData.content;

      return /*#__PURE__*/React.createElement(Page, _extends({}, props, {
        key: key,
        theme: theme
      }), content);
    });
  }, [model, hrefBuilder, pageChange, theme]);
  return children;
}

var PaginationContainer = styled.nav.withConfig({
  displayName: "Pagination__PaginationContainer",
  componentId: "sc-58gpf2-1"
})(["margin-top:20px;margin-bottom:15px;text-align:center;", ";"], sx);

function Pagination(_ref2) {
  var theme = _ref2.theme,
      pageCount = _ref2.pageCount,
      currentPage = _ref2.currentPage,
      onPageChange = _ref2.onPageChange,
      hrefBuilder = _ref2.hrefBuilder,
      marginPageCount = _ref2.marginPageCount,
      showPages = _ref2.showPages,
      surroundingPageCount = _ref2.surroundingPageCount,
      rest = _objectWithoutProperties(_ref2, ["theme", "pageCount", "currentPage", "onPageChange", "hrefBuilder", "marginPageCount", "showPages", "surroundingPageCount"]);

  var pageElements = usePaginationPages({
    theme: theme,
    pageCount: pageCount,
    currentPage: currentPage,
    onPageChange: onPageChange,
    hrefBuilder: hrefBuilder,
    marginPageCount: marginPageCount,
    showPages: showPages,
    surroundingPageCount: surroundingPageCount
  });
  return /*#__PURE__*/React.createElement(PaginationContainer, _extends({
    "aria-label": "Pagination"
  }, rest, {
    theme: theme
  }), /*#__PURE__*/React.createElement(Box, {
    display: "inline-block",
    theme: theme
  }, pageElements));
}

Pagination.displayName = "Pagination";

function defaultHrefBuilder(pageNum) {
  return "#".concat(pageNum);
}

function noop() {}

Pagination.propTypes = _objectSpread({
  currentPage: PropTypes.number.isRequired,
  hrefBuilder: PropTypes.func,
  marginPageCount: PropTypes.number,
  onPageChange: PropTypes.func,
  pageCount: PropTypes.number.isRequired,
  showPages: PropTypes.bool,
  surroundingPageCount: PropTypes.number
}, COMMON.propTypes, {}, sx.propTypes);
Pagination.defaultProps = {
  hrefBuilder: defaultHrefBuilder,
  marginPageCount: 1,
  onPageChange: noop,
  showPages: true,
  surroundingPageCount: 2,
  theme: theme
};
export default Pagination;