{"ast":null,"code":"import{defaultOptions,formatNumber}from'./chart-defaults';import deepmerge from'deepmerge';import React from'react';import{Doughnut}from'react-chartjs-2';function GenderChart(props){var male=0;var female=0;if(!props.data||props.data.length===0){return/*#__PURE__*/React.createElement(\"div\",null);}props.data.forEach(function(patient){if(patient.gender==='M'){male++;}else if(patient.gender==='F'){female++;}});var chartData={datasets:[{data:[male,female],backgroundColor:['#6497f3','#ea6e9a'],label:'Hola'}],labels:['Male','Female']};var chartOptions=deepmerge(defaultOptions,{tooltips:{mode:'point',position:'nearest',callbacks:{label:function label(tooltipItem,data){var dataset=data.datasets[tooltipItem.datasetIndex];var meta=dataset._meta[Object.keys(dataset._meta)[0]];var total=meta.total;var currentValue=dataset.data[tooltipItem.index];var percentage=parseFloat((currentValue/total*100).toFixed(1));return formatNumber(currentValue)+' ('+percentage+'%)';},title:function title(tooltipItem,data){return data.labels[tooltipItem[0].index];}}}});return/*#__PURE__*/React.createElement(\"div\",{className:\"charts-header\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chart-title\"},props.title),/*#__PURE__*/React.createElement(\"div\",{className:\"chart-content doughnut\"},/*#__PURE__*/React.createElement(Doughnut,{data:chartData,options:chartOptions})),/*#__PURE__*/React.createElement(\"div\",{className:\"chart-note\"},\"Sample size: \",formatNumber(male+female),\" patients\"));}export default GenderChart;","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/components/Charts/genderchart.js"],"names":["defaultOptions","formatNumber","deepmerge","React","Doughnut","GenderChart","props","male","female","data","length","forEach","patient","gender","chartData","datasets","backgroundColor","label","labels","chartOptions","tooltips","mode","position","callbacks","tooltipItem","dataset","datasetIndex","meta","_meta","Object","keys","total","currentValue","index","percentage","parseFloat","toFixed","title"],"mappings":"AAAA,OAAQA,cAAR,CAAwBC,YAAxB,KAA2C,kBAA3C,CAEA,MAAOC,CAAAA,SAAP,KAAsB,WAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,QAAR,KAAuB,iBAAvB,CAEA,QAASC,CAAAA,WAAT,CAAqBC,KAArB,CAA4B,CAC1B,GAAIC,CAAAA,IAAI,CAAG,CAAX,CACA,GAAIC,CAAAA,MAAM,CAAG,CAAb,CAEA,GAAI,CAACF,KAAK,CAACG,IAAP,EAAeH,KAAK,CAACG,IAAN,CAAWC,MAAX,GAAsB,CAAzC,CAA4C,CAC1C,mBAAO,+BAAP,CACD,CAEDJ,KAAK,CAACG,IAAN,CAAWE,OAAX,CAAmB,SAACC,OAAD,CAAa,CAC9B,GAAIA,OAAO,CAACC,MAAR,GAAmB,GAAvB,CAA4B,CAC1BN,IAAI,GACL,CAFD,IAEO,IAAIK,OAAO,CAACC,MAAR,GAAmB,GAAvB,CAA4B,CACjCL,MAAM,GACP,CACF,CAND,EAQA,GAAMM,CAAAA,SAAS,CAAG,CAChBC,QAAQ,CAAE,CACR,CACEN,IAAI,CAAE,CAACF,IAAD,CAAOC,MAAP,CADR,CAEEQ,eAAe,CAAE,CAAC,SAAD,CAAY,SAAZ,CAFnB,CAGEC,KAAK,CAAE,MAHT,CADQ,CADM,CAQhBC,MAAM,CAAE,CAAC,MAAD,CAAS,QAAT,CARQ,CAAlB,CAWA,GAAMC,CAAAA,YAAY,CAAGjB,SAAS,CAACF,cAAD,CAAiB,CAC7CoB,QAAQ,CAAE,CACRC,IAAI,CAAE,OADE,CAERC,QAAQ,CAAE,SAFF,CAGRC,SAAS,CAAE,CACTN,KAAK,CAAE,eAAUO,WAAV,CAAuBf,IAAvB,CAA6B,CAClC,GAAMgB,CAAAA,OAAO,CAAGhB,IAAI,CAACM,QAAL,CAAcS,WAAW,CAACE,YAA1B,CAAhB,CACA,GAAMC,CAAAA,IAAI,CAAGF,OAAO,CAACG,KAAR,CAAcC,MAAM,CAACC,IAAP,CAAYL,OAAO,CAACG,KAApB,EAA2B,CAA3B,CAAd,CAAb,CACA,GAAMG,CAAAA,KAAK,CAAGJ,IAAI,CAACI,KAAnB,CACA,GAAMC,CAAAA,YAAY,CAAGP,OAAO,CAAChB,IAAR,CAAae,WAAW,CAACS,KAAzB,CAArB,CACA,GAAMC,CAAAA,UAAU,CAAGC,UAAU,CAC3B,CAAEH,YAAY,CAAGD,KAAhB,CAAyB,GAA1B,EAA+BK,OAA/B,CAAuC,CAAvC,CAD2B,CAA7B,CAGA,MAAOnC,CAAAA,YAAY,CAAC+B,YAAD,CAAZ,CAA6B,IAA7B,CAAoCE,UAApC,CAAiD,IAAxD,CACD,CAVQ,CAWTG,KAAK,CAAE,eAAUb,WAAV,CAAuBf,IAAvB,CAA6B,CAClC,MAAOA,CAAAA,IAAI,CAACS,MAAL,CAAYM,WAAW,CAAC,CAAD,CAAX,CAAeS,KAA3B,CAAP,CACD,CAbQ,CAHH,CADmC,CAAjB,CAA9B,CAsBA,mBACE,2BAAK,SAAS,CAAC,eAAf,eACE,2BAAK,SAAS,CAAC,aAAf,EAA8B3B,KAAK,CAAC+B,KAApC,CADF,cAEE,2BAAK,SAAS,CAAC,wBAAf,eACE,oBAAC,QAAD,EAAU,IAAI,CAAEvB,SAAhB,CAA2B,OAAO,CAAEK,YAApC,EADF,CAFF,cAKE,2BAAK,SAAS,CAAC,YAAf,kBACgBlB,YAAY,CAACM,IAAI,CAAGC,MAAR,CAD5B,aALF,CADF,CAWD,CAED,cAAeH,CAAAA,WAAf","sourcesContent":["import {defaultOptions, formatNumber} from './chart-defaults';\r\n\r\nimport deepmerge from 'deepmerge';\r\nimport React from 'react';\r\nimport {Doughnut} from 'react-chartjs-2';\r\n\r\nfunction GenderChart(props) {\r\n  let male = 0;\r\n  let female = 0;\r\n\r\n  if (!props.data || props.data.length === 0) {\r\n    return <div></div>;\r\n  }\r\n\r\n  props.data.forEach((patient) => {\r\n    if (patient.gender === 'M') {\r\n      male++;\r\n    } else if (patient.gender === 'F') {\r\n      female++;\r\n    }\r\n  });\r\n\r\n  const chartData = {\r\n    datasets: [\r\n      {\r\n        data: [male, female],\r\n        backgroundColor: ['#6497f3', '#ea6e9a'],\r\n        label: 'Hola',\r\n      },\r\n    ],\r\n    labels: ['Male', 'Female'],\r\n  };\r\n\r\n  const chartOptions = deepmerge(defaultOptions, {\r\n    tooltips: {\r\n      mode: 'point',\r\n      position: 'nearest',\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          const dataset = data.datasets[tooltipItem.datasetIndex];\r\n          const meta = dataset._meta[Object.keys(dataset._meta)[0]];\r\n          const total = meta.total;\r\n          const currentValue = dataset.data[tooltipItem.index];\r\n          const percentage = parseFloat(\r\n            ((currentValue / total) * 100).toFixed(1)\r\n          );\r\n          return formatNumber(currentValue) + ' (' + percentage + '%)';\r\n        },\r\n        title: function (tooltipItem, data) {\r\n          return data.labels[tooltipItem[0].index];\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className=\"charts-header\">\r\n      <div className=\"chart-title\">{props.title}</div>\r\n      <div className=\"chart-content doughnut\">\r\n        <Doughnut data={chartData} options={chartOptions} />\r\n      </div>\r\n      <div className=\"chart-note\">\r\n        Sample size: {formatNumber(male + female)} patients\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GenderChart;\r\n"]},"metadata":{},"sourceType":"module"}