{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\src\\\\components\\\\statemeta.js\";\nimport StateMetaCard from './statemetacard';\nimport { formatNumber } from '../utils/commonfunctions';\nimport { format, parse } from 'date-fns';\nimport React from 'react';\nimport * as Icon from 'react-feather';\nimport ReactTooltip from 'react-tooltip';\n\nfunction StateMeta({\n  stateData,\n  testObject,\n  population,\n  lastSevenDaysData,\n  totalData\n}) {\n  const confirmed = stateData.confirmed;\n  const active = stateData.active;\n  const deaths = stateData.deaths;\n  const recovered = confirmed - active - deaths;\n  const sevenDayBeforeData = lastSevenDaysData[0].totalconfirmed;\n  const sevenDayBeforeDate = format(lastSevenDaysData[0].date, 'dd MMM');\n  const previousDayData = lastSevenDaysData[6].totalconfirmed;\n  const previousDayDate = format(lastSevenDaysData[6].date, 'dd MMM');\n  const confirmedPerMillion = confirmed / population * 1000000;\n  const recoveryPercent = recovered / confirmed * 100;\n  const activePercent = active / confirmed * 100;\n  const deathPercent = deaths / confirmed * 100;\n  const testPerMillion = (testObject === null || testObject === void 0 ? void 0 : testObject.totaltested) / population * 1000000;\n  const growthRate = (previousDayData - sevenDayBeforeData) / sevenDayBeforeData * 100;\n  const totalConfirmedPerMillion = totalData[0].confirmed / 1332900000 * 1000000; // const doublingRate =\n  // growthRate > 0 ? (70 / Math.round(growthRate)).toFixed(2) : 0;\n\n  const updatedDate = !isNaN(parse(testObject === null || testObject === void 0 ? void 0 : testObject.updatedon, 'dd/MM/yyyy', new Date())) ? `As of ${format(parse(testObject === null || testObject === void 0 ? void 0 : testObject.updatedon, 'dd/MM/yyyy', new Date()), 'dd MMM')}` : '';\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"StateMeta population\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ReactTooltip, {\n    place: \"top\",\n    type: \"dark\",\n    effect: \"solid\",\n    multiline: true,\n    scrollHide: true,\n    globalEventOff: \"click\",\n    id: \"stateMeta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"meta-item population fadeInUp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"Population\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, formatNumber(population))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon.Compass, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"Based on 2019 population projection by NCP\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\",\n    target: \"_noblank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"report\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"StateMeta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"confirmed\",\n    title: 'Confirmed Per Million',\n    statistic: confirmedPerMillion.toFixed(2),\n    total: totalConfirmedPerMillion.toFixed(2),\n    formula: '(confirmed / state population) * 1 Million',\n    description: `\n            ${Math.round(confirmedPerMillion)} out of every 1 million people in ${stateData.state} have tested positive for the virus.\n            `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"active\",\n    title: 'Active',\n    statistic: `${activePercent.toFixed(2)}%`,\n    formula: '(active / confirmed) * 100',\n    description: `For every 100 confirmed cases, ${activePercent.toFixed(0)} are currently infected.`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"recovery\",\n    title: 'Recovery Rate',\n    statistic: `${recoveryPercent.toFixed(2)}%`,\n    formula: '(recovered / confirmed) * 100',\n    description: `For every 100 confirmed cases,\n            ${Math.round(recoveryPercent.toFixed(0))} have recovered from the virus.`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"mortality\",\n    title: 'Mortality Rate',\n    statistic: `${deathPercent.toFixed(2)}%`,\n    formula: '(deceased / confirmed) * 100',\n    description: `For every 100 confirmed cases,\n            ${Math.round(deathPercent.toFixed(0))} have unfortunately passed away from the virus.`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"gr\",\n    title: 'Avg. Growth Rate',\n    statistic: growthRate > 0 ? `${Math.round(growthRate / 7)}%` : '-',\n    formula: '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7',\n    date: `${sevenDayBeforeDate} - ${previousDayDate}`,\n    description: `In the last one week, the number of new infections has grown by an average of ${Math.round(growthRate / 7)}% every day.`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StateMetaCard, {\n    className: \"tpm\",\n    title: 'Tests Per Million',\n    statistic: `â‰ˆ ${Math.round(testPerMillion)}`,\n    formula: '(total tests in state / total population of state) * 1 Million',\n    date: updatedDate,\n    description: `For every 1 million people in ${stateData.state},\n            ${Math.round(testPerMillion)} people were tested.`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default StateMeta;","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/components/statemeta.js"],"names":["StateMetaCard","formatNumber","format","parse","React","Icon","ReactTooltip","StateMeta","stateData","testObject","population","lastSevenDaysData","totalData","confirmed","active","deaths","recovered","sevenDayBeforeData","totalconfirmed","sevenDayBeforeDate","date","previousDayData","previousDayDate","confirmedPerMillion","recoveryPercent","activePercent","deathPercent","testPerMillion","totaltested","growthRate","totalConfirmedPerMillion","updatedDate","isNaN","updatedon","Date","toFixed","Math","round","state"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,SAAQC,YAAR,QAA2B,0BAA3B;AAEA,SAAQC,MAAR,EAAgBC,KAAhB,QAA4B,UAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,IAAZ,MAAsB,eAAtB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,SAASC,SAAT,CAAmB;AACjBC,EAAAA,SADiB;AAEjBC,EAAAA,UAFiB;AAGjBC,EAAAA,UAHiB;AAIjBC,EAAAA,iBAJiB;AAKjBC,EAAAA;AALiB,CAAnB,EAMG;AACD,QAAMC,SAAS,GAAGL,SAAS,CAACK,SAA5B;AACA,QAAMC,MAAM,GAAGN,SAAS,CAACM,MAAzB;AACA,QAAMC,MAAM,GAAGP,SAAS,CAACO,MAAzB;AACA,QAAMC,SAAS,GAAGH,SAAS,GAAGC,MAAZ,GAAqBC,MAAvC;AACA,QAAME,kBAAkB,GAAGN,iBAAiB,CAAC,CAAD,CAAjB,CAAqBO,cAAhD;AACA,QAAMC,kBAAkB,GAAGjB,MAAM,CAACS,iBAAiB,CAAC,CAAD,CAAjB,CAAqBS,IAAtB,EAA4B,QAA5B,CAAjC;AACA,QAAMC,eAAe,GAAGV,iBAAiB,CAAC,CAAD,CAAjB,CAAqBO,cAA7C;AACA,QAAMI,eAAe,GAAGpB,MAAM,CAACS,iBAAiB,CAAC,CAAD,CAAjB,CAAqBS,IAAtB,EAA4B,QAA5B,CAA9B;AACA,QAAMG,mBAAmB,GAAIV,SAAS,GAAGH,UAAb,GAA2B,OAAvD;AACA,QAAMc,eAAe,GAAIR,SAAS,GAAGH,SAAb,GAA0B,GAAlD;AACA,QAAMY,aAAa,GAAIX,MAAM,GAAGD,SAAV,GAAuB,GAA7C;AACA,QAAMa,YAAY,GAAIX,MAAM,GAAGF,SAAV,GAAuB,GAA5C;AACA,QAAMc,cAAc,GAAI,CAAAlB,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEmB,WAAZ,IAA0BlB,UAA3B,GAAyC,OAAhE;AACA,QAAMmB,UAAU,GACb,CAACR,eAAe,GAAGJ,kBAAnB,IAAyCA,kBAA1C,GAAgE,GADlE;AAEA,QAAMa,wBAAwB,GAC3BlB,SAAS,CAAC,CAAD,CAAT,CAAaC,SAAb,GAAyB,UAA1B,GAAwC,OAD1C,CAhBC,CAkBD;AACA;;AAEA,QAAMkB,WAAW,GAAG,CAACC,KAAK,CACxB7B,KAAK,CAACM,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEwB,SAAb,EAAwB,YAAxB,EAAsC,IAAIC,IAAJ,EAAtC,CADmB,CAAN,GAGf,SAAQhC,MAAM,CACbC,KAAK,CAACM,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEwB,SAAb,EAAwB,YAAxB,EAAsC,IAAIC,IAAJ,EAAtC,CADQ,EAEb,QAFa,CAGb,EANc,GAOhB,EAPJ;AASA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAC,KADR;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,MAAM,EAAC,OAHT;AAIE,IAAA,SAAS,EAAE,IAJb;AAKE,IAAA,UAAU,EAAE,IALd;AAME,IAAA,cAAc,EAAC,OANjB;AAOE,IAAA,EAAE,EAAC,WAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE;AAAK,IAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKjC,YAAY,CAACS,UAAD,CAAjB,CAFF,CAVF,eAcE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAC6C,GAD7C,eAEE;AACE,IAAA,IAAI,EAAC,2EADP;AAEE,IAAA,MAAM,EAAC,UAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAFF,CAdF,CADF,eA6BE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAC,WADZ;AAEE,IAAA,KAAK,EAAE,uBAFT;AAGE,IAAA,SAAS,EAAEa,mBAAmB,CAACY,OAApB,CAA4B,CAA5B,CAHb;AAIE,IAAA,KAAK,EAAEL,wBAAwB,CAACK,OAAzB,CAAiC,CAAjC,CAJT;AAKE,IAAA,OAAO,EAAE,4CALX;AAME,IAAA,WAAW,EAAG;cACVC,IAAI,CAACC,KAAL,CACAd,mBADA,CAEA,qCACFf,SAAS,CAAC8B,KACX;aAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAgBE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,KAAK,EAAE,QAFT;AAGE,IAAA,SAAS,EAAG,GAAEb,aAAa,CAACU,OAAd,CAAsB,CAAtB,CAAyB,GAHzC;AAIE,IAAA,OAAO,EAAE,4BAJX;AAKE,IAAA,WAAW,EAAG,kCAAiCV,aAAa,CAACU,OAAd,CAC7C,CAD6C,CAE7C,0BAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,eA0BE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAC,UADZ;AAEE,IAAA,KAAK,EAAE,eAFT;AAGE,IAAA,SAAS,EAAG,GAAEX,eAAe,CAACW,OAAhB,CAAwB,CAAxB,CAA2B,GAH3C;AAIE,IAAA,OAAO,EAAE,+BAJX;AAKE,IAAA,WAAW,EAAG;cACVC,IAAI,CAACC,KAAL,CACAb,eAAe,CAACW,OAAhB,CAAwB,CAAxB,CADA,CAEA,iCARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BF,eAqCE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAC,WADZ;AAEE,IAAA,KAAK,EAAE,gBAFT;AAGE,IAAA,SAAS,EAAG,GAAET,YAAY,CAACS,OAAb,CAAqB,CAArB,CAAwB,GAHxC;AAIE,IAAA,OAAO,EAAE,8BAJX;AAKE,IAAA,WAAW,EAAG;cACVC,IAAI,CAACC,KAAL,CACAX,YAAY,CAACS,OAAb,CAAqB,CAArB,CADA,CAEA,iDARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArCF,eAgDE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAC,IADZ;AAEE,IAAA,KAAK,EAAE,kBAFT;AAGE,IAAA,SAAS,EAAEN,UAAU,GAAG,CAAb,GAAkB,GAAEO,IAAI,CAACC,KAAL,CAAWR,UAAU,GAAG,CAAxB,CAA2B,GAA/C,GAAoD,GAHjE;AAIE,IAAA,OAAO,EACL,yEALJ;AAOE,IAAA,IAAI,EAAG,GAAEV,kBAAmB,MAAKG,eAAgB,EAPnD;AAQE,IAAA,WAAW,EAAG,iFAAgFc,IAAI,CAACC,KAAL,CAC5FR,UAAU,GAAG,CAD+E,CAE5F,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhDF,eA6DE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAC,KADZ;AAEE,IAAA,KAAK,EAAE,mBAFT;AAGE,IAAA,SAAS,EAAG,KAAIO,IAAI,CAACC,KAAL,CAAWV,cAAX,CAA2B,EAH7C;AAIE,IAAA,OAAO,EACL,gEALJ;AAOE,IAAA,IAAI,EAAEI,WAPR;AAQE,IAAA,WAAW,EAAG,iCAAgCvB,SAAS,CAAC8B,KAAM;cAC1DF,IAAI,CAACC,KAAL,CAAWV,cAAX,CAA2B,sBATjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7DF,CA7BF,CADF;AAmJD;;AAED,eAAepB,SAAf","sourcesContent":["import StateMetaCard from './statemetacard';\r\n\r\nimport {formatNumber} from '../utils/commonfunctions';\r\n\r\nimport {format, parse} from 'date-fns';\r\nimport React from 'react';\r\nimport * as Icon from 'react-feather';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nfunction StateMeta({\r\n  stateData,\r\n  testObject,\r\n  population,\r\n  lastSevenDaysData,\r\n  totalData,\r\n}) {\r\n  const confirmed = stateData.confirmed;\r\n  const active = stateData.active;\r\n  const deaths = stateData.deaths;\r\n  const recovered = confirmed - active - deaths;\r\n  const sevenDayBeforeData = lastSevenDaysData[0].totalconfirmed;\r\n  const sevenDayBeforeDate = format(lastSevenDaysData[0].date, 'dd MMM');\r\n  const previousDayData = lastSevenDaysData[6].totalconfirmed;\r\n  const previousDayDate = format(lastSevenDaysData[6].date, 'dd MMM');\r\n  const confirmedPerMillion = (confirmed / population) * 1000000;\r\n  const recoveryPercent = (recovered / confirmed) * 100;\r\n  const activePercent = (active / confirmed) * 100;\r\n  const deathPercent = (deaths / confirmed) * 100;\r\n  const testPerMillion = (testObject?.totaltested / population) * 1000000;\r\n  const growthRate =\r\n    ((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100;\r\n  const totalConfirmedPerMillion =\r\n    (totalData[0].confirmed / 1332900000) * 1000000;\r\n  // const doublingRate =\r\n  // growthRate > 0 ? (70 / Math.round(growthRate)).toFixed(2) : 0;\r\n\r\n  const updatedDate = !isNaN(\r\n    parse(testObject?.updatedon, 'dd/MM/yyyy', new Date())\r\n  )\r\n    ? `As of ${format(\r\n        parse(testObject?.updatedon, 'dd/MM/yyyy', new Date()),\r\n        'dd MMM'\r\n      )}`\r\n    : '';\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"StateMeta population\">\r\n        <ReactTooltip\r\n          place=\"top\"\r\n          type=\"dark\"\r\n          effect=\"solid\"\r\n          multiline={true}\r\n          scrollHide={true}\r\n          globalEventOff=\"click\"\r\n          id=\"stateMeta\"\r\n        />\r\n        <div className=\"meta-item population fadeInUp\">\r\n          <h3>Population</h3>\r\n          <h1>{formatNumber(population)}</h1>\r\n        </div>\r\n        <div className=\"alert\">\r\n          <Icon.Compass />\r\n          <div className=\"alert-right\">\r\n            Based on 2019 population projection by NCP{' '}\r\n            <a\r\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\r\n              target=\"_noblank\"\r\n            >\r\n              report\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"StateMeta\">\r\n        <StateMetaCard\r\n          className=\"confirmed\"\r\n          title={'Confirmed Per Million'}\r\n          statistic={confirmedPerMillion.toFixed(2)}\r\n          total={totalConfirmedPerMillion.toFixed(2)}\r\n          formula={'(confirmed / state population) * 1 Million'}\r\n          description={`\r\n            ${Math.round(\r\n              confirmedPerMillion\r\n            )} out of every 1 million people in ${\r\n            stateData.state\r\n          } have tested positive for the virus.\r\n            `}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"active\"\r\n          title={'Active'}\r\n          statistic={`${activePercent.toFixed(2)}%`}\r\n          formula={'(active / confirmed) * 100'}\r\n          description={`For every 100 confirmed cases, ${activePercent.toFixed(\r\n            0\r\n          )} are currently infected.`}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"recovery\"\r\n          title={'Recovery Rate'}\r\n          statistic={`${recoveryPercent.toFixed(2)}%`}\r\n          formula={'(recovered / confirmed) * 100'}\r\n          description={`For every 100 confirmed cases,\r\n            ${Math.round(\r\n              recoveryPercent.toFixed(0)\r\n            )} have recovered from the virus.`}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"mortality\"\r\n          title={'Mortality Rate'}\r\n          statistic={`${deathPercent.toFixed(2)}%`}\r\n          formula={'(deceased / confirmed) * 100'}\r\n          description={`For every 100 confirmed cases,\r\n            ${Math.round(\r\n              deathPercent.toFixed(0)\r\n            )} have unfortunately passed away from the virus.`}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"gr\"\r\n          title={'Avg. Growth Rate'}\r\n          statistic={growthRate > 0 ? `${Math.round(growthRate / 7)}%` : '-'}\r\n          formula={\r\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\r\n          }\r\n          date={`${sevenDayBeforeDate} - ${previousDayDate}`}\r\n          description={`In the last one week, the number of new infections has grown by an average of ${Math.round(\r\n            growthRate / 7\r\n          )}% every day.`}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"tpm\"\r\n          title={'Tests Per Million'}\r\n          statistic={`â‰ˆ ${Math.round(testPerMillion)}`}\r\n          formula={\r\n            '(total tests in state / total population of state) * 1 Million'\r\n          }\r\n          date={updatedDate}\r\n          description={`For every 1 million people in ${stateData.state},\r\n            ${Math.round(testPerMillion)} people were tested.`}\r\n        />\r\n\r\n        {/* <div className=\"meta-item ptr fadeInUp\">\r\n          <div className=\"meta-item-top\">\r\n            <h3>Positive Test Rate</h3>\r\n            <span\r\n              data-tip={\r\n                'TPM = (total tests in state / total population of state) * 1 Million'\r\n              }\r\n              data-event=\"touchstart mouseover\"\r\n              data-event-off=\"mouseleave\"\r\n              data-for=\"stateMeta\"\r\n            >\r\n              <Icon.Info />\r\n            </span>\r\n          </div>\r\n          <h1>\r\n            {testObject?.testpositivityrate\r\n              ? testObject.testpositivityrate\r\n              : 'N/A'}\r\n          </h1>\r\n          {updatedDate}\r\n          <p>\r\n            {testObject?.testpositivityrate\r\n              ? `Out the of total tests conducted till date month, ${testObject.testpositivityrate}% were positive for the virus`\r\n              : 'N/A'}\r\n          </p>\r\n        </div>*/}\r\n\r\n        {/*\r\n          <div className=\"meta-item dbr fadeInUp\">\r\n            <div className=\"meta-item-top\">\r\n              <h3>Doubling Rate</h3>\r\n              <Icon.Info />\r\n            </div>\r\n            <h1>\r\n              {doublingRate > 0 ? Math.round(doublingRate * 7) + ' Days' : '-'}\r\n            </h1>\r\n            <h6 style={{margin: '0'}}>\r\n              {sevenDayBeforeDate} - {previousDayDate}\r\n            </h6>\r\n          </div>\r\n        )*/}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default StateMeta;\r\n"]},"metadata":{},"sourceType":"module"}