{"ast":null,"code":"var sphereKnn = require('sphere-knn');\n\nmodule.exports = function (layer) {\n  'use strict';\n\n  if (!(layer instanceof L.GeoJSON)) throw new Error('must be L.GeoJSON');\n  var points = [];\n  layer.eachLayer(collectPoints);\n\n  function collectPoints(l) {\n    points = points.concat(reformat(flat(l.feature.geometry.coordinates), l));\n  }\n\n  var sknn = sphereKnn(points);\n\n  sknn.nearest = function (p, n, max_distance) {\n    if (p instanceof L.LatLng) p = [p.lng, p.lat];\n    return sknn(p[1], p[0], n, max_distance);\n  };\n\n  sknn.nearestLayer = function (p, n, max_distance) {\n    if (p instanceof L.LatLng) p = [p.lng, p.lat];\n    return collapse(sknn(p[1], p[0], n, max_distance));\n  };\n\n  return sknn;\n};\n\nfunction collapse(results) {\n  var l = [],\n      included = {};\n\n  for (var i = 0; i < results.length; i++) {\n    if (included[L.stamp(results[i].layer)] == undefined) {\n      l.push(results[i]);\n      included[L.stamp(results[i].layer)] = true;\n    }\n  }\n\n  return l;\n}\n\nfunction reformat(coords, layer) {\n  var l = [];\n\n  for (var i = 0; i < coords.length; i++) {\n    l.push({\n      lon: coords[i][0],\n      lat: coords[i][1],\n      layer: layer\n    });\n  }\n\n  return l;\n}\n\nfunction flat(coords) {\n  var i = 0,\n      j = 0,\n      k = 0,\n      l = [];\n\n  if (typeof coords[0] === 'object' && typeof coords[0][0] === 'object' && typeof coords[0][0][0] === 'object') {\n    for (; i < coords.length; i++) {\n      for (; j < coords[i].length; j++) {\n        for (; k < coords[i][j].length; k++) {\n          l.push(coords[i][j][k]);\n        }\n      }\n    }\n\n    return l;\n  } else if (typeof coords[0] === 'object' && typeof coords[0][0] === 'object') {\n    for (; i < coords.length; i++) {\n      for (; j < coords[i].length; j++) {\n        l.push(coords[i][j]);\n      }\n    }\n\n    return l;\n  } else if (typeof coords[0] === 'object') {\n    return coords;\n  } else {\n    return [coords];\n  }\n}","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/node_modules/leaflet-knn/index.js"],"names":["sphereKnn","require","module","exports","layer","L","GeoJSON","Error","points","eachLayer","collectPoints","l","concat","reformat","flat","feature","geometry","coordinates","sknn","nearest","p","n","max_distance","LatLng","lng","lat","nearestLayer","collapse","results","included","i","length","stamp","undefined","push","coords","lon","j","k"],"mappings":"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","sourcesContent":["var sphereKnn = require('sphere-knn');\n\nmodule.exports = function(layer) {\n    'use strict';\n\n    if (!(layer instanceof L.GeoJSON)) throw new Error('must be L.GeoJSON');\n\n    var points = [];\n\n    layer.eachLayer(collectPoints);\n\n    function collectPoints(l) {\n        points = points.concat(reformat(flat(l.feature.geometry.coordinates), l));\n    }\n\n    var sknn = sphereKnn(points);\n\n    sknn.nearest = function(p, n, max_distance) {\n        if (p instanceof L.LatLng) p = [p.lng, p.lat];\n        return sknn(p[1], p[0], n, max_distance);\n    };\n\n    sknn.nearestLayer = function(p, n, max_distance) {\n        if (p instanceof L.LatLng) p = [p.lng, p.lat];\n        return collapse(sknn(p[1], p[0], n, max_distance));\n    };\n\n    return sknn;\n};\n\nfunction collapse(results) {\n    var l = [], included = {};\n    for (var i = 0; i < results.length; i++) {\n        if (included[L.stamp(results[i].layer)] == undefined) {\n            l.push(results[i]);\n            included[L.stamp(results[i].layer)] = true;\n        }\n    }\n    return l;\n}\n\nfunction reformat(coords, layer) {\n    var l = [];\n    for (var i = 0; i < coords.length; i++) {\n        l.push({ lon: coords[i][0], lat: coords[i][1], layer: layer });\n    }\n    return l;\n}\n\nfunction flat(coords) {\n    var i = 0, j = 0, k = 0, l = [];\n    if (typeof coords[0] === 'object' &&\n        typeof coords[0][0] === 'object' &&\n        typeof coords[0][0][0] === 'object') {\n        for (;i < coords.length; i++) {\n            for (;j < coords[i].length; j++) {\n                for (;k < coords[i][j].length; k++) l.push(coords[i][j][k]);\n            }\n        }\n        return l;\n    } else if (typeof coords[0] === 'object' &&\n        typeof coords[0][0] === 'object') {\n        for (;i < coords.length; i++) {\n            for (;j < coords[i].length; j++) l.push(coords[i][j]);\n        }\n        return l;\n    } else if (typeof coords[0] === 'object') {\n        return coords;\n    } else {\n        return [coords];\n    }\n}\n"]},"metadata":{},"sourceType":"script"}