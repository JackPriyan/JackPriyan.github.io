{"ast":null,"code":"import StateMetaCard from'./statemetacard';import{formatNumber}from'../utils/commonfunctions';import{format,parse}from'date-fns';import React from'react';import*as Icon from'react-feather';import ReactTooltip from'react-tooltip';function StateMeta(_ref){var stateData=_ref.stateData,testObject=_ref.testObject,population=_ref.population,lastSevenDaysData=_ref.lastSevenDaysData,totalData=_ref.totalData;var confirmed=stateData.confirmed;var active=stateData.active;var deaths=stateData.deaths;var recovered=confirmed-active-deaths;var sevenDayBeforeData=lastSevenDaysData[0].totalconfirmed;var sevenDayBeforeDate=format(lastSevenDaysData[0].date,'dd MMM');var previousDayData=lastSevenDaysData[6].totalconfirmed;var previousDayDate=format(lastSevenDaysData[6].date,'dd MMM');var confirmedPerMillion=confirmed/population*1000000;var recoveryPercent=recovered/confirmed*100;var activePercent=active/confirmed*100;var deathPercent=deaths/confirmed*100;var testPerMillion=(testObject===null||testObject===void 0?void 0:testObject.totaltested)/population*1000000;var growthRate=(previousDayData-sevenDayBeforeData)/sevenDayBeforeData*100;var totalConfirmedPerMillion=totalData[0].confirmed/1332900000*1000000;// const doublingRate =\n// growthRate > 0 ? (70 / Math.round(growthRate)).toFixed(2) : 0;\nvar updatedDate=!isNaN(parse(testObject===null||testObject===void 0?void 0:testObject.updatedon,'dd/MM/yyyy',new Date()))?\"As of \".concat(format(parse(testObject===null||testObject===void 0?void 0:testObject.updatedon,'dd/MM/yyyy',new Date()),'dd MMM')):'';return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"StateMeta population\"},/*#__PURE__*/React.createElement(ReactTooltip,{place:\"top\",type:\"dark\",effect:\"solid\",multiline:true,scrollHide:true,globalEventOff:\"click\",id:\"stateMeta\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"meta-item population fadeInUp\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Population\"),/*#__PURE__*/React.createElement(\"h1\",null,formatNumber(population))),/*#__PURE__*/React.createElement(\"div\",{className:\"alert\"},/*#__PURE__*/React.createElement(Icon.Compass,null),/*#__PURE__*/React.createElement(\"div\",{className:\"alert-right\"},\"Based on 2019 population projection by NCP\",' ',/*#__PURE__*/React.createElement(\"a\",{href:\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\",target:\"_noblank\"},\"report\")))),/*#__PURE__*/React.createElement(\"div\",{className:\"StateMeta\"},/*#__PURE__*/React.createElement(StateMetaCard,{className:\"confirmed\",title:'Confirmed Per Million',statistic:confirmedPerMillion.toFixed(2),total:totalConfirmedPerMillion.toFixed(2),formula:'(confirmed / state population) * 1 Million',description:\"\\n            \".concat(Math.round(confirmedPerMillion),\" out of every 1 million people in \").concat(stateData.state,\" have tested positive for the virus.\\n            \")}),/*#__PURE__*/React.createElement(StateMetaCard,{className:\"active\",title:'Active',statistic:\"\".concat(activePercent.toFixed(2),\"%\"),formula:'(active / confirmed) * 100',description:\"For every 100 confirmed cases, \".concat(activePercent.toFixed(0),\" are currently infected.\")}),/*#__PURE__*/React.createElement(StateMetaCard,{className:\"recovery\",title:'Recovery Rate',statistic:\"\".concat(recoveryPercent.toFixed(2),\"%\"),formula:'(recovered / confirmed) * 100',description:\"For every 100 confirmed cases,\\n            \".concat(Math.round(recoveryPercent.toFixed(0)),\" have recovered from the virus.\")}),/*#__PURE__*/React.createElement(StateMetaCard,{className:\"mortality\",title:'Mortality Rate',statistic:\"\".concat(deathPercent.toFixed(2),\"%\"),formula:'(deceased / confirmed) * 100',description:\"For every 100 confirmed cases,\\n            \".concat(Math.round(deathPercent.toFixed(0)),\" have unfortunately passed away from the virus.\")}),/*#__PURE__*/React.createElement(StateMetaCard,{className:\"gr\",title:'Avg. Growth Rate',statistic:growthRate>0?\"\".concat(Math.round(growthRate/7),\"%\"):'-',formula:'(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7',date:\"\".concat(sevenDayBeforeDate,\" - \").concat(previousDayDate),description:\"In the last one week, the number of new infections has grown by an average of \".concat(Math.round(growthRate/7),\"% every day.\")}),/*#__PURE__*/React.createElement(StateMetaCard,{className:\"tpm\",title:'Tests Per Million',statistic:\"\\u2248 \".concat(Math.round(testPerMillion)),formula:'(total tests in state / total population of state) * 1 Million',date:updatedDate,description:\"For every 1 million people in \".concat(stateData.state,\",\\n            \").concat(Math.round(testPerMillion),\" people were tested.\")})));}export default StateMeta;","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/components/statemeta.js"],"names":["StateMetaCard","formatNumber","format","parse","React","Icon","ReactTooltip","StateMeta","stateData","testObject","population","lastSevenDaysData","totalData","confirmed","active","deaths","recovered","sevenDayBeforeData","totalconfirmed","sevenDayBeforeDate","date","previousDayData","previousDayDate","confirmedPerMillion","recoveryPercent","activePercent","deathPercent","testPerMillion","totaltested","growthRate","totalConfirmedPerMillion","updatedDate","isNaN","updatedon","Date","toFixed","Math","round","state"],"mappings":"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","sourcesContent":["import StateMetaCard from './statemetacard';\r\n\r\nimport {formatNumber} from '../utils/commonfunctions';\r\n\r\nimport {format, parse} from 'date-fns';\r\nimport React from 'react';\r\nimport * as Icon from 'react-feather';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nfunction StateMeta({\r\n  stateData,\r\n  testObject,\r\n  population,\r\n  lastSevenDaysData,\r\n  totalData,\r\n}) {\r\n  const confirmed = stateData.confirmed;\r\n  const active = stateData.active;\r\n  const deaths = stateData.deaths;\r\n  const recovered = confirmed - active - deaths;\r\n  const sevenDayBeforeData = lastSevenDaysData[0].totalconfirmed;\r\n  const sevenDayBeforeDate = format(lastSevenDaysData[0].date, 'dd MMM');\r\n  const previousDayData = lastSevenDaysData[6].totalconfirmed;\r\n  const previousDayDate = format(lastSevenDaysData[6].date, 'dd MMM');\r\n  const confirmedPerMillion = (confirmed / population) * 1000000;\r\n  const recoveryPercent = (recovered / confirmed) * 100;\r\n  const activePercent = (active / confirmed) * 100;\r\n  const deathPercent = (deaths / confirmed) * 100;\r\n  const testPerMillion = (testObject?.totaltested / population) * 1000000;\r\n  const growthRate =\r\n    ((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100;\r\n  const totalConfirmedPerMillion =\r\n    (totalData[0].confirmed / 1332900000) * 1000000;\r\n  // const doublingRate =\r\n  // growthRate > 0 ? (70 / Math.round(growthRate)).toFixed(2) : 0;\r\n\r\n  const updatedDate = !isNaN(\r\n    parse(testObject?.updatedon, 'dd/MM/yyyy', new Date())\r\n  )\r\n    ? `As of ${format(\r\n        parse(testObject?.updatedon, 'dd/MM/yyyy', new Date()),\r\n        'dd MMM'\r\n      )}`\r\n    : '';\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"StateMeta population\">\r\n        <ReactTooltip\r\n          place=\"top\"\r\n          type=\"dark\"\r\n          effect=\"solid\"\r\n          multiline={true}\r\n          scrollHide={true}\r\n          globalEventOff=\"click\"\r\n          id=\"stateMeta\"\r\n        />\r\n        <div className=\"meta-item population fadeInUp\">\r\n          <h3>Population</h3>\r\n          <h1>{formatNumber(population)}</h1>\r\n        </div>\r\n        <div className=\"alert\">\r\n          <Icon.Compass />\r\n          <div className=\"alert-right\">\r\n            Based on 2019 population projection by NCP{' '}\r\n            <a\r\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\r\n              target=\"_noblank\"\r\n            >\r\n              report\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"StateMeta\">\r\n        <StateMetaCard\r\n          className=\"confirmed\"\r\n          title={'Confirmed Per Million'}\r\n          statistic={confirmedPerMillion.toFixed(2)}\r\n          total={totalConfirmedPerMillion.toFixed(2)}\r\n          formula={'(confirmed / state population) * 1 Million'}\r\n          description={`\r\n            ${Math.round(\r\n              confirmedPerMillion\r\n            )} out of every 1 million people in ${\r\n            stateData.state\r\n          } have tested positive for the virus.\r\n            `}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"active\"\r\n          title={'Active'}\r\n          statistic={`${activePercent.toFixed(2)}%`}\r\n          formula={'(active / confirmed) * 100'}\r\n          description={`For every 100 confirmed cases, ${activePercent.toFixed(\r\n            0\r\n          )} are currently infected.`}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"recovery\"\r\n          title={'Recovery Rate'}\r\n          statistic={`${recoveryPercent.toFixed(2)}%`}\r\n          formula={'(recovered / confirmed) * 100'}\r\n          description={`For every 100 confirmed cases,\r\n            ${Math.round(\r\n              recoveryPercent.toFixed(0)\r\n            )} have recovered from the virus.`}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"mortality\"\r\n          title={'Mortality Rate'}\r\n          statistic={`${deathPercent.toFixed(2)}%`}\r\n          formula={'(deceased / confirmed) * 100'}\r\n          description={`For every 100 confirmed cases,\r\n            ${Math.round(\r\n              deathPercent.toFixed(0)\r\n            )} have unfortunately passed away from the virus.`}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"gr\"\r\n          title={'Avg. Growth Rate'}\r\n          statistic={growthRate > 0 ? `${Math.round(growthRate / 7)}%` : '-'}\r\n          formula={\r\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\r\n          }\r\n          date={`${sevenDayBeforeDate} - ${previousDayDate}`}\r\n          description={`In the last one week, the number of new infections has grown by an average of ${Math.round(\r\n            growthRate / 7\r\n          )}% every day.`}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"tpm\"\r\n          title={'Tests Per Million'}\r\n          statistic={`≈ ${Math.round(testPerMillion)}`}\r\n          formula={\r\n            '(total tests in state / total population of state) * 1 Million'\r\n          }\r\n          date={updatedDate}\r\n          description={`For every 1 million people in ${stateData.state},\r\n            ${Math.round(testPerMillion)} people were tested.`}\r\n        />\r\n\r\n        {/* <div className=\"meta-item ptr fadeInUp\">\r\n          <div className=\"meta-item-top\">\r\n            <h3>Positive Test Rate</h3>\r\n            <span\r\n              data-tip={\r\n                'TPM = (total tests in state / total population of state) * 1 Million'\r\n              }\r\n              data-event=\"touchstart mouseover\"\r\n              data-event-off=\"mouseleave\"\r\n              data-for=\"stateMeta\"\r\n            >\r\n              <Icon.Info />\r\n            </span>\r\n          </div>\r\n          <h1>\r\n            {testObject?.testpositivityrate\r\n              ? testObject.testpositivityrate\r\n              : 'N/A'}\r\n          </h1>\r\n          {updatedDate}\r\n          <p>\r\n            {testObject?.testpositivityrate\r\n              ? `Out the of total tests conducted till date month, ${testObject.testpositivityrate}% were positive for the virus`\r\n              : 'N/A'}\r\n          </p>\r\n        </div>*/}\r\n\r\n        {/*\r\n          <div className=\"meta-item dbr fadeInUp\">\r\n            <div className=\"meta-item-top\">\r\n              <h3>Doubling Rate</h3>\r\n              <Icon.Info />\r\n            </div>\r\n            <h1>\r\n              {doublingRate > 0 ? Math.round(doublingRate * 7) + ' Days' : '-'}\r\n            </h1>\r\n            <h6 style={{margin: '0'}}>\r\n              {sevenDayBeforeDate} - {previousDayDate}\r\n            </h6>\r\n          </div>\r\n        )*/}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default StateMeta;\r\n"]},"metadata":{},"sourceType":"module"}