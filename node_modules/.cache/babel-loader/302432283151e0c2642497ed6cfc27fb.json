{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\src\\\\components\\\\choropleth.js\";\nimport MapLegend from './maplegend';\nimport { MAP_META, MAP_STATISTICS, MAP_TYPES, MAP_VIEWS } from '../constants';\nimport { capitalizeAll } from '../utils/commonfunctions';\nimport * as d3 from 'd3';\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport * as Icon from 'react-feather';\nimport { useTranslation } from 'react-i18next';\nimport useSWR from 'swr';\nimport * as topojson from 'topojson';\n\nconst colorInterpolator = (caseType, t) => {\n  switch (caseType) {\n    case 'confirmed':\n      return d3.interpolateReds(t * 0.85);\n\n    case 'active':\n      return d3.interpolateBlues(t * 0.85);\n\n    case 'recovered':\n      return d3.interpolateGreens(t * 0.85);\n\n    case 'deceased':\n      return d3.interpolateGreys(t * 0.85);\n\n    default:\n      return;\n  }\n};\n\nconst caseColor = (caseType, alpha = '') => {\n  switch (caseType) {\n    case 'confirmed':\n      return '#ff073a' + alpha;\n\n    case 'active':\n      return '#007bff' + alpha;\n\n    case 'recovered':\n      return '#28a745' + alpha;\n\n    case 'deceased':\n      return '#6c757d' + alpha;\n\n    default:\n      return;\n  }\n};\n\nfunction ChoroplethMap({\n  statistic,\n  mapData,\n  currentMap,\n  changeMap,\n  regionHighlighted,\n  setRegionHighlighted,\n  mapOption,\n  isCountryLoaded\n}) {\n  var _mapData$currentMap$n, _mapData$currentMap$n2;\n\n  const {\n    t\n  } = useTranslation();\n  const svgRef = useRef(null);\n  const mapMeta = MAP_META[currentMap.name];\n  const geoDataResponse = useSWR(mapMeta.geoDataFile, async file => {\n    return await d3.json(file);\n  });\n  const mapScale = useMemo(() => {\n    if (currentMap.stat === MAP_STATISTICS.ZONE) {\n      return d3.scaleOrdinal(['Red', 'Orange', 'Green'], ['#d73027', '#fee08b', '#66bd63']);\n    } else if (currentMap.stat === MAP_STATISTICS.HOTSPOTS) {\n      const {\n        width\n      } = svgRef.current.getBoundingClientRect();\n      return d3.scaleSqrt([0, statistic[mapOption].max], [0, width / 10]).clamp(true);\n    } else {\n      return d3.scaleSequential([0, Math.max(1, statistic[mapOption].max)], t => colorInterpolator(mapOption, t)).clamp(true);\n    }\n  }, [currentMap.stat, statistic, mapOption]);\n  useEffect(() => {\n    if (!geoDataResponse.data) return;\n    const geoData = geoDataResponse.data;\n    const topology = topojson.feature(geoData, geoData.objects[mapMeta.graphObjectStates || mapMeta.graphObjectDistricts]);\n    const svg = d3.select(svgRef.current);\n\n    if (!svg.attr('viewBox')) {\n      const {\n        width: widthDefault,\n        height: heightDefault\n      } = svgRef.current.getBoundingClientRect();\n      const projection = isCountryLoaded ? d3.geoMercator().fitWidth(widthDefault, topology) : d3.geoMercator().fitSize([widthDefault, heightDefault], topology);\n      const path = d3.geoPath(projection);\n      const bBox = path.bounds(topology);\n      const [width, height] = [+bBox[1][0], bBox[1][1]];\n      svg.attr('viewBox', `0 0 ${width} ${height}`);\n    }\n\n    const bBox = svg.attr('viewBox').split(' ');\n    const [width, height] = [+bBox[2], +bBox[3]];\n    const projection = d3.geoMercator().fitSize([width, height], topology);\n    const path = d3.geoPath(projection); // Add id to each feature\n\n    let features = currentMap.stat !== MAP_STATISTICS.HOTSPOTS ? currentMap.view === MAP_VIEWS.STATES ? topojson.feature(geoData, geoData.objects[mapMeta.graphObjectStates]).features : topojson.feature(geoData, geoData.objects[mapMeta.graphObjectDistricts]).features : [...topojson.feature(geoData, geoData.objects[mapMeta.graphObjectStates]).features, ...topojson.feature(geoData, geoData.objects[mapMeta.graphObjectDistricts]).features];\n    features = features.map(f => {\n      const district = f.properties.district;\n      const state = f.properties.st_nm;\n      const obj = Object.assign({}, f);\n      obj.id = `${currentMap.name}-${state}${district ? '-' + district : ''}`;\n      return obj;\n    });\n    /* Draw map */\n\n    const t = d3.transition().duration(500);\n    let onceTouchedRegion = null;\n    const regionSelection = svg.select('.regions').selectAll('path').data(currentMap.stat !== MAP_STATISTICS.HOTSPOTS ? features : [], d => d.id).join(enter => {\n      const sel = enter.append('path').attr('d', path).attr('stroke-width', 2).attr('stroke-opacity', 0).style('cursor', 'pointer').on('mouseenter', d => {\n        const region = {\n          state: d.properties.st_nm\n        };\n        if (d.properties.district) region.district = d.properties.district;\n        setRegionHighlighted(region);\n      }).on('mouseleave', d => {\n        if (onceTouchedRegion === d) onceTouchedRegion = null;\n      }).on('touchstart', d => {\n        if (onceTouchedRegion === d) onceTouchedRegion = null;else onceTouchedRegion = d;\n      }).on('click', d => {\n        d3.event.stopPropagation();\n        if (onceTouchedRegion || mapMeta.mapType === MAP_TYPES.STATE) return; // Disable pointer events till the new map is rendered\n\n        svg.attr('pointer-events', 'none');\n        svg.select('.regions').selectAll('path').attr('pointer-events', 'none'); // Switch map\n\n        changeMap(d.properties.st_nm);\n      });\n      sel.append('title');\n      return sel;\n    }).attr('pointer-events', 'none');\n    regionSelection.transition(t).attr('fill', d => {\n      let n;\n\n      if (currentMap.stat === MAP_STATISTICS.ZONE) {\n        const state = d.properties.st_nm;\n        const district = d.properties.district;\n        n = mapData[state] && mapData[state][district] ? mapData[state][district] : 0;\n      } else {\n        const state = d.properties.st_nm;\n        const district = d.properties.district;\n        if (district) n = mapData[state] && mapData[state][district] && mapData[state][district][mapOption] ? mapData[state][district][mapOption] : 0;else n = mapData[state] && mapData[state][mapOption] ? mapData[state][mapOption] : 0;\n      }\n\n      const color = n === 0 ? '#ffffff00' : mapScale(n);\n      return color;\n    }).attr('stroke', currentMap.stat === MAP_STATISTICS.ZONE ? '#343a40' : caseColor(mapOption)).on('end', function () {\n      d3.select(this).attr('pointer-events', 'all');\n    });\n    regionSelection.select('title').text(d => {\n      if (currentMap.stat === MAP_STATISTICS.TOTAL) {\n        const state = d.properties.st_nm;\n        const district = d.properties.district;\n        let n;\n        if (district) n = mapData[state] && mapData[state][district] ? mapData[state][district][mapOption] : 0;else n = mapData[state] ? mapData[state][mapOption] : 0;\n        return Number(parseFloat(100 * (n / (statistic[mapOption].total || 0.001))).toFixed(2)).toString() + '% from ' + capitalizeAll(district ? district : state);\n      }\n    });\n    svg.transition().duration(mapMeta.mapType === MAP_TYPES.STATE ? t.duration() / 2 : 0).on('end', () => svg.attr('class', currentMap.stat === MAP_STATISTICS.ZONE ? 'zone' : ''));\n    /* ----------BUBBLE MAP----------*/\n\n    let circlesData = [];\n\n    if (currentMap.stat === MAP_STATISTICS.HOTSPOTS) {\n      circlesData = features.map(d => {\n        const district = d.properties.district;\n        const state = d.properties.st_nm;\n\n        if (district) {\n          d.value = mapData[state] && mapData[state][district] ? mapData[state][district][mapOption] : 0;\n        } else {\n          d.value = mapData[state] && mapData[state].Unknown ? mapData[state].Unknown[mapOption] : 0;\n        }\n\n        return d;\n      }).sort((a, b) => b.value - a.value);\n    }\n\n    svg.select('.circles').selectAll('circle').data(circlesData, d => d.id).join(enter => enter.append('circle').attr('transform', d => `translate(${path.centroid(d)})`).attr('fill-opacity', 0.5).style('cursor', 'pointer').attr('pointer-events', 'all').on('mouseenter', d => {\n      const region = {\n        state: d.properties.st_nm,\n        district: d.properties.district || 'Unknown'\n      };\n      setRegionHighlighted(region);\n    }).on('click', () => {\n      d3.event.stopPropagation();\n    })).transition(t).attr('fill', caseColor(mapOption, '70')).attr('stroke', caseColor(mapOption, '70')).attr('r', d => mapScale(d.value));\n    /* ------------------------------*/\n\n    let meshStates = [];\n\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n      meshStates = [topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectStates])];\n      meshStates[0].id = mapMeta.graphObjectStates;\n    }\n\n    let meshDistricts = [];\n\n    if (currentMap.view === MAP_VIEWS.DISTRICTS) {\n      // Add id to mesh\n      meshDistricts = [topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectDistricts])];\n      meshDistricts[0].id = mapMeta.graphObjectDistricts;\n    }\n\n    svg.select(currentMap.view === MAP_VIEWS.STATES ? '.state-borders' : '.district-borders').attr('fill', 'none').attr('stroke-width', function () {\n      return mapMeta.mapType === MAP_TYPES.COUNTRY && currentMap.view === MAP_VIEWS.DISTRICTS ? 0 : width / 250;\n    }).selectAll('path').data(currentMap.view === MAP_VIEWS.STATES ? meshStates : meshDistricts, d => d.id).join(enter => enter.append('path').attr('d', path)).transition(t).attr('stroke', () => {\n      if (currentMap.stat === MAP_STATISTICS.ZONE) {\n        return '#00000060';\n      } else {\n        return caseColor(mapOption, '30');\n      }\n    });\n    svg.select(currentMap.view === MAP_VIEWS.STATES ? '.district-borders' : '.state-borders').selectAll('path').data(currentMap.view === MAP_VIEWS.STATES ? meshDistricts : meshStates, d => d.id).join(enter => enter.append('path').attr('d', path).attr('fill', 'none').attr('stroke-width', width / 250)).transition(t).attr('stroke', '#343a4099'); // Reset on tapping outside map\n\n    svg.attr('pointer-events', 'auto').on('click', () => {\n      if (mapMeta.mapType !== MAP_TYPES.STATE) {\n        setRegionHighlighted({\n          state: 'Total'\n        });\n      }\n    });\n  }, [geoDataResponse.data, mapMeta, currentMap, setRegionHighlighted, changeMap, isCountryLoaded, mapScale, statistic, mapData, mapOption]);\n  const highlightRegionInMap = useCallback((state, district) => {\n    const svg = d3.select(svgRef.current);\n\n    if (currentMap.stat === MAP_STATISTICS.HOTSPOTS) {\n      svg.select('.circles').selectAll('circle').attr('fill-opacity', d => {\n        const highlighted = district && state === d.properties.st_nm && (district === d.properties.district || district === 'Unknown' && !d.properties.district);\n        return highlighted ? 1 : 0.5;\n      });\n    } else {\n      svg.select('.regions').selectAll('path').each(function (d) {\n        var _d$properties;\n\n        const highlighted = district === ((_d$properties = d.properties) === null || _d$properties === void 0 ? void 0 : _d$properties.district) && state === d.properties.st_nm;\n        if (highlighted) this.parentNode.appendChild(this);\n        d3.select(this).attr('stroke-opacity', highlighted ? 1 : 0);\n      });\n    }\n  }, [currentMap.stat]);\n  useEffect(() => {\n    if (!geoDataResponse.data) return;\n    highlightRegionInMap(regionHighlighted.state, regionHighlighted.district);\n  }, [geoDataResponse.data, highlightRegionInMap, regionHighlighted.state, regionHighlighted.district, mapOption]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"svg-parent fadeInUp\",\n    style: {\n      animationDelay: '2.5s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    id: \"chart\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    className: \"regions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    className: \"state-borders\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 11\n    }\n  }), currentMap.view === MAP_VIEWS.DISTRICTS && /*#__PURE__*/React.createElement(\"g\", {\n    className: \"district-borders\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 13\n    }\n  }), currentMap.stat === MAP_STATISTICS.HOTSPOTS && /*#__PURE__*/React.createElement(\"g\", {\n    className: \"circles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 13\n    }\n  })), mapMeta.mapType === MAP_TYPES.STATE && ((_mapData$currentMap$n = mapData[currentMap.name]) === null || _mapData$currentMap$n === void 0 ? void 0 : _mapData$currentMap$n.Unknown) && ((_mapData$currentMap$n2 = mapData[currentMap.name]) === null || _mapData$currentMap$n2 === void 0 ? void 0 : _mapData$currentMap$n2.Unknown[mapOption]) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disclaimer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Icon.AlertCircle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 13\n    }\n  }), t('District-wise {{mapOption}} numbers are under reconciliation', {\n    mapOption: t(mapOption)\n  })) : ''), mapScale && /*#__PURE__*/React.createElement(MapLegend, {\n    mapScale: mapScale,\n    statistic: statistic,\n    mapStatistic: currentMap.stat,\n    mapOption: mapOption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"svg\", {\n    style: {\n      position: 'absolute',\n      height: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"balance-color\",\n    colorInterpolationFilters: \"sRGB\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0.91372549  0           0            0  0.08627451\\r 0           0.91372549  0            0  0.08627451\\r 0           0           0.854901961  0  0.145098039\\r 0           0           0            1  0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default ChoroplethMap;","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/components/choropleth.js"],"names":["MapLegend","MAP_META","MAP_STATISTICS","MAP_TYPES","MAP_VIEWS","capitalizeAll","d3","React","useCallback","useEffect","useMemo","useRef","Icon","useTranslation","useSWR","topojson","colorInterpolator","caseType","t","interpolateReds","interpolateBlues","interpolateGreens","interpolateGreys","caseColor","alpha","ChoroplethMap","statistic","mapData","currentMap","changeMap","regionHighlighted","setRegionHighlighted","mapOption","isCountryLoaded","svgRef","mapMeta","name","geoDataResponse","geoDataFile","file","json","mapScale","stat","ZONE","scaleOrdinal","HOTSPOTS","width","current","getBoundingClientRect","scaleSqrt","max","clamp","scaleSequential","Math","data","geoData","topology","feature","objects","graphObjectStates","graphObjectDistricts","svg","select","attr","widthDefault","height","heightDefault","projection","geoMercator","fitWidth","fitSize","path","geoPath","bBox","bounds","split","features","view","STATES","map","f","district","properties","state","st_nm","obj","Object","assign","id","transition","duration","onceTouchedRegion","regionSelection","selectAll","d","join","enter","sel","append","style","on","region","event","stopPropagation","mapType","STATE","n","color","text","TOTAL","Number","parseFloat","total","toFixed","toString","circlesData","value","Unknown","sort","a","b","centroid","meshStates","COUNTRY","mesh","meshDistricts","DISTRICTS","highlightRegionInMap","highlighted","each","parentNode","appendChild","animationDelay","position"],"mappings":"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","sourcesContent":["import MapLegend from './maplegend';\r\n\r\nimport {MAP_META, MAP_STATISTICS, MAP_TYPES, MAP_VIEWS} from '../constants';\r\nimport {capitalizeAll} from '../utils/commonfunctions';\r\n\r\nimport * as d3 from 'd3';\r\nimport React, {useCallback, useEffect, useMemo, useRef} from 'react';\r\nimport * as Icon from 'react-feather';\r\nimport {useTranslation} from 'react-i18next';\r\nimport useSWR from 'swr';\r\nimport * as topojson from 'topojson';\r\n\r\nconst colorInterpolator = (caseType, t) => {\r\n  switch (caseType) {\r\n    case 'confirmed':\r\n      return d3.interpolateReds(t * 0.85);\r\n    case 'active':\r\n      return d3.interpolateBlues(t * 0.85);\r\n    case 'recovered':\r\n      return d3.interpolateGreens(t * 0.85);\r\n    case 'deceased':\r\n      return d3.interpolateGreys(t * 0.85);\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nconst caseColor = (caseType, alpha = '') => {\r\n  switch (caseType) {\r\n    case 'confirmed':\r\n      return '#ff073a' + alpha;\r\n    case 'active':\r\n      return '#007bff' + alpha;\r\n    case 'recovered':\r\n      return '#28a745' + alpha;\r\n    case 'deceased':\r\n      return '#6c757d' + alpha;\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nfunction ChoroplethMap({\r\n  statistic,\r\n  mapData,\r\n  currentMap,\r\n  changeMap,\r\n  regionHighlighted,\r\n  setRegionHighlighted,\r\n  mapOption,\r\n  isCountryLoaded,\r\n}) {\r\n  const {t} = useTranslation();\r\n  const svgRef = useRef(null);\r\n\r\n  const mapMeta = MAP_META[currentMap.name];\r\n  const geoDataResponse = useSWR(mapMeta.geoDataFile, async (file) => {\r\n    return await d3.json(file);\r\n  });\r\n\r\n  const mapScale = useMemo(() => {\r\n    if (currentMap.stat === MAP_STATISTICS.ZONE) {\r\n      return d3.scaleOrdinal(\r\n        ['Red', 'Orange', 'Green'],\r\n        ['#d73027', '#fee08b', '#66bd63']\r\n      );\r\n    } else if (currentMap.stat === MAP_STATISTICS.HOTSPOTS) {\r\n      const {width} = svgRef.current.getBoundingClientRect();\r\n      return d3\r\n        .scaleSqrt([0, statistic[mapOption].max], [0, width / 10])\r\n        .clamp(true);\r\n    } else {\r\n      return d3\r\n        .scaleSequential([0, Math.max(1, statistic[mapOption].max)], (t) =>\r\n          colorInterpolator(mapOption, t)\r\n        )\r\n        .clamp(true);\r\n    }\r\n  }, [currentMap.stat, statistic, mapOption]);\r\n\r\n  useEffect(() => {\r\n    if (!geoDataResponse.data) return;\r\n    const geoData = geoDataResponse.data;\r\n\r\n    const topology = topojson.feature(\r\n      geoData,\r\n      geoData.objects[mapMeta.graphObjectStates || mapMeta.graphObjectDistricts]\r\n    );\r\n\r\n    const svg = d3.select(svgRef.current);\r\n\r\n    if (!svg.attr('viewBox')) {\r\n      const {\r\n        width: widthDefault,\r\n        height: heightDefault,\r\n      } = svgRef.current.getBoundingClientRect();\r\n      const projection = isCountryLoaded\r\n        ? d3.geoMercator().fitWidth(widthDefault, topology)\r\n        : d3.geoMercator().fitSize([widthDefault, heightDefault], topology);\r\n      const path = d3.geoPath(projection);\r\n      const bBox = path.bounds(topology);\r\n      const [width, height] = [+bBox[1][0], bBox[1][1]];\r\n      svg.attr('viewBox', `0 0 ${width} ${height}`);\r\n    }\r\n    const bBox = svg.attr('viewBox').split(' ');\r\n    const [width, height] = [+bBox[2], +bBox[3]];\r\n\r\n    const projection = d3.geoMercator().fitSize([width, height], topology);\r\n    const path = d3.geoPath(projection);\r\n\r\n    // Add id to each feature\r\n    let features =\r\n      currentMap.stat !== MAP_STATISTICS.HOTSPOTS\r\n        ? currentMap.view === MAP_VIEWS.STATES\r\n          ? topojson.feature(\r\n              geoData,\r\n              geoData.objects[mapMeta.graphObjectStates]\r\n            ).features\r\n          : topojson.feature(\r\n              geoData,\r\n              geoData.objects[mapMeta.graphObjectDistricts]\r\n            ).features\r\n        : [\r\n            ...topojson.feature(\r\n              geoData,\r\n              geoData.objects[mapMeta.graphObjectStates]\r\n            ).features,\r\n            ...topojson.feature(\r\n              geoData,\r\n              geoData.objects[mapMeta.graphObjectDistricts]\r\n            ).features,\r\n          ];\r\n\r\n    features = features.map((f) => {\r\n      const district = f.properties.district;\r\n      const state = f.properties.st_nm;\r\n      const obj = Object.assign({}, f);\r\n      obj.id = `${currentMap.name}-${state}${district ? '-' + district : ''}`;\r\n      return obj;\r\n    });\r\n\r\n    /* Draw map */\r\n    const t = d3.transition().duration(500);\r\n    let onceTouchedRegion = null;\r\n    const regionSelection = svg\r\n      .select('.regions')\r\n      .selectAll('path')\r\n      .data(\r\n        currentMap.stat !== MAP_STATISTICS.HOTSPOTS ? features : [],\r\n        (d) => d.id\r\n      )\r\n      .join((enter) => {\r\n        const sel = enter\r\n          .append('path')\r\n          .attr('d', path)\r\n          .attr('stroke-width', 2)\r\n          .attr('stroke-opacity', 0)\r\n          .style('cursor', 'pointer')\r\n          .on('mouseenter', (d) => {\r\n            const region = {state: d.properties.st_nm};\r\n            if (d.properties.district) region.district = d.properties.district;\r\n            setRegionHighlighted(region);\r\n          })\r\n          .on('mouseleave', (d) => {\r\n            if (onceTouchedRegion === d) onceTouchedRegion = null;\r\n          })\r\n          .on('touchstart', (d) => {\r\n            if (onceTouchedRegion === d) onceTouchedRegion = null;\r\n            else onceTouchedRegion = d;\r\n          })\r\n          .on('click', (d) => {\r\n            d3.event.stopPropagation();\r\n            if (onceTouchedRegion || mapMeta.mapType === MAP_TYPES.STATE)\r\n              return;\r\n            // Disable pointer events till the new map is rendered\r\n            svg.attr('pointer-events', 'none');\r\n            svg\r\n              .select('.regions')\r\n              .selectAll('path')\r\n              .attr('pointer-events', 'none');\r\n            // Switch map\r\n            changeMap(d.properties.st_nm);\r\n          });\r\n        sel.append('title');\r\n        return sel;\r\n      })\r\n      .attr('pointer-events', 'none');\r\n\r\n    regionSelection\r\n      .transition(t)\r\n      .attr('fill', (d) => {\r\n        let n;\r\n        if (currentMap.stat === MAP_STATISTICS.ZONE) {\r\n          const state = d.properties.st_nm;\r\n          const district = d.properties.district;\r\n          n =\r\n            mapData[state] && mapData[state][district]\r\n              ? mapData[state][district]\r\n              : 0;\r\n        } else {\r\n          const state = d.properties.st_nm;\r\n          const district = d.properties.district;\r\n          if (district)\r\n            n =\r\n              mapData[state] &&\r\n              mapData[state][district] &&\r\n              mapData[state][district][mapOption]\r\n                ? mapData[state][district][mapOption]\r\n                : 0;\r\n          else\r\n            n =\r\n              mapData[state] && mapData[state][mapOption]\r\n                ? mapData[state][mapOption]\r\n                : 0;\r\n        }\r\n        const color = n === 0 ? '#ffffff00' : mapScale(n);\r\n        return color;\r\n      })\r\n      .attr(\r\n        'stroke',\r\n        currentMap.stat === MAP_STATISTICS.ZONE\r\n          ? '#343a40'\r\n          : caseColor(mapOption)\r\n      )\r\n      .on('end', function () {\r\n        d3.select(this).attr('pointer-events', 'all');\r\n      });\r\n\r\n    regionSelection.select('title').text((d) => {\r\n      if (currentMap.stat === MAP_STATISTICS.TOTAL) {\r\n        const state = d.properties.st_nm;\r\n        const district = d.properties.district;\r\n        let n;\r\n        if (district)\r\n          n =\r\n            mapData[state] && mapData[state][district]\r\n              ? mapData[state][district][mapOption]\r\n              : 0;\r\n        else n = mapData[state] ? mapData[state][mapOption] : 0;\r\n        return (\r\n          Number(\r\n            parseFloat(\r\n              100 * (n / (statistic[mapOption].total || 0.001))\r\n            ).toFixed(2)\r\n          ).toString() +\r\n          '% from ' +\r\n          capitalizeAll(district ? district : state)\r\n        );\r\n      }\r\n    });\r\n\r\n    svg\r\n      .transition()\r\n      .duration(mapMeta.mapType === MAP_TYPES.STATE ? t.duration() / 2 : 0)\r\n      .on('end', () =>\r\n        svg.attr('class', currentMap.stat === MAP_STATISTICS.ZONE ? 'zone' : '')\r\n      );\r\n\r\n    /* ----------BUBBLE MAP----------*/\r\n    let circlesData = [];\r\n    if (currentMap.stat === MAP_STATISTICS.HOTSPOTS) {\r\n      circlesData = features\r\n        .map((d) => {\r\n          const district = d.properties.district;\r\n          const state = d.properties.st_nm;\r\n          if (district) {\r\n            d.value =\r\n              mapData[state] && mapData[state][district]\r\n                ? mapData[state][district][mapOption]\r\n                : 0;\r\n          } else {\r\n            d.value =\r\n              mapData[state] && mapData[state].Unknown\r\n                ? mapData[state].Unknown[mapOption]\r\n                : 0;\r\n          }\r\n          return d;\r\n        })\r\n        .sort((a, b) => b.value - a.value);\r\n    }\r\n\r\n    svg\r\n      .select('.circles')\r\n      .selectAll('circle')\r\n      .data(circlesData, (d) => d.id)\r\n      .join((enter) =>\r\n        enter\r\n          .append('circle')\r\n          .attr('transform', (d) => `translate(${path.centroid(d)})`)\r\n          .attr('fill-opacity', 0.5)\r\n          .style('cursor', 'pointer')\r\n          .attr('pointer-events', 'all')\r\n          .on('mouseenter', (d) => {\r\n            const region = {\r\n              state: d.properties.st_nm,\r\n              district: d.properties.district || 'Unknown',\r\n            };\r\n            setRegionHighlighted(region);\r\n          })\r\n          .on('click', () => {\r\n            d3.event.stopPropagation();\r\n          })\r\n      )\r\n      .transition(t)\r\n      .attr('fill', caseColor(mapOption, '70'))\r\n      .attr('stroke', caseColor(mapOption, '70'))\r\n      .attr('r', (d) => mapScale(d.value));\r\n    /* ------------------------------*/\r\n\r\n    let meshStates = [];\r\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\r\n      meshStates = [\r\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectStates]),\r\n      ];\r\n      meshStates[0].id = mapMeta.graphObjectStates;\r\n    }\r\n    let meshDistricts = [];\r\n    if (currentMap.view === MAP_VIEWS.DISTRICTS) {\r\n      // Add id to mesh\r\n      meshDistricts = [\r\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectDistricts]),\r\n      ];\r\n      meshDistricts[0].id = mapMeta.graphObjectDistricts;\r\n    }\r\n\r\n    svg\r\n      .select(\r\n        currentMap.view === MAP_VIEWS.STATES\r\n          ? '.state-borders'\r\n          : '.district-borders'\r\n      )\r\n      .attr('fill', 'none')\r\n      .attr('stroke-width', function () {\r\n        return mapMeta.mapType === MAP_TYPES.COUNTRY &&\r\n          currentMap.view === MAP_VIEWS.DISTRICTS\r\n          ? 0\r\n          : width / 250;\r\n      })\r\n      .selectAll('path')\r\n      .data(\r\n        currentMap.view === MAP_VIEWS.STATES ? meshStates : meshDistricts,\r\n        (d) => d.id\r\n      )\r\n      .join((enter) => enter.append('path').attr('d', path))\r\n      .transition(t)\r\n      .attr('stroke', () => {\r\n        if (currentMap.stat === MAP_STATISTICS.ZONE) {\r\n          return '#00000060';\r\n        } else {\r\n          return caseColor(mapOption, '30');\r\n        }\r\n      });\r\n\r\n    svg\r\n      .select(\r\n        currentMap.view === MAP_VIEWS.STATES\r\n          ? '.district-borders'\r\n          : '.state-borders'\r\n      )\r\n      .selectAll('path')\r\n      .data(\r\n        currentMap.view === MAP_VIEWS.STATES ? meshDistricts : meshStates,\r\n        (d) => d.id\r\n      )\r\n      .join((enter) =>\r\n        enter\r\n          .append('path')\r\n          .attr('d', path)\r\n          .attr('fill', 'none')\r\n          .attr('stroke-width', width / 250)\r\n      )\r\n      .transition(t)\r\n      .attr('stroke', '#343a4099');\r\n\r\n    // Reset on tapping outside map\r\n    svg.attr('pointer-events', 'auto').on('click', () => {\r\n      if (mapMeta.mapType !== MAP_TYPES.STATE) {\r\n        setRegionHighlighted({\r\n          state: 'Total',\r\n        });\r\n      }\r\n    });\r\n  }, [\r\n    geoDataResponse.data,\r\n    mapMeta,\r\n    currentMap,\r\n    setRegionHighlighted,\r\n    changeMap,\r\n    isCountryLoaded,\r\n    mapScale,\r\n    statistic,\r\n    mapData,\r\n    mapOption,\r\n  ]);\r\n\r\n  const highlightRegionInMap = useCallback(\r\n    (state, district) => {\r\n      const svg = d3.select(svgRef.current);\r\n      if (currentMap.stat === MAP_STATISTICS.HOTSPOTS) {\r\n        svg\r\n          .select('.circles')\r\n          .selectAll('circle')\r\n          .attr('fill-opacity', (d) => {\r\n            const highlighted =\r\n              district &&\r\n              state === d.properties.st_nm &&\r\n              (district === d.properties.district ||\r\n                (district === 'Unknown' && !d.properties.district));\r\n            return highlighted ? 1 : 0.5;\r\n          });\r\n      } else {\r\n        svg\r\n          .select('.regions')\r\n          .selectAll('path')\r\n          .each(function (d) {\r\n            const highlighted =\r\n              district === d.properties?.district &&\r\n              state === d.properties.st_nm;\r\n            if (highlighted) this.parentNode.appendChild(this);\r\n            d3.select(this).attr('stroke-opacity', highlighted ? 1 : 0);\r\n          });\r\n      }\r\n    },\r\n    [currentMap.stat]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!geoDataResponse.data) return;\r\n    highlightRegionInMap(regionHighlighted.state, regionHighlighted.district);\r\n  }, [\r\n    geoDataResponse.data,\r\n    highlightRegionInMap,\r\n    regionHighlighted.state,\r\n    regionHighlighted.district,\r\n    mapOption,\r\n  ]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"svg-parent fadeInUp\" style={{animationDelay: '2.5s'}}>\r\n        <svg id=\"chart\" preserveAspectRatio=\"xMidYMid meet\" ref={svgRef}>\r\n          <g className=\"regions\" />\r\n          <g className=\"state-borders\" />\r\n          {currentMap.view === MAP_VIEWS.DISTRICTS && (\r\n            <g className=\"district-borders\" />\r\n          )}\r\n          {currentMap.stat === MAP_STATISTICS.HOTSPOTS && (\r\n            <g className=\"circles\" />\r\n          )}\r\n        </svg>\r\n        {mapMeta.mapType === MAP_TYPES.STATE &&\r\n        mapData[currentMap.name]?.Unknown &&\r\n        mapData[currentMap.name]?.Unknown[mapOption] ? (\r\n          <div className=\"disclaimer\">\r\n            <Icon.AlertCircle />\r\n            {t('District-wise {{mapOption}} numbers are under reconciliation', {\r\n              mapOption: t(mapOption),\r\n            })}\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n\r\n      {mapScale && (\r\n        <MapLegend\r\n          mapScale={mapScale}\r\n          statistic={statistic}\r\n          mapStatistic={currentMap.stat}\r\n          mapOption={mapOption}\r\n        />\r\n      )}\r\n\r\n      <svg style={{position: 'absolute', height: 0}}>\r\n        <defs>\r\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\r\n            <feColorMatrix\r\n              type=\"matrix\"\r\n              values=\"0.91372549  0           0            0  0.08627451\r\n                      0           0.91372549  0            0  0.08627451\r\n                      0           0           0.854901961  0  0.145098039\r\n                      0           0           0            1  0\"\r\n            />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ChoroplethMap;\r\n"]},"metadata":{},"sourceType":"module"}