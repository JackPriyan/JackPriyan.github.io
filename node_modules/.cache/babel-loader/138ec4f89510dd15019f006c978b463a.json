{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import{defaultOptions,xAxisDefaults,yAxisDefaults}from'./chart-defaults';import{getStateName}from'../../utils/commonfunctions';import{parse}from'date-fns';import deepmerge from'deepmerge';import React from'react';import{Line}from'react-chartjs-2';function AllStatesChart(props){var dates=[];var chartReference=React.createRef();if(!props.data||props.data.length===0){return/*#__PURE__*/React.createElement(\"div\",null);}var statesData=new Map();props.data.forEach(function(data){if(data.status!=='Confirmed'){return;}Object.keys(data).forEach(function(key){if(key==='date'){var date=parse(data.date,'dd-MMM-yy',new Date());dates.push(date);}if(key==='status'||key==='date'){return;}if(!statesData.has(key)){statesData.set(key,[]);}var previousValue=statesData.get(key).length>0?parseInt(statesData.get(key)[statesData.get(key).length-1]):0;var currentValue=data[key]!==''?parseInt(data[key]):0;statesData.get(key).push(previousValue+currentValue);});});var sortedMap=new Map(_toConsumableArray(statesData.entries()).sort(function(a,b){return a[1][a[1].length-1]<b[1][b[1].length-1]?1:-1;}));var colors=['#718af0','#7dd6fa','#59b3aa','#9bc26b','#e5d22f','#ffb041','#ff8a66','#db6b8f','#bd66cc','#8e8e8e'];var index=0;var datasets=[];sortedMap.forEach(function(data,key){if(key==='tt'){return;}if(index>=10){return;}datasets.push({borderWidth:2,data:statesData.get(key),borderCapStyle:'round',pointBackgroundColor:colors[index],label:getStateName(key),borderColor:colors[index],pointHoverRadius:0.5});index++;});var dataset={labels:dates,datasets:datasets};var options=deepmerge(defaultOptions,{tooltips:{mode:'index'},elements:{point:{radius:0},line:{tension:0}},legend:{labels:{boxWidth:20,fontSize:11}},scales:{yAxes:[deepmerge(yAxisDefaults,{type:'linear',ticks:{beginAtZero:true,max:undefined,precision:0},scaleLabel:{display:false,labelString:'Total Cases'}})],xAxes:[deepmerge(xAxisDefaults,{type:'time',time:{unit:'day',tooltipFormat:'MMM DD',stepSize:7,displayFormats:{millisecond:'MMM DD',second:'MMM DD',minute:'MMM DD',hour:'MMM DD',day:'MMM DD',week:'MMM DD',month:'MMM DD',quarter:'MMM DD',year:'MMM DD'}},gridLines:{color:'rgba(0, 0, 0, 0)'}})]}});function toggleSelection(){// Get reference of chartInstance and update it\nvar ci=chartReference.current.chartInstance;for(var i=0;i<ci.data.datasets.length;i++){var meta=ci.getDatasetMeta(i);meta.hidden=meta.hidden===null?!chartReference.current.chartInstance.data.datasets[i].hidden:null;}ci.update();}return/*#__PURE__*/React.createElement(\"div\",{className:\"charts-header\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chart-title\"},props.title),/*#__PURE__*/React.createElement(\"div\",{className:\"chart-content\"},/*#__PURE__*/React.createElement(Line,{data:dataset,options:options,ref:chartReference})),/*#__PURE__*/React.createElement(\"div\",{className:\"chart-note\",style:{marginTop:'0px',height:'30px'}},/*#__PURE__*/React.createElement(\"button\",{onClick:toggleSelection},\"Toggle Selection\")));}export default AllStatesChart;","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/components/Charts/allstates.js"],"names":["defaultOptions","xAxisDefaults","yAxisDefaults","getStateName","parse","deepmerge","React","Line","AllStatesChart","props","dates","chartReference","createRef","data","length","statesData","Map","forEach","status","Object","keys","key","date","Date","push","has","set","previousValue","get","parseInt","currentValue","sortedMap","entries","sort","a","b","colors","index","datasets","borderWidth","borderCapStyle","pointBackgroundColor","label","borderColor","pointHoverRadius","dataset","labels","options","tooltips","mode","elements","point","radius","line","tension","legend","boxWidth","fontSize","scales","yAxes","type","ticks","beginAtZero","max","undefined","precision","scaleLabel","display","labelString","xAxes","time","unit","tooltipFormat","stepSize","displayFormats","millisecond","second","minute","hour","day","week","month","quarter","year","gridLines","color","toggleSelection","ci","current","chartInstance","i","meta","getDatasetMeta","hidden","update","title","marginTop","height"],"mappings":"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","sourcesContent":["import {defaultOptions, xAxisDefaults, yAxisDefaults} from './chart-defaults';\r\n\r\nimport {getStateName} from '../../utils/commonfunctions';\r\n\r\nimport {parse} from 'date-fns';\r\nimport deepmerge from 'deepmerge';\r\nimport React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nfunction AllStatesChart(props) {\r\n  const dates = [];\r\n  const chartReference = React.createRef();\r\n\r\n  if (!props.data || props.data.length === 0) {\r\n    return <div></div>;\r\n  }\r\n\r\n  const statesData = new Map();\r\n\r\n  props.data.forEach((data) => {\r\n    if (data.status !== 'Confirmed') {\r\n      return;\r\n    }\r\n\r\n    Object.keys(data).forEach((key) => {\r\n      if (key === 'date') {\r\n        const date = parse(data.date, 'dd-MMM-yy', new Date());\r\n        dates.push(date);\r\n      }\r\n\r\n      if (key === 'status' || key === 'date') {\r\n        return;\r\n      }\r\n\r\n      if (!statesData.has(key)) {\r\n        statesData.set(key, []);\r\n      }\r\n      const previousValue =\r\n        statesData.get(key).length > 0\r\n          ? parseInt(statesData.get(key)[statesData.get(key).length - 1])\r\n          : 0;\r\n      const currentValue = data[key] !== '' ? parseInt(data[key]) : 0;\r\n      statesData.get(key).push(previousValue + currentValue);\r\n    });\r\n  });\r\n\r\n  const sortedMap = new Map(\r\n    [...statesData.entries()].sort((a, b) => {\r\n      return a[1][a[1].length - 1] < b[1][b[1].length - 1] ? 1 : -1;\r\n    })\r\n  );\r\n\r\n  const colors = [\r\n    '#718af0',\r\n    '#7dd6fa',\r\n    '#59b3aa',\r\n    '#9bc26b',\r\n    '#e5d22f',\r\n    '#ffb041',\r\n    '#ff8a66',\r\n    '#db6b8f',\r\n    '#bd66cc',\r\n    '#8e8e8e',\r\n  ];\r\n\r\n  let index = 0;\r\n  const datasets = [];\r\n  sortedMap.forEach((data, key) => {\r\n    if (key === 'tt') {\r\n      return;\r\n    }\r\n\r\n    if (index >= 10) {\r\n      return;\r\n    }\r\n\r\n    datasets.push({\r\n      borderWidth: 2,\r\n      data: statesData.get(key),\r\n      borderCapStyle: 'round',\r\n      pointBackgroundColor: colors[index],\r\n      label: getStateName(key),\r\n      borderColor: colors[index],\r\n      pointHoverRadius: 0.5,\r\n    });\r\n\r\n    index++;\r\n  });\r\n\r\n  const dataset = {\r\n    labels: dates,\r\n    datasets: datasets,\r\n  };\r\n\r\n  const options = deepmerge(defaultOptions, {\r\n    tooltips: {\r\n      mode: 'index',\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n      line: {\r\n        tension: 0,\r\n      },\r\n    },\r\n    legend: {\r\n      labels: {\r\n        boxWidth: 20,\r\n        fontSize: 11,\r\n      },\r\n    },\r\n    scales: {\r\n      yAxes: [\r\n        deepmerge(yAxisDefaults, {\r\n          type: 'linear',\r\n          ticks: {\r\n            beginAtZero: true,\r\n            max: undefined,\r\n            precision: 0,\r\n          },\r\n          scaleLabel: {\r\n            display: false,\r\n            labelString: 'Total Cases',\r\n          },\r\n        }),\r\n      ],\r\n      xAxes: [\r\n        deepmerge(xAxisDefaults, {\r\n          type: 'time',\r\n          time: {\r\n            unit: 'day',\r\n            tooltipFormat: 'MMM DD',\r\n            stepSize: 7,\r\n            displayFormats: {\r\n              millisecond: 'MMM DD',\r\n              second: 'MMM DD',\r\n              minute: 'MMM DD',\r\n              hour: 'MMM DD',\r\n              day: 'MMM DD',\r\n              week: 'MMM DD',\r\n              month: 'MMM DD',\r\n              quarter: 'MMM DD',\r\n              year: 'MMM DD',\r\n            },\r\n          },\r\n          gridLines: {\r\n            color: 'rgba(0, 0, 0, 0)',\r\n          },\r\n        }),\r\n      ],\r\n    },\r\n  });\r\n\r\n  function toggleSelection() {\r\n    // Get reference of chartInstance and update it\r\n    const ci = chartReference.current.chartInstance;\r\n    for (let i = 0; i < ci.data.datasets.length; i++) {\r\n      const meta = ci.getDatasetMeta(i);\r\n      meta.hidden =\r\n        meta.hidden === null\r\n          ? !chartReference.current.chartInstance.data.datasets[i].hidden\r\n          : null;\r\n    }\r\n    ci.update();\r\n  }\r\n\r\n  return (\r\n    <div className=\"charts-header\">\r\n      <div className=\"chart-title\">{props.title}</div>\r\n      <div className=\"chart-content\">\r\n        <Line data={dataset} options={options} ref={chartReference} />\r\n      </div>\r\n      <div className=\"chart-note\" style={{marginTop: '0px', height: '30px'}}>\r\n        <button onClick={toggleSelection}>Toggle Selection</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllStatesChart;\r\n"]},"metadata":{},"sourceType":"module"}