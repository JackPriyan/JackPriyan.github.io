{"ast":null,"code":"import { STATE_CODES, STATE_CODES_REVERSE, LOCALE_SHORTHANDS } from '../constants';\nimport { parse, differenceInDays, isBefore, isSameDay, startOfDay, format, formatDistance } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport i18n from 'i18next';\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') return true;\n  return false;\n};\nexport const getStateName = code => {\n  return STATE_CODES[code.toUpperCase()];\n};\nexport const getIndiaDay = () => {\n  return startOfDay(utcToZonedTime(new Date(), 'Asia/Kolkata'));\n};\nexport const formatDate = unformattedDate => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\nexport const formatDateAbsolute = unformattedDate => {\n  return format(parse(unformattedDate, 'dd/MM/yyyy HH:mm:ss', new Date()), 'dd MMM, hh:mm b', {\n    locale: LOCALE_SHORTHANDS[i18n.language]\n  });\n};\nexport const formatDayMonth = unformattedDate => {\n  return format(parse(unformattedDate, 'dd/MM/yyyy', new Date()), 'dd MMM', {\n    locale: LOCALE_SHORTHANDS[i18n.language]\n  });\n};\nexport const formatLastUpdated = unformattedDate => {\n  return formatDistance(new Date(formatDate(unformattedDate)), new Date(), {\n    locale: LOCALE_SHORTHANDS[i18n.language]\n  });\n};\nexport const formatTimeseriesDate = unformattedDate => {\n  return format(unformattedDate, 'dd MMMM', {\n    locale: LOCALE_SHORTHANDS[i18n.language]\n  });\n};\nexport const formatTimeseriesTickX = unformattedDate => {\n  return format(unformattedDate, 'd MMM', {\n    locale: LOCALE_SHORTHANDS[i18n.language]\n  });\n};\n\nconst validateCTS = (data = []) => {\n  const dataTypes = ['dailyconfirmed', 'dailydeceased', 'dailyrecovered', 'totalconfirmed', 'totaldeceased', 'totalrecovered'];\n  return data.filter(d => dataTypes.every(dt => d[dt]) && d.date).filter(d => dataTypes.every(dt => Number(d[dt]) >= 0)).filter(d => {\n    // Skip data from the current day\n    const today = getIndiaDay();\n    const date = parse(d.date, 'dd MMMM', new Date(2020, 0, 1));\n    return isBefore(date, today);\n  });\n};\n\nexport const preprocessTimeseries = timeseries => {\n  return validateCTS(timeseries).map((stat, index) => ({\n    date: parse(stat.date, 'dd MMMM', new Date(2020, 0, 1)),\n    totalconfirmed: +stat.totalconfirmed,\n    totalrecovered: +stat.totalrecovered,\n    totaldeceased: +stat.totaldeceased,\n    dailyconfirmed: +stat.dailyconfirmed,\n    dailyrecovered: +stat.dailyrecovered,\n    dailydeceased: +stat.dailydeceased,\n    // Active = Confimed - Recovered - Deceased\n    totalactive: +stat.totalconfirmed - +stat.totalrecovered - +stat.totaldeceased,\n    dailyactive: +stat.dailyconfirmed - +stat.dailyrecovered - +stat.dailydeceased\n  }));\n};\n/**\r\n * Returns the last `days` entries\r\n * @param {Array<Object>} timeseries\r\n * @param {number} days\r\n *\r\n * @return {Array<Object>}\r\n */\n\nexport function sliceTimeseriesFromEnd(timeseries, days) {\n  return timeseries.slice(-days);\n}\nexport const formatNumber = value => {\n  const numberFormatter = new Intl.NumberFormat('en-IN');\n  return isNaN(value) ? '-' : numberFormatter.format(value);\n};\nexport const parseStateTimeseries = ({\n  states_daily: data\n}) => {\n  const statewiseSeries = Object.keys(STATE_CODES).reduce((a, c) => {\n    a[c] = [];\n    return a;\n  }, {});\n  const today = getIndiaDay();\n\n  for (let i = 0; i < data.length; i += 3) {\n    const date = parse(data[i].date, 'dd-MMM-yy', new Date()); // Skip data from the current day\n\n    if (isBefore(date, today)) {\n      Object.entries(statewiseSeries).forEach(([k, v]) => {\n        const stateCode = k.toLowerCase();\n        const prev = v[v.length - 1] || {}; // Parser\n\n        const dailyconfirmed = +data[i][stateCode] || 0;\n        const dailyrecovered = +data[i + 1][stateCode] || 0;\n        const dailydeceased = +data[i + 2][stateCode] || 0;\n        const totalconfirmed = +data[i][stateCode] + (prev.totalconfirmed || 0);\n        const totalrecovered = +data[i + 1][stateCode] + (prev.totalrecovered || 0);\n        const totaldeceased = +data[i + 2][stateCode] + (prev.totaldeceased || 0); // Push\n\n        v.push({\n          date: date,\n          dailyconfirmed: dailyconfirmed,\n          dailyrecovered: dailyrecovered,\n          dailydeceased: dailydeceased,\n          totalconfirmed: totalconfirmed,\n          totalrecovered: totalrecovered,\n          totaldeceased: totaldeceased,\n          // Active = Confimed - Recovered - Deceased\n          totalactive: totalconfirmed - totalrecovered - totaldeceased,\n          dailyactive: dailyconfirmed - dailyrecovered - dailydeceased\n        });\n      });\n    }\n  }\n\n  return statewiseSeries;\n};\nexport const parseStateTestData = data => {\n  const reversed = [...data].reverse();\n  return Object.keys(STATE_CODES_REVERSE).reduce((ret, state) => {\n    const obj = reversed.find(obj => obj.state === state && obj.totaltested !== '');\n    ret[state] = {\n      source: (obj === null || obj === void 0 ? void 0 : obj.source1) || (obj === null || obj === void 0 ? void 0 : obj.source2),\n      totaltested: obj === null || obj === void 0 ? void 0 : obj.totaltested,\n      updatedon: obj === null || obj === void 0 ? void 0 : obj.updatedon\n    };\n    return ret;\n  }, {});\n};\nexport const parseStateTestTimeseries = data => {\n  const testTimseries = Object.keys(STATE_CODES).reduce((ret, sc) => {\n    ret[sc] = [];\n    return ret;\n  }, {});\n  const today = getIndiaDay();\n  data.forEach(d => {\n    const date = parse(d.updatedon, 'dd/MM/yyyy', new Date());\n    const totaltested = +d.totaltested;\n    const stateCode = STATE_CODES_REVERSE[d.state];\n\n    if (stateCode && isBefore(date, today) && totaltested) {\n      const stateTs = testTimseries[stateCode];\n      let dailytested;\n\n      if (stateTs.length) {\n        const prev = stateTs[stateTs.length - 1];\n        dailytested = differenceInDays(date, prev.date) === 1 ? totaltested - prev.totaltested : NaN;\n      } else dailytested = NaN;\n\n      stateTs.push({\n        date: date,\n        totaltested: totaltested,\n        dailytested: dailytested\n      });\n    }\n  });\n  return testTimseries;\n};\nexport const parseTotalTestTimeseries = data => {\n  const testTimseries = [];\n  const today = getIndiaDay();\n  data.forEach(d => {\n    const date = parse(d.updatetimestamp.split(' ')[0], 'dd/MM/yyyy', new Date());\n    const totaltested = +d.totalsamplestested;\n\n    if (isBefore(date, today) && totaltested) {\n      let dailytested;\n\n      if (testTimseries.length) {\n        const prev = testTimseries[testTimseries.length - 1];\n\n        if (isSameDay(date, prev.date)) {\n          prev.dailytested += totaltested - prev.totaltested;\n          prev.totaltested = totaltested;\n        } else {\n          if (differenceInDays(date, prev.date) === 1) dailytested = totaltested - prev.totaltested;else dailytested = NaN;\n        }\n      } else dailytested = NaN;\n\n      testTimseries.push({\n        date: date,\n        totaltested: totaltested,\n        dailytested: dailytested\n      });\n    }\n  });\n  return testTimseries;\n};\nexport const mergeTimeseries = (ts1, ts2) => {\n  const tsRet = Object.assign({}, ts1);\n\n  for (const state in ts1) {\n    if (ts1.hasOwnProperty(state)) {\n      tsRet[state] = ts1[state].map(d1 => {\n        const testData = ts2[state].find(d2 => isSameDay(d1.date, d2.date));\n        return {\n          totaltested: testData === null || testData === void 0 ? void 0 : testData.totaltested,\n          dailytested: testData === null || testData === void 0 ? void 0 : testData.dailytested,\n          ...d1\n        };\n      });\n    }\n  }\n\n  return tsRet;\n};\nexport const capitalize = s => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\nexport const capitalizeAll = s => {\n  if (typeof s !== 'string') return '';\n  const str = s.toLowerCase().split(' ');\n\n  for (let i = 0; i < str.length; i++) {\n    str[i] = capitalize(str[i]);\n  }\n\n  return str.join(' ');\n};\nexport const abbreviate = s => {\n  return s.slice(0, 1) + s.slice(1).replace(/[aeiou]/gi, '');\n};\nexport const parseDistrictZones = (data, state) => {\n  const zones = data.reduce((ret, d) => {\n    ret[d.state] = ret[d.state] || {};\n    ret[d.state][d.district] = d;\n    return ret;\n  }, {});\n  Object.values(STATE_CODES).forEach(state => {\n    if (!zones[state]) zones[state] = {};\n  });\n  return state ? {\n    [state]: zones[state]\n  } : zones;\n};\nexport const toTitleCase = str => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/utils/commonfunctions.js"],"names":["STATE_CODES","STATE_CODES_REVERSE","LOCALE_SHORTHANDS","parse","differenceInDays","isBefore","isSameDay","startOfDay","format","formatDistance","utcToZonedTime","i18n","isDevelopmentOrTest","process","env","NODE_ENV","getStateName","code","toUpperCase","getIndiaDay","Date","formatDate","unformattedDate","day","slice","month","year","time","formatDateAbsolute","locale","language","formatDayMonth","formatLastUpdated","formatTimeseriesDate","formatTimeseriesTickX","validateCTS","data","dataTypes","filter","d","every","dt","date","Number","today","preprocessTimeseries","timeseries","map","stat","index","totalconfirmed","totalrecovered","totaldeceased","dailyconfirmed","dailyrecovered","dailydeceased","totalactive","dailyactive","sliceTimeseriesFromEnd","days","formatNumber","value","numberFormatter","Intl","NumberFormat","isNaN","parseStateTimeseries","states_daily","statewiseSeries","Object","keys","reduce","a","c","i","length","entries","forEach","k","v","stateCode","toLowerCase","prev","push","parseStateTestData","reversed","reverse","ret","state","obj","find","totaltested","source","source1","source2","updatedon","parseStateTestTimeseries","testTimseries","sc","stateTs","dailytested","NaN","parseTotalTestTimeseries","updatetimestamp","split","totalsamplestested","mergeTimeseries","ts1","ts2","tsRet","assign","hasOwnProperty","d1","testData","d2","capitalize","s","charAt","capitalizeAll","str","join","abbreviate","replace","parseDistrictZones","zones","district","values","toTitleCase","txt","substr"],"mappings":"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","sourcesContent":["import {\r\n  STATE_CODES,\r\n  STATE_CODES_REVERSE,\r\n  LOCALE_SHORTHANDS,\r\n} from '../constants';\r\n\r\nimport {\r\n  parse,\r\n  differenceInDays,\r\n  isBefore,\r\n  isSameDay,\r\n  startOfDay,\r\n  format,\r\n  formatDistance,\r\n} from 'date-fns';\r\nimport {utcToZonedTime} from 'date-fns-tz';\r\nimport i18n from 'i18next';\r\n\r\nexport const isDevelopmentOrTest = () => {\r\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')\r\n    return true;\r\n  return false;\r\n};\r\n\r\nexport const getStateName = (code) => {\r\n  return STATE_CODES[code.toUpperCase()];\r\n};\r\n\r\nexport const getIndiaDay = () => {\r\n  return startOfDay(utcToZonedTime(new Date(), 'Asia/Kolkata'));\r\n};\r\n\r\nexport const formatDate = (unformattedDate) => {\r\n  const day = unformattedDate.slice(0, 2);\r\n  const month = unformattedDate.slice(3, 5);\r\n  const year = unformattedDate.slice(6, 10);\r\n  const time = unformattedDate.slice(11);\r\n  return `${year}-${month}-${day}T${time}+05:30`;\r\n};\r\n\r\nexport const formatDateAbsolute = (unformattedDate) => {\r\n  return format(\r\n    parse(unformattedDate, 'dd/MM/yyyy HH:mm:ss', new Date()),\r\n    'dd MMM, hh:mm b',\r\n    {\r\n      locale: LOCALE_SHORTHANDS[i18n.language],\r\n    }\r\n  );\r\n};\r\n\r\nexport const formatDayMonth = (unformattedDate) => {\r\n  return format(parse(unformattedDate, 'dd/MM/yyyy', new Date()), 'dd MMM', {\r\n    locale: LOCALE_SHORTHANDS[i18n.language],\r\n  });\r\n};\r\n\r\nexport const formatLastUpdated = (unformattedDate) => {\r\n  return formatDistance(new Date(formatDate(unformattedDate)), new Date(), {\r\n    locale: LOCALE_SHORTHANDS[i18n.language],\r\n  });\r\n};\r\n\r\nexport const formatTimeseriesDate = (unformattedDate) => {\r\n  return format(unformattedDate, 'dd MMMM', {\r\n    locale: LOCALE_SHORTHANDS[i18n.language],\r\n  });\r\n};\r\n\r\nexport const formatTimeseriesTickX = (unformattedDate) => {\r\n  return format(unformattedDate, 'd MMM', {\r\n    locale: LOCALE_SHORTHANDS[i18n.language],\r\n  });\r\n};\r\n\r\nconst validateCTS = (data = []) => {\r\n  const dataTypes = [\r\n    'dailyconfirmed',\r\n    'dailydeceased',\r\n    'dailyrecovered',\r\n    'totalconfirmed',\r\n    'totaldeceased',\r\n    'totalrecovered',\r\n  ];\r\n  return data\r\n    .filter((d) => dataTypes.every((dt) => d[dt]) && d.date)\r\n    .filter((d) => dataTypes.every((dt) => Number(d[dt]) >= 0))\r\n    .filter((d) => {\r\n      // Skip data from the current day\r\n      const today = getIndiaDay();\r\n      const date = parse(d.date, 'dd MMMM', new Date(2020, 0, 1));\r\n      return isBefore(date, today);\r\n    });\r\n};\r\n\r\nexport const preprocessTimeseries = (timeseries) => {\r\n  return validateCTS(timeseries).map((stat, index) => ({\r\n    date: parse(stat.date, 'dd MMMM', new Date(2020, 0, 1)),\r\n    totalconfirmed: +stat.totalconfirmed,\r\n    totalrecovered: +stat.totalrecovered,\r\n    totaldeceased: +stat.totaldeceased,\r\n    dailyconfirmed: +stat.dailyconfirmed,\r\n    dailyrecovered: +stat.dailyrecovered,\r\n    dailydeceased: +stat.dailydeceased,\r\n    // Active = Confimed - Recovered - Deceased\r\n    totalactive:\r\n      +stat.totalconfirmed - +stat.totalrecovered - +stat.totaldeceased,\r\n    dailyactive:\r\n      +stat.dailyconfirmed - +stat.dailyrecovered - +stat.dailydeceased,\r\n  }));\r\n};\r\n\r\n/**\r\n * Returns the last `days` entries\r\n * @param {Array<Object>} timeseries\r\n * @param {number} days\r\n *\r\n * @return {Array<Object>}\r\n */\r\nexport function sliceTimeseriesFromEnd(timeseries, days) {\r\n  return timeseries.slice(-days);\r\n}\r\n\r\nexport const formatNumber = (value) => {\r\n  const numberFormatter = new Intl.NumberFormat('en-IN');\r\n  return isNaN(value) ? '-' : numberFormatter.format(value);\r\n};\r\n\r\nexport const parseStateTimeseries = ({states_daily: data}) => {\r\n  const statewiseSeries = Object.keys(STATE_CODES).reduce((a, c) => {\r\n    a[c] = [];\r\n    return a;\r\n  }, {});\r\n\r\n  const today = getIndiaDay();\r\n  for (let i = 0; i < data.length; i += 3) {\r\n    const date = parse(data[i].date, 'dd-MMM-yy', new Date());\r\n    // Skip data from the current day\r\n    if (isBefore(date, today)) {\r\n      Object.entries(statewiseSeries).forEach(([k, v]) => {\r\n        const stateCode = k.toLowerCase();\r\n        const prev = v[v.length - 1] || {};\r\n        // Parser\r\n        const dailyconfirmed = +data[i][stateCode] || 0;\r\n        const dailyrecovered = +data[i + 1][stateCode] || 0;\r\n        const dailydeceased = +data[i + 2][stateCode] || 0;\r\n        const totalconfirmed = +data[i][stateCode] + (prev.totalconfirmed || 0);\r\n        const totalrecovered =\r\n          +data[i + 1][stateCode] + (prev.totalrecovered || 0);\r\n        const totaldeceased =\r\n          +data[i + 2][stateCode] + (prev.totaldeceased || 0);\r\n        // Push\r\n        v.push({\r\n          date: date,\r\n          dailyconfirmed: dailyconfirmed,\r\n          dailyrecovered: dailyrecovered,\r\n          dailydeceased: dailydeceased,\r\n          totalconfirmed: totalconfirmed,\r\n          totalrecovered: totalrecovered,\r\n          totaldeceased: totaldeceased,\r\n          // Active = Confimed - Recovered - Deceased\r\n          totalactive: totalconfirmed - totalrecovered - totaldeceased,\r\n          dailyactive: dailyconfirmed - dailyrecovered - dailydeceased,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  return statewiseSeries;\r\n};\r\n\r\nexport const parseStateTestData = (data) => {\r\n  const reversed = [...data].reverse();\r\n  return Object.keys(STATE_CODES_REVERSE).reduce((ret, state) => {\r\n    const obj = reversed.find(\r\n      (obj) => obj.state === state && obj.totaltested !== ''\r\n    );\r\n    ret[state] = {\r\n      source: obj?.source1 || obj?.source2,\r\n      totaltested: obj?.totaltested,\r\n      updatedon: obj?.updatedon,\r\n    };\r\n    return ret;\r\n  }, {});\r\n};\r\n\r\nexport const parseStateTestTimeseries = (data) => {\r\n  const testTimseries = Object.keys(STATE_CODES).reduce((ret, sc) => {\r\n    ret[sc] = [];\r\n    return ret;\r\n  }, {});\r\n\r\n  const today = getIndiaDay();\r\n  data.forEach((d) => {\r\n    const date = parse(d.updatedon, 'dd/MM/yyyy', new Date());\r\n    const totaltested = +d.totaltested;\r\n    const stateCode = STATE_CODES_REVERSE[d.state];\r\n    if (stateCode && isBefore(date, today) && totaltested) {\r\n      const stateTs = testTimseries[stateCode];\r\n      let dailytested;\r\n      if (stateTs.length) {\r\n        const prev = stateTs[stateTs.length - 1];\r\n        dailytested =\r\n          differenceInDays(date, prev.date) === 1\r\n            ? totaltested - prev.totaltested\r\n            : NaN;\r\n      } else dailytested = NaN;\r\n      stateTs.push({\r\n        date: date,\r\n        totaltested: totaltested,\r\n        dailytested: dailytested,\r\n      });\r\n    }\r\n  });\r\n  return testTimseries;\r\n};\r\n\r\nexport const parseTotalTestTimeseries = (data) => {\r\n  const testTimseries = [];\r\n  const today = getIndiaDay();\r\n  data.forEach((d) => {\r\n    const date = parse(\r\n      d.updatetimestamp.split(' ')[0],\r\n      'dd/MM/yyyy',\r\n      new Date()\r\n    );\r\n    const totaltested = +d.totalsamplestested;\r\n    if (isBefore(date, today) && totaltested) {\r\n      let dailytested;\r\n      if (testTimseries.length) {\r\n        const prev = testTimseries[testTimseries.length - 1];\r\n        if (isSameDay(date, prev.date)) {\r\n          prev.dailytested += totaltested - prev.totaltested;\r\n          prev.totaltested = totaltested;\r\n        } else {\r\n          if (differenceInDays(date, prev.date) === 1)\r\n            dailytested = totaltested - prev.totaltested;\r\n          else dailytested = NaN;\r\n        }\r\n      } else dailytested = NaN;\r\n      testTimseries.push({\r\n        date: date,\r\n        totaltested: totaltested,\r\n        dailytested: dailytested,\r\n      });\r\n    }\r\n  });\r\n  return testTimseries;\r\n};\r\n\r\nexport const mergeTimeseries = (ts1, ts2) => {\r\n  const tsRet = Object.assign({}, ts1);\r\n  for (const state in ts1) {\r\n    if (ts1.hasOwnProperty(state)) {\r\n      tsRet[state] = ts1[state].map((d1) => {\r\n        const testData = ts2[state].find((d2) => isSameDay(d1.date, d2.date));\r\n        return {\r\n          totaltested: testData?.totaltested,\r\n          dailytested: testData?.dailytested,\r\n          ...d1,\r\n        };\r\n      });\r\n    }\r\n  }\r\n  return tsRet;\r\n};\r\n\r\nexport const capitalize = (s) => {\r\n  if (typeof s !== 'string') return '';\r\n  return s.charAt(0).toUpperCase() + s.slice(1);\r\n};\r\n\r\nexport const capitalizeAll = (s) => {\r\n  if (typeof s !== 'string') return '';\r\n  const str = s.toLowerCase().split(' ');\r\n  for (let i = 0; i < str.length; i++) {\r\n    str[i] = capitalize(str[i]);\r\n  }\r\n  return str.join(' ');\r\n};\r\n\r\nexport const abbreviate = (s) => {\r\n  return s.slice(0, 1) + s.slice(1).replace(/[aeiou]/gi, '');\r\n};\r\n\r\nexport const parseDistrictZones = (data, state) => {\r\n  const zones = data.reduce((ret, d) => {\r\n    ret[d.state] = ret[d.state] || {};\r\n    ret[d.state][d.district] = d;\r\n    return ret;\r\n  }, {});\r\n  Object.values(STATE_CODES).forEach((state) => {\r\n    if (!zones[state]) zones[state] = {};\r\n  });\r\n  return state ? {[state]: zones[state]} : zones;\r\n};\r\n\r\nexport const toTitleCase = (str) => {\r\n  return str.replace(/\\w\\S*/g, function (txt) {\r\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}