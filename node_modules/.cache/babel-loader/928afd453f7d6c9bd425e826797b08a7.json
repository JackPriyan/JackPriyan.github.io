{"ast":null,"code":"import deepEqual from 'fast-deep-equal';\nimport isDocumentVisible from './libs/is-document-visible';\nimport isOnline from './libs/is-online';\nimport Cache from './cache'; // cache\n\nvar cache = new Cache(); // state managers\n\nvar CONCURRENT_PROMISES = {};\nvar CONCURRENT_PROMISES_TS = {};\nvar FOCUS_REVALIDATORS = {};\nvar CACHE_REVALIDATORS = {};\nvar MUTATION_TS = {}; // error retry\n\nfunction onErrorRetry(_, __, config, revalidate, opts) {\n  if (!isDocumentVisible()) {\n    // if it's hidden, stop\n    // it will auto revalidate when focus\n    return;\n  }\n\n  if (config.errorRetryCount && opts.retryCount > config.errorRetryCount) {\n    return;\n  } // exponential backoff\n\n\n  var count = Math.min(opts.retryCount || 0, 8);\n  var timeout = ~~((Math.random() + 0.5) * (1 << count)) * config.errorRetryInterval;\n  setTimeout(revalidate, timeout, opts);\n} // client side: need to adjust the config\n// based on the browser status\n// slow connection (<= 70Kbps)\n\n\nvar slowConnection = typeof window !== 'undefined' && navigator['connection'] && ['slow-2g', '2g'].indexOf(navigator['connection'].effectiveType) !== -1; // config\n\nvar defaultConfig = {\n  // events\n  onLoadingSlow: function onLoadingSlow() {},\n  onSuccess: function onSuccess() {},\n  onError: function onError() {},\n  onErrorRetry: onErrorRetry,\n  errorRetryInterval: (slowConnection ? 10 : 5) * 1000,\n  focusThrottleInterval: 5 * 1000,\n  dedupingInterval: 2 * 1000,\n  loadingTimeout: (slowConnection ? 5 : 3) * 1000,\n  refreshInterval: 0,\n  revalidateOnFocus: true,\n  revalidateOnReconnect: true,\n  refreshWhenHidden: false,\n  refreshWhenOffline: false,\n  shouldRetryOnError: true,\n  suspense: false,\n  compare: deepEqual\n}; // Focus revalidate\n\nvar eventsBinded = false;\n\nif (typeof window !== 'undefined' && window.addEventListener && !eventsBinded) {\n  var revalidate = function revalidate() {\n    if (!isDocumentVisible() || !isOnline()) return;\n\n    for (var key in FOCUS_REVALIDATORS) {\n      if (FOCUS_REVALIDATORS[key][0]) FOCUS_REVALIDATORS[key][0]();\n    }\n  };\n\n  window.addEventListener('visibilitychange', revalidate, false);\n  window.addEventListener('focus', revalidate, false); // only bind the events once\n\n  eventsBinded = true;\n}\n\nexport { CONCURRENT_PROMISES, CONCURRENT_PROMISES_TS, FOCUS_REVALIDATORS, CACHE_REVALIDATORS, MUTATION_TS, cache };\nexport default defaultConfig;","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/node_modules/swr/esm/config.js"],"names":["deepEqual","isDocumentVisible","isOnline","Cache","cache","CONCURRENT_PROMISES","CONCURRENT_PROMISES_TS","FOCUS_REVALIDATORS","CACHE_REVALIDATORS","MUTATION_TS","onErrorRetry","_","__","config","revalidate","opts","errorRetryCount","retryCount","count","Math","min","timeout","random","errorRetryInterval","setTimeout","slowConnection","window","navigator","indexOf","effectiveType","defaultConfig","onLoadingSlow","onSuccess","onError","focusThrottleInterval","dedupingInterval","loadingTimeout","refreshInterval","revalidateOnFocus","revalidateOnReconnect","refreshWhenHidden","refreshWhenOffline","shouldRetryOnError","suspense","compare","eventsBinded","addEventListener","key"],"mappings":"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","sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport isDocumentVisible from './libs/is-document-visible';\nimport isOnline from './libs/is-online';\nimport Cache from './cache';\n// cache\nconst cache = new Cache();\n// state managers\nconst CONCURRENT_PROMISES = {};\nconst CONCURRENT_PROMISES_TS = {};\nconst FOCUS_REVALIDATORS = {};\nconst CACHE_REVALIDATORS = {};\nconst MUTATION_TS = {};\n// error retry\nfunction onErrorRetry(_, __, config, revalidate, opts) {\n    if (!isDocumentVisible()) {\n        // if it's hidden, stop\n        // it will auto revalidate when focus\n        return;\n    }\n    if (config.errorRetryCount && opts.retryCount > config.errorRetryCount) {\n        return;\n    }\n    // exponential backoff\n    const count = Math.min(opts.retryCount || 0, 8);\n    const timeout = ~~((Math.random() + 0.5) * (1 << count)) * config.errorRetryInterval;\n    setTimeout(revalidate, timeout, opts);\n}\n// client side: need to adjust the config\n// based on the browser status\n// slow connection (<= 70Kbps)\nconst slowConnection = typeof window !== 'undefined' &&\n    navigator['connection'] &&\n    ['slow-2g', '2g'].indexOf(navigator['connection'].effectiveType) !== -1;\n// config\nconst defaultConfig = {\n    // events\n    onLoadingSlow: () => { },\n    onSuccess: () => { },\n    onError: () => { },\n    onErrorRetry,\n    errorRetryInterval: (slowConnection ? 10 : 5) * 1000,\n    focusThrottleInterval: 5 * 1000,\n    dedupingInterval: 2 * 1000,\n    loadingTimeout: (slowConnection ? 5 : 3) * 1000,\n    refreshInterval: 0,\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n    refreshWhenHidden: false,\n    refreshWhenOffline: false,\n    shouldRetryOnError: true,\n    suspense: false,\n    compare: deepEqual\n};\n// Focus revalidate\nlet eventsBinded = false;\nif (typeof window !== 'undefined' && window.addEventListener && !eventsBinded) {\n    const revalidate = () => {\n        if (!isDocumentVisible() || !isOnline())\n            return;\n        for (let key in FOCUS_REVALIDATORS) {\n            if (FOCUS_REVALIDATORS[key][0])\n                FOCUS_REVALIDATORS[key][0]();\n        }\n    };\n    window.addEventListener('visibilitychange', revalidate, false);\n    window.addEventListener('focus', revalidate, false);\n    // only bind the events once\n    eventsBinded = true;\n}\nexport { CONCURRENT_PROMISES, CONCURRENT_PROMISES_TS, FOCUS_REVALIDATORS, CACHE_REVALIDATORS, MUTATION_TS, cache };\nexport default defaultConfig;\n"]},"metadata":{},"sourceType":"module"}