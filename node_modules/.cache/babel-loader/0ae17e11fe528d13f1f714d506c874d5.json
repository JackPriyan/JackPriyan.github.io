{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\src\\\\components\\\\mapexplorer.js\";\nimport ChoroplethMap from './choropleth';\nimport { testedToolTip } from './tooltips';\nimport { MAP_META, MAP_STATISTICS, MAP_TYPES, MAP_VIEWS, STATE_CODES_REVERSE, STATE_POPULATIONS } from '../constants';\nimport { formatDate, formatNumber, formatDayMonth, formatLastUpdated } from '../utils/commonfunctions';\nimport { parse } from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Icon from 'react-feather';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.regionHighlighted, currProps.regionHighlighted)) {\n    return false;\n  }\n\n  if (!equal(prevProps.mapOption, currProps.mapOption)) {\n    return false;\n  }\n\n  if (!equal(prevProps.anchor, currProps.anchor)) {\n    return false;\n  }\n\n  return true;\n};\n\nconst getRegionFromState = state => {\n  if (!state) return;\n  const region = { ...state\n  };\n  return region;\n};\n\nconst getRegionFromDistrict = (districtData, name) => {\n  if (!districtData) return;\n  const region = { ...districtData\n  };\n  return region;\n};\n\nfunction MapExplorer({\n  mapName,\n  states,\n  districts,\n  zones,\n  stateTestData,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  mapOption,\n  setMapOption,\n  isCountryLoaded = true\n}) {\n  var _testObj$totaltested;\n\n  const {\n    t\n  } = useTranslation();\n  const [currentMap, setCurrentMap] = useState({\n    name: mapName,\n    stat: MAP_STATISTICS.TOTAL,\n    view: MAP_META[mapName].mapType === MAP_TYPES.COUNTRY ? MAP_VIEWS.STATES : MAP_VIEWS.DISTRICTS\n  });\n  const currentMapMeta = MAP_META[currentMap.name];\n  const [statistic, currentMapData] = useMemo(() => {\n    let currentMapData = {};\n    let statistic = {};\n\n    if (currentMap.stat === MAP_STATISTICS.ZONE) {\n      const dataTypes = ['Red', 'Orange', 'Green'];\n      statistic = dataTypes.reduce((acc, dtype) => {\n        acc[dtype] = 0;\n        return acc;\n      }, {});\n\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) {\n        currentMapData = Object.keys(zones).reduce((acc1, state) => {\n          acc1[state] = Object.keys(zones[state]).reduce((acc2, district) => {\n            const zone = zones[state][district].zone;\n\n            if (zone) {\n              acc2[district] = zone;\n              statistic[zone] += 1;\n            }\n\n            return acc2;\n          }, {});\n          return acc1;\n        }, {});\n      } else if (currentMapMeta.mapType === MAP_TYPES.STATE) {\n        const state = currentMap.name;\n        currentMapData[state] = Object.keys(zones[state]).reduce((acc, district) => {\n          const zone = zones[state][district].zone;\n\n          if (zone) {\n            acc[district] = zone;\n            statistic[zone] += 1;\n          }\n\n          return acc;\n        }, {});\n      }\n    } else {\n      const dataTypes = ['confirmed', 'active', 'recovered', 'deceased'];\n      statistic = dataTypes.reduce((acc, dtype) => {\n        acc[dtype] = {\n          total: 0,\n          max: 0\n        };\n        return acc;\n      }, {});\n\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) {\n        if (currentMap.view === MAP_VIEWS.STATES) {\n          currentMapData = states.reduce((acc, state) => {\n            acc[state.state] = {};\n            dataTypes.forEach(dtype => {\n              let typeCount = parseInt(state[dtype !== 'deceased' ? dtype : 'deaths']) || 0;\n              if (currentMap.stat === MAP_STATISTICS.PER_MILLION) typeCount = 1e6 * typeCount / STATE_POPULATIONS[state.state];\n\n              if (state.state !== 'Total') {\n                statistic[dtype].total += typeCount;\n\n                if (typeCount > statistic[dtype].max) {\n                  statistic[dtype].max = typeCount;\n                }\n              }\n\n              acc[state.state][dtype] = typeCount;\n            });\n            return acc;\n          }, {});\n        } else {\n          currentMapData = Object.keys(districts).reduce((acc1, state) => {\n            const districtWiseData = (districts[state] || {\n              districtData: {}\n            }).districtData;\n            acc1[state] = Object.keys(districtWiseData).reduce((acc2, district) => {\n              acc2[district] = {};\n              dataTypes.forEach(dtype => {\n                const typeCount = parseInt(districtWiseData[district][dtype]);\n                statistic[dtype].total += typeCount;\n\n                if (typeCount > statistic[dtype].max) {\n                  statistic[dtype].max = typeCount;\n                }\n\n                acc2[district][dtype] = typeCount;\n              });\n              return acc2;\n            }, {});\n            return acc1;\n          }, {});\n        }\n      } else if (currentMapMeta.mapType === MAP_TYPES.STATE) {\n        const districtWiseData = (districts[currentMap.name] || {\n          districtData: {}\n        }).districtData;\n        currentMapData[currentMap.name] = Object.keys(districtWiseData).reduce((acc, district) => {\n          acc[district] = {};\n          dataTypes.forEach(dtype => {\n            const typeCount = parseInt(districtWiseData[district][dtype]);\n            statistic[dtype].total += typeCount;\n\n            if (typeCount > statistic[dtype].max) {\n              statistic[dtype].max = typeCount;\n            }\n\n            acc[district][dtype] = typeCount;\n          });\n          return acc;\n        }, {});\n        currentMapData[currentMap.name].Total = states.find(state => currentMap.name === state.state);\n      }\n    }\n\n    return [statistic, currentMapData];\n  }, [currentMap, currentMapMeta.mapType, districts, zones, states]);\n  const [hoveredRegion, panelRegion] = useMemo(() => {\n    if (!regionHighlighted.district) {\n      const state = getRegionFromState(states.find(state => regionHighlighted.state === state.state));\n      return [state, state];\n    } else {\n      const stateDistrictObj = districts[regionHighlighted.state] || {\n        districtData: {}\n      };\n      const districtData = stateDistrictObj.districtData[regionHighlighted.district] || {\n        confirmed: 0,\n        active: 0,\n        recovered: 0,\n        deaths: 0\n      };\n      const district = getRegionFromDistrict(districtData, regionHighlighted.district);\n      let state = getRegionFromState(states.find(state => state.state === regionHighlighted.state));\n      district.district = regionHighlighted.district;\n      district.state = state.state;\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) state = states.find(state => state.state === 'Total');\n      return [district, state];\n    }\n  }, [states, districts, currentMapMeta.mapType, regionHighlighted.state, regionHighlighted.district]);\n  useEffect(() => {\n    if (regionHighlighted.district) {\n      if (currentMap.name !== regionHighlighted.state && !(currentMapMeta.mapType === MAP_TYPES.COUNTRY && currentMap.view === MAP_VIEWS.DISTRICTS)) {\n        const state = regionHighlighted.state;\n        const newMapMeta = MAP_META[state];\n\n        if (!newMapMeta) {\n          return;\n        }\n\n        setCurrentMap({\n          name: state,\n          view: MAP_VIEWS.DISTRICTS,\n          stat: currentMap.stat === MAP_STATISTICS.PER_MILLION ? MAP_STATISTICS.TOTAL : currentMap.stat\n        });\n      }\n    } else if (isCountryLoaded && currentMapMeta.mapType === MAP_TYPES.STATE) {\n      setCurrentMap({\n        name: 'India',\n        view: currentMap.stat === MAP_STATISTICS.ZONE ? MAP_VIEWS.DISTRICTS : MAP_VIEWS.STATES,\n        stat: currentMap.stat\n      });\n    }\n  }, [isCountryLoaded, regionHighlighted.state, regionHighlighted.district, currentMap, currentMapMeta.mapType]);\n  const switchMapToState = useCallback(state => {\n    const newMapMeta = MAP_META[state];\n\n    if (!newMapMeta) {\n      return;\n    }\n\n    if (newMapMeta.mapType === MAP_TYPES.STATE) {\n      const {\n        districtData\n      } = districts[state] || {\n        districtData: {}\n      };\n      const topDistrict = Object.keys(districtData).filter(state => state !== 'Unknown').sort((a, b) => {\n        return districtData[b].confirmed - districtData[a].confirmed;\n      })[0];\n      ReactDOM.unstable_batchedUpdates(() => {\n        setRegionHighlighted({\n          district: topDistrict,\n          state: state\n        });\n        setCurrentMap({\n          name: state,\n          view: MAP_VIEWS.DISTRICTS,\n          stat: currentMap.stat === MAP_STATISTICS.PER_MILLION ? MAP_STATISTICS.TOTAL : currentMap.stat\n        });\n      });\n    } else {\n      ReactDOM.unstable_batchedUpdates(() => {\n        setCurrentMap({\n          name: 'India',\n          view: currentMap.stat === MAP_STATISTICS.ZONE ? MAP_VIEWS.DISTRICTS : MAP_VIEWS.STATES,\n          stat: currentMap.stat\n        });\n        setRegionHighlighted({\n          state: 'Total'\n        });\n      });\n    }\n  }, [currentMap.stat, districts, setRegionHighlighted]);\n  const testObj = stateTestData[panelRegion.state];\n  let hoveredRegionCount;\n  let hoveredRegionZone;\n\n  if (currentMap.stat !== MAP_STATISTICS.ZONE) {\n    const data = hoveredRegion.district && currentMapData[hoveredRegion.state] ? currentMapData[hoveredRegion.state][hoveredRegion.district] : hoveredRegion.state !== currentMap.name ? currentMapData[hoveredRegion.state] : currentMapData[hoveredRegion.state].Total;\n    hoveredRegionCount = data ? currentMap.stat === MAP_STATISTICS.PER_MILLION ? Number(parseFloat(data[mapOption]).toFixed(2)) : data[mapOption] : 0;\n  } else {\n    hoveredRegionZone = zones[hoveredRegion.state] && zones[hoveredRegion.state][hoveredRegion.district] ? zones[hoveredRegion.state][hoveredRegion.district].zone : '';\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `MapExplorer fadeInUp ${anchor === 'mapexplorer' ? 'stickied' : ''}`,\n    style: {\n      animationDelay: '1.5s',\n      display: anchor === 'timeseries' ? 'none' : ''\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 5\n    }\n  }, window.innerWidth > 769 && /*#__PURE__*/React.createElement(\"div\", {\n    className: `anchor ${anchor === 'mapexplorer' ? 'stickied' : ''}`,\n    onClick: () => {\n      setAnchor(anchor === 'mapexplorer' ? null : 'mapexplorer');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon.Anchor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }\n  }, t(currentMap.name), \" \", t('Map')), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }\n  }, t('{{action}} over a {{mapType}} for more details', {\n    action: t(window.innerWidth <= 769 ? 'Tap' : 'Hover'),\n    mapType: t(currentMapMeta.mapType === MAP_TYPES.COUNTRY ? 'state/UT' : 'District')\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `stats fadeInUp ${mapOption === 'confirmed' ? 'focused' : ''}`,\n    style: {\n      animationDelay: '2s'\n    },\n    onClick: () => setMapOption('confirmed'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 11\n    }\n  }, window.innerWidth <= 769 ? t('Cnfmd') : t('Confirmed')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 13\n    }\n  }, formatNumber(panelRegion.confirmed)), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }\n  }, `+${formatNumber(panelRegion.deltaconfirmed)}`))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `stats is-blue fadeInUp ${mapOption === 'active' ? 'focused' : ''}`,\n    style: {\n      animationDelay: '2.1s'\n    },\n    onClick: () => setMapOption('active'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 11\n    }\n  }, window.innerWidth <= 769 ? t('Actv') : t('Active')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 13\n    }\n  }, formatNumber(panelRegion.active)), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }\n  }, ` `))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `stats is-green fadeInUp ${mapOption === 'recovered' ? 'focused' : ''}`,\n    style: {\n      animationDelay: '2.2s'\n    },\n    onClick: () => setMapOption('recovered'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 11\n    }\n  }, window.innerWidth <= 769 ? t('Rcvrd') : t('Recovered')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }\n  }, formatNumber(panelRegion.recovered)), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 13\n    }\n  }, `+${formatNumber(panelRegion.deltarecovered)}`))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `stats is-gray fadeInUp ${mapOption === 'deceased' ? 'focused' : ''}`,\n    style: {\n      animationDelay: '2.3s'\n    },\n    onClick: () => setMapOption('deceased'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 11\n    }\n  }, window.innerWidth <= 769 ? t('Dcsd') : t('Deceased')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 13\n    }\n  }, formatNumber(panelRegion.deaths)), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 13\n    }\n  }, `+${formatNumber(panelRegion.deltadeaths)}`))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats is-purple tested fadeInUp\",\n    style: {\n      animationDelay: '2.4s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 11\n    }\n  }, t('Tested')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 13\n    }\n  }, formatNumber(testObj === null || testObj === void 0 ? void 0 : testObj.totaltested))), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"timestamp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 11\n    }\n  }, !isNaN(parse(testObj === null || testObj === void 0 ? void 0 : testObj.updatedon, 'dd/MM/yyyy', new Date())) ? t('As of {{date}}', {\n    date: formatDayMonth(testObj === null || testObj === void 0 ? void 0 : testObj.updatedon)\n  }) : ''), (testObj === null || testObj === void 0 ? void 0 : (_testObj$totaltested = testObj.totaltested) === null || _testObj$totaltested === void 0 ? void 0 : _testObj$totaltested.length) > 1 && /*#__PURE__*/React.createElement(\"a\", {\n    href: testObj.source,\n    target: \"_noblank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon.Link, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 15\n    }\n  })), panelRegion.state === 'Total' ? testedToolTip : '')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"meta fadeInUp\",\n    style: {\n      animationDelay: '2.4s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: `${currentMap.stat !== MAP_STATISTICS.ZONE ? mapOption !== 'confirmed' ? mapOption : '' : hoveredRegionZone}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 9\n    }\n  }, hoveredRegion.district ? t(hoveredRegion.district) + (hoveredRegion.district === 'Unknown' ? ` (${t(hoveredRegion.state)})` : '') : t(hoveredRegion.state)), currentMapMeta.mapType !== MAP_TYPES.STATE && panelRegion.lastupdatedtime && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"last-update\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 15\n    }\n  }, t('Last updated')), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 15\n    }\n  }, isNaN(Date.parse(formatDate(panelRegion.lastupdatedtime))) ? '' : formatLastUpdated(panelRegion.lastupdatedtime) + ' ' + t('ago'))), currentMapMeta.mapType === MAP_TYPES.STATE ? /*#__PURE__*/React.createElement(Link, {\n    to: `state/${STATE_CODES_REVERSE[panelRegion.state]}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button state-page-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"abbr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 15\n    }\n  }, t('Visit state page')), /*#__PURE__*/React.createElement(Icon.ArrowRightCircle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 15\n    }\n  }))) : null, currentMap.stat !== MAP_STATISTICS.ZONE && (currentMapMeta.mapType === MAP_TYPES.STATE || currentMapMeta.mapType === MAP_TYPES.COUNTRY && currentMap.stat !== MAP_STATISTICS.TOTAL) && (currentMap.stat !== MAP_STATISTICS.HOTSPOTS || (hoveredRegion === null || hoveredRegion === void 0 ? void 0 : hoveredRegion.district)) ? /*#__PURE__*/React.createElement(\"h1\", {\n    className: `district ${mapOption !== 'confirmed' ? mapOption : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 11\n    }\n  }, hoveredRegionCount, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 13\n    }\n  }, t(mapOption), ' ', currentMap.stat === MAP_STATISTICS.PER_MILLION ? ` ${t('per million')}` : '')) : null, currentMapMeta.mapType === MAP_TYPES.STATE ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button back-button\",\n    onClick: () => switchMapToState('India'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 11\n    }\n  }, t('Back')) : null, currentMapMeta.mapType === MAP_TYPES.STATE && currentMapData.Unknown && currentMapData.Unknown[mapOption] > 0 ? /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"unknown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 11\n    }\n  }, t('Districts unknown for'), \" \", currentMapData.Unknown[mapOption], ' ', t('people')) : null), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 7\n    }\n  }, mapOption && /*#__PURE__*/React.createElement(ChoroplethMap, {\n    statistic: statistic,\n    currentMap: currentMap,\n    mapData: currentMapData,\n    regionHighlighted: regionHighlighted,\n    setRegionHighlighted: setRegionHighlighted,\n    changeMap: switchMapToState,\n    mapOption: mapOption,\n    isCountryLoaded: isCountryLoaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tabs-map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `tab ${currentMap.stat === MAP_STATISTICS.TOTAL ? 'focused' : ''}`,\n    onClick: () => {\n      setCurrentMap({\n        name: currentMap.name,\n        view: currentMapMeta.mapType === MAP_TYPES.COUNTRY ? MAP_VIEWS.STATES : MAP_VIEWS.DISTRICTS,\n        stat: MAP_STATISTICS.TOTAL\n      });\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) setRegionHighlighted({\n        state: regionHighlighted.state\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 11\n    }\n  }, t('Total Cases'))), isCountryLoaded && /*#__PURE__*/React.createElement(\"div\", {\n    className: `tab ${currentMap.stat === MAP_STATISTICS.PER_MILLION ? 'focused' : ''}`,\n    onClick: () => {\n      if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n      setCurrentMap({\n        name: currentMap.name,\n        view: MAP_VIEWS.STATES,\n        stat: MAP_STATISTICS.PER_MILLION\n      });\n      setRegionHighlighted({\n        state: regionHighlighted.state\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 13\n    }\n  }, t('Cases per million'), /*#__PURE__*/React.createElement(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 15\n    }\n  }, \"\\u2020\"))), isCountryLoaded && /*#__PURE__*/React.createElement(\"div\", {\n    className: `tab ${currentMap.stat === MAP_STATISTICS.HOTSPOTS ? 'focused' : ''}`,\n    onClick: () => {\n      if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n      setCurrentMap({\n        name: currentMap.name,\n        view: MAP_VIEWS.DISTRICTS,\n        stat: MAP_STATISTICS.HOTSPOTS\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 13\n    }\n  }, t('Hotspots'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `tab ${currentMap.stat === MAP_STATISTICS.ZONE ? 'focused' : ''}`,\n    onClick: () => {\n      setCurrentMap({\n        name: currentMap.name,\n        view: MAP_VIEWS.DISTRICTS,\n        stat: MAP_STATISTICS.ZONE\n      });\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) setRegionHighlighted({\n        state: 'Total'\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 11\n    }\n  }, t('Zones')))), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"footnote table-fineprint\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 7\n    }\n  }, \"\\u2020 \", t('Based on 2019 population projection by NCP') + ' (', /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\",\n    target: \"_noblank\",\n    style: {\n      color: '#6c757d'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 9\n    }\n  }, t('source')), \")\"));\n}\n\nexport default React.memo(MapExplorer, isEqual);","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/components/mapexplorer.js"],"names":["ChoroplethMap","testedToolTip","MAP_META","MAP_STATISTICS","MAP_TYPES","MAP_VIEWS","STATE_CODES_REVERSE","STATE_POPULATIONS","formatDate","formatNumber","formatDayMonth","formatLastUpdated","parse","equal","React","useState","useEffect","useMemo","useCallback","ReactDOM","Icon","useTranslation","Link","isEqual","prevProps","currProps","regionHighlighted","mapOption","anchor","getRegionFromState","state","region","getRegionFromDistrict","districtData","name","MapExplorer","mapName","states","districts","zones","stateTestData","setRegionHighlighted","setAnchor","setMapOption","isCountryLoaded","t","currentMap","setCurrentMap","stat","TOTAL","view","mapType","COUNTRY","STATES","DISTRICTS","currentMapMeta","statistic","currentMapData","ZONE","dataTypes","reduce","acc","dtype","Object","keys","acc1","acc2","district","zone","STATE","total","max","forEach","typeCount","parseInt","PER_MILLION","districtWiseData","Total","find","hoveredRegion","panelRegion","stateDistrictObj","confirmed","active","recovered","deaths","newMapMeta","switchMapToState","topDistrict","filter","sort","a","b","unstable_batchedUpdates","testObj","hoveredRegionCount","hoveredRegionZone","data","Number","parseFloat","toFixed","animationDelay","display","window","innerWidth","action","deltaconfirmed","deltarecovered","deltadeaths","totaltested","isNaN","updatedon","Date","date","length","source","lastupdatedtime","HOTSPOTS","Unknown","color","memo"],"mappings":"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","sourcesContent":["import ChoroplethMap from './choropleth';\r\nimport {testedToolTip} from './tooltips';\r\n\r\nimport {\r\n  MAP_META,\r\n  MAP_STATISTICS,\r\n  MAP_TYPES,\r\n  MAP_VIEWS,\r\n  STATE_CODES_REVERSE,\r\n  STATE_POPULATIONS,\r\n} from '../constants';\r\nimport {\r\n  formatDate,\r\n  formatNumber,\r\n  formatDayMonth,\r\n  formatLastUpdated,\r\n} from '../utils/commonfunctions';\r\n\r\nimport {parse} from 'date-fns';\r\nimport equal from 'fast-deep-equal';\r\nimport React, {useState, useEffect, useMemo, useCallback} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Icon from 'react-feather';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst isEqual = (prevProps, currProps) => {\r\n  if (!equal(prevProps.regionHighlighted, currProps.regionHighlighted)) {\r\n    return false;\r\n  }\r\n  if (!equal(prevProps.mapOption, currProps.mapOption)) {\r\n    return false;\r\n  }\r\n  if (!equal(prevProps.anchor, currProps.anchor)) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst getRegionFromState = (state) => {\r\n  if (!state) return;\r\n  const region = {...state};\r\n  return region;\r\n};\r\n\r\nconst getRegionFromDistrict = (districtData, name) => {\r\n  if (!districtData) return;\r\n  const region = {...districtData};\r\n  return region;\r\n};\r\n\r\nfunction MapExplorer({\r\n  mapName,\r\n  states,\r\n  districts,\r\n  zones,\r\n  stateTestData,\r\n  regionHighlighted,\r\n  setRegionHighlighted,\r\n  anchor,\r\n  setAnchor,\r\n  mapOption,\r\n  setMapOption,\r\n  isCountryLoaded = true,\r\n}) {\r\n  const {t} = useTranslation();\r\n  const [currentMap, setCurrentMap] = useState({\r\n    name: mapName,\r\n    stat: MAP_STATISTICS.TOTAL,\r\n    view:\r\n      MAP_META[mapName].mapType === MAP_TYPES.COUNTRY\r\n        ? MAP_VIEWS.STATES\r\n        : MAP_VIEWS.DISTRICTS,\r\n  });\r\n  const currentMapMeta = MAP_META[currentMap.name];\r\n\r\n  const [statistic, currentMapData] = useMemo(() => {\r\n    let currentMapData = {};\r\n    let statistic = {};\r\n    if (currentMap.stat === MAP_STATISTICS.ZONE) {\r\n      const dataTypes = ['Red', 'Orange', 'Green'];\r\n      statistic = dataTypes.reduce((acc, dtype) => {\r\n        acc[dtype] = 0;\r\n        return acc;\r\n      }, {});\r\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) {\r\n        currentMapData = Object.keys(zones).reduce((acc1, state) => {\r\n          acc1[state] = Object.keys(zones[state]).reduce((acc2, district) => {\r\n            const zone = zones[state][district].zone;\r\n            if (zone) {\r\n              acc2[district] = zone;\r\n              statistic[zone] += 1;\r\n            }\r\n            return acc2;\r\n          }, {});\r\n          return acc1;\r\n        }, {});\r\n      } else if (currentMapMeta.mapType === MAP_TYPES.STATE) {\r\n        const state = currentMap.name;\r\n        currentMapData[state] = Object.keys(zones[state]).reduce(\r\n          (acc, district) => {\r\n            const zone = zones[state][district].zone;\r\n            if (zone) {\r\n              acc[district] = zone;\r\n              statistic[zone] += 1;\r\n            }\r\n            return acc;\r\n          },\r\n          {}\r\n        );\r\n      }\r\n    } else {\r\n      const dataTypes = ['confirmed', 'active', 'recovered', 'deceased'];\r\n      statistic = dataTypes.reduce((acc, dtype) => {\r\n        acc[dtype] = {total: 0, max: 0};\r\n        return acc;\r\n      }, {});\r\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) {\r\n        if (currentMap.view === MAP_VIEWS.STATES) {\r\n          currentMapData = states.reduce((acc, state) => {\r\n            acc[state.state] = {};\r\n            dataTypes.forEach((dtype) => {\r\n              let typeCount =\r\n                parseInt(state[dtype !== 'deceased' ? dtype : 'deaths']) || 0;\r\n              if (currentMap.stat === MAP_STATISTICS.PER_MILLION)\r\n                typeCount = (1e6 * typeCount) / STATE_POPULATIONS[state.state];\r\n              if (state.state !== 'Total') {\r\n                statistic[dtype].total += typeCount;\r\n                if (typeCount > statistic[dtype].max) {\r\n                  statistic[dtype].max = typeCount;\r\n                }\r\n              }\r\n              acc[state.state][dtype] = typeCount;\r\n            });\r\n            return acc;\r\n          }, {});\r\n        } else {\r\n          currentMapData = Object.keys(districts).reduce((acc1, state) => {\r\n            const districtWiseData = (districts[state] || {districtData: {}})\r\n              .districtData;\r\n            acc1[state] = Object.keys(districtWiseData).reduce(\r\n              (acc2, district) => {\r\n                acc2[district] = {};\r\n                dataTypes.forEach((dtype) => {\r\n                  const typeCount = parseInt(districtWiseData[district][dtype]);\r\n                  statistic[dtype].total += typeCount;\r\n                  if (typeCount > statistic[dtype].max) {\r\n                    statistic[dtype].max = typeCount;\r\n                  }\r\n                  acc2[district][dtype] = typeCount;\r\n                });\r\n                return acc2;\r\n              },\r\n              {}\r\n            );\r\n            return acc1;\r\n          }, {});\r\n        }\r\n      } else if (currentMapMeta.mapType === MAP_TYPES.STATE) {\r\n        const districtWiseData = (\r\n          districts[currentMap.name] || {districtData: {}}\r\n        ).districtData;\r\n        currentMapData[currentMap.name] = Object.keys(districtWiseData).reduce(\r\n          (acc, district) => {\r\n            acc[district] = {};\r\n            dataTypes.forEach((dtype) => {\r\n              const typeCount = parseInt(districtWiseData[district][dtype]);\r\n              statistic[dtype].total += typeCount;\r\n              if (typeCount > statistic[dtype].max) {\r\n                statistic[dtype].max = typeCount;\r\n              }\r\n              acc[district][dtype] = typeCount;\r\n            });\r\n            return acc;\r\n          },\r\n          {}\r\n        );\r\n        currentMapData[currentMap.name].Total = states.find(\r\n          (state) => currentMap.name === state.state\r\n        );\r\n      }\r\n    }\r\n    return [statistic, currentMapData];\r\n  }, [currentMap, currentMapMeta.mapType, districts, zones, states]);\r\n\r\n  const [hoveredRegion, panelRegion] = useMemo(() => {\r\n    if (!regionHighlighted.district) {\r\n      const state = getRegionFromState(\r\n        states.find((state) => regionHighlighted.state === state.state)\r\n      );\r\n      return [state, state];\r\n    } else {\r\n      const stateDistrictObj = districts[regionHighlighted.state] || {\r\n        districtData: {},\r\n      };\r\n      const districtData = stateDistrictObj.districtData[\r\n        regionHighlighted.district\r\n      ] || {\r\n        confirmed: 0,\r\n        active: 0,\r\n        recovered: 0,\r\n        deaths: 0,\r\n      };\r\n      const district = getRegionFromDistrict(\r\n        districtData,\r\n        regionHighlighted.district\r\n      );\r\n      let state = getRegionFromState(\r\n        states.find((state) => state.state === regionHighlighted.state)\r\n      );\r\n      district.district = regionHighlighted.district;\r\n      district.state = state.state;\r\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\r\n        state = states.find((state) => state.state === 'Total');\r\n      return [district, state];\r\n    }\r\n  }, [\r\n    states,\r\n    districts,\r\n    currentMapMeta.mapType,\r\n    regionHighlighted.state,\r\n    regionHighlighted.district,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (regionHighlighted.district) {\r\n      if (\r\n        currentMap.name !== regionHighlighted.state &&\r\n        !(\r\n          currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\r\n          currentMap.view === MAP_VIEWS.DISTRICTS\r\n        )\r\n      ) {\r\n        const state = regionHighlighted.state;\r\n        const newMapMeta = MAP_META[state];\r\n        if (!newMapMeta) {\r\n          return;\r\n        }\r\n        setCurrentMap({\r\n          name: state,\r\n          view: MAP_VIEWS.DISTRICTS,\r\n          stat:\r\n            currentMap.stat === MAP_STATISTICS.PER_MILLION\r\n              ? MAP_STATISTICS.TOTAL\r\n              : currentMap.stat,\r\n        });\r\n      }\r\n    } else if (isCountryLoaded && currentMapMeta.mapType === MAP_TYPES.STATE) {\r\n      setCurrentMap({\r\n        name: 'India',\r\n        view:\r\n          currentMap.stat === MAP_STATISTICS.ZONE\r\n            ? MAP_VIEWS.DISTRICTS\r\n            : MAP_VIEWS.STATES,\r\n        stat: currentMap.stat,\r\n      });\r\n    }\r\n  }, [\r\n    isCountryLoaded,\r\n    regionHighlighted.state,\r\n    regionHighlighted.district,\r\n    currentMap,\r\n    currentMapMeta.mapType,\r\n  ]);\r\n\r\n  const switchMapToState = useCallback(\r\n    (state) => {\r\n      const newMapMeta = MAP_META[state];\r\n      if (!newMapMeta) {\r\n        return;\r\n      }\r\n      if (newMapMeta.mapType === MAP_TYPES.STATE) {\r\n        const {districtData} = districts[state] || {\r\n          districtData: {},\r\n        };\r\n        const topDistrict = Object.keys(districtData)\r\n          .filter((state) => state !== 'Unknown')\r\n          .sort((a, b) => {\r\n            return districtData[b].confirmed - districtData[a].confirmed;\r\n          })[0];\r\n        ReactDOM.unstable_batchedUpdates(() => {\r\n          setRegionHighlighted({\r\n            district: topDistrict,\r\n            state: state,\r\n          });\r\n          setCurrentMap({\r\n            name: state,\r\n            view: MAP_VIEWS.DISTRICTS,\r\n            stat:\r\n              currentMap.stat === MAP_STATISTICS.PER_MILLION\r\n                ? MAP_STATISTICS.TOTAL\r\n                : currentMap.stat,\r\n          });\r\n        });\r\n      } else {\r\n        ReactDOM.unstable_batchedUpdates(() => {\r\n          setCurrentMap({\r\n            name: 'India',\r\n            view:\r\n              currentMap.stat === MAP_STATISTICS.ZONE\r\n                ? MAP_VIEWS.DISTRICTS\r\n                : MAP_VIEWS.STATES,\r\n            stat: currentMap.stat,\r\n          });\r\n          setRegionHighlighted({\r\n            state: 'Total',\r\n          });\r\n        });\r\n      }\r\n    },\r\n    [currentMap.stat, districts, setRegionHighlighted]\r\n  );\r\n\r\n  const testObj = stateTestData[panelRegion.state];\r\n\r\n  let hoveredRegionCount;\r\n  let hoveredRegionZone;\r\n  if (currentMap.stat !== MAP_STATISTICS.ZONE) {\r\n    const data =\r\n      hoveredRegion.district && currentMapData[hoveredRegion.state]\r\n        ? currentMapData[hoveredRegion.state][hoveredRegion.district]\r\n        : hoveredRegion.state !== currentMap.name\r\n        ? currentMapData[hoveredRegion.state]\r\n        : currentMapData[hoveredRegion.state].Total;\r\n    hoveredRegionCount = data\r\n      ? currentMap.stat === MAP_STATISTICS.PER_MILLION\r\n        ? Number(parseFloat(data[mapOption]).toFixed(2))\r\n        : data[mapOption]\r\n      : 0;\r\n  } else {\r\n    hoveredRegionZone =\r\n      zones[hoveredRegion.state] &&\r\n      zones[hoveredRegion.state][hoveredRegion.district]\r\n        ? zones[hoveredRegion.state][hoveredRegion.district].zone\r\n        : '';\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`MapExplorer fadeInUp ${\r\n        anchor === 'mapexplorer' ? 'stickied' : ''\r\n      }`}\r\n      style={{\r\n        animationDelay: '1.5s',\r\n        display: anchor === 'timeseries' ? 'none' : '',\r\n      }}\r\n    >\r\n      {window.innerWidth > 769 && (\r\n        <div\r\n          className={`anchor ${anchor === 'mapexplorer' ? 'stickied' : ''}`}\r\n          onClick={() => {\r\n            setAnchor(anchor === 'mapexplorer' ? null : 'mapexplorer');\r\n          }}\r\n        >\r\n          <Icon.Anchor />\r\n        </div>\r\n      )}\r\n      <div className=\"header\">\r\n        <h1>\r\n          {t(currentMap.name)} {t('Map')}\r\n        </h1>\r\n        <h6>\r\n          {t('{{action}} over a {{mapType}} for more details', {\r\n            action: t(window.innerWidth <= 769 ? 'Tap' : 'Hover'),\r\n            mapType: t(\r\n              currentMapMeta.mapType === MAP_TYPES.COUNTRY\r\n                ? 'state/UT'\r\n                : 'District'\r\n            ),\r\n          })}\r\n        </h6>\r\n      </div>\r\n\r\n      <div className=\"map-stats\">\r\n        <div\r\n          className={`stats fadeInUp ${\r\n            mapOption === 'confirmed' ? 'focused' : ''\r\n          }`}\r\n          style={{animationDelay: '2s'}}\r\n          onClick={() => setMapOption('confirmed')}\r\n        >\r\n          <h5>{window.innerWidth <= 769 ? t('Cnfmd') : t('Confirmed')}</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{formatNumber(panelRegion.confirmed)}</h1>\r\n            <h6>{`+${formatNumber(panelRegion.deltaconfirmed)}`}</h6>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={`stats is-blue fadeInUp ${\r\n            mapOption === 'active' ? 'focused' : ''\r\n          }`}\r\n          style={{animationDelay: '2.1s'}}\r\n          onClick={() => setMapOption('active')}\r\n        >\r\n          <h5>{window.innerWidth <= 769 ? t('Actv') : t('Active')}</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{formatNumber(panelRegion.active)}</h1>\r\n            <h6>{` `}</h6>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={`stats is-green fadeInUp ${\r\n            mapOption === 'recovered' ? 'focused' : ''\r\n          }`}\r\n          style={{animationDelay: '2.2s'}}\r\n          onClick={() => setMapOption('recovered')}\r\n        >\r\n          <h5>{window.innerWidth <= 769 ? t('Rcvrd') : t('Recovered')}</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{formatNumber(panelRegion.recovered)}</h1>\r\n            <h6>{`+${formatNumber(panelRegion.deltarecovered)}`}</h6>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={`stats is-gray fadeInUp ${\r\n            mapOption === 'deceased' ? 'focused' : ''\r\n          }`}\r\n          style={{animationDelay: '2.3s'}}\r\n          onClick={() => setMapOption('deceased')}\r\n        >\r\n          <h5>{window.innerWidth <= 769 ? t('Dcsd') : t('Deceased')}</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{formatNumber(panelRegion.deaths)}</h1>\r\n            <h6>{`+${formatNumber(panelRegion.deltadeaths)}`}</h6>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"stats is-purple tested fadeInUp\"\r\n          style={{animationDelay: '2.4s'}}\r\n        >\r\n          <h5>{t('Tested')}</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{formatNumber(testObj?.totaltested)}</h1>\r\n          </div>\r\n          <h6 className=\"timestamp\">\r\n            {!isNaN(parse(testObj?.updatedon, 'dd/MM/yyyy', new Date()))\r\n              ? t('As of {{date}}', {\r\n                  date: formatDayMonth(testObj?.updatedon),\r\n                })\r\n              : ''}\r\n          </h6>\r\n          {testObj?.totaltested?.length > 1 && (\r\n            <a href={testObj.source} target=\"_noblank\">\r\n              <Icon.Link />\r\n            </a>\r\n          )}\r\n          {panelRegion.state === 'Total' ? testedToolTip : ''}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"meta fadeInUp\" style={{animationDelay: '2.4s'}}>\r\n        <h2\r\n          className={`${\r\n            currentMap.stat !== MAP_STATISTICS.ZONE\r\n              ? mapOption !== 'confirmed'\r\n                ? mapOption\r\n                : ''\r\n              : hoveredRegionZone\r\n          }`}\r\n        >\r\n          {hoveredRegion.district\r\n            ? t(hoveredRegion.district) +\r\n              (hoveredRegion.district === 'Unknown'\r\n                ? ` (${t(hoveredRegion.state)})`\r\n                : '')\r\n            : t(hoveredRegion.state)}\r\n        </h2>\r\n\r\n        {currentMapMeta.mapType !== MAP_TYPES.STATE &&\r\n          panelRegion.lastupdatedtime && (\r\n            <div className=\"last-update\">\r\n              <h6>{t('Last updated')}</h6>\r\n              <h3>\r\n                {isNaN(Date.parse(formatDate(panelRegion.lastupdatedtime)))\r\n                  ? ''\r\n                  : formatLastUpdated(panelRegion.lastupdatedtime) +\r\n                    ' ' +\r\n                    t('ago')}\r\n              </h3>\r\n            </div>\r\n          )}\r\n\r\n        {currentMapMeta.mapType === MAP_TYPES.STATE ? (\r\n          <Link to={`state/${STATE_CODES_REVERSE[panelRegion.state]}`}>\r\n            <div className=\"button state-page-button\">\r\n              <abbr>{t('Visit state page')}</abbr>\r\n              <Icon.ArrowRightCircle />\r\n            </div>\r\n          </Link>\r\n        ) : null}\r\n\r\n        {currentMap.stat !== MAP_STATISTICS.ZONE &&\r\n        (currentMapMeta.mapType === MAP_TYPES.STATE ||\r\n          (currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\r\n            currentMap.stat !== MAP_STATISTICS.TOTAL)) &&\r\n        (currentMap.stat !== MAP_STATISTICS.HOTSPOTS ||\r\n          hoveredRegion?.district) ? (\r\n          <h1\r\n            className={`district ${mapOption !== 'confirmed' ? mapOption : ''}`}\r\n          >\r\n            {hoveredRegionCount}\r\n            <br />\r\n            <span>\r\n              {t(mapOption)}{' '}\r\n              {currentMap.stat === MAP_STATISTICS.PER_MILLION\r\n                ? ` ${t('per million')}`\r\n                : ''}\r\n            </span>\r\n          </h1>\r\n        ) : null}\r\n\r\n        {currentMapMeta.mapType === MAP_TYPES.STATE ? (\r\n          <div\r\n            className=\"button back-button\"\r\n            onClick={() => switchMapToState('India')}\r\n          >\r\n            {t('Back')}\r\n          </div>\r\n        ) : null}\r\n\r\n        {currentMapMeta.mapType === MAP_TYPES.STATE &&\r\n        currentMapData.Unknown &&\r\n        currentMapData.Unknown[mapOption] > 0 ? (\r\n          <h4 className=\"unknown\">\r\n            {t('Districts unknown for')} {currentMapData.Unknown[mapOption]}{' '}\r\n            {t('people')}\r\n          </h4>\r\n        ) : null}\r\n      </div>\r\n\r\n      <div>\r\n        {mapOption && (\r\n          <ChoroplethMap\r\n            statistic={statistic}\r\n            currentMap={currentMap}\r\n            mapData={currentMapData}\r\n            regionHighlighted={regionHighlighted}\r\n            setRegionHighlighted={setRegionHighlighted}\r\n            changeMap={switchMapToState}\r\n            mapOption={mapOption}\r\n            isCountryLoaded={isCountryLoaded}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"tabs-map\">\r\n        <div\r\n          className={`tab ${\r\n            currentMap.stat === MAP_STATISTICS.TOTAL ? 'focused' : ''\r\n          }`}\r\n          onClick={() => {\r\n            setCurrentMap({\r\n              name: currentMap.name,\r\n              view:\r\n                currentMapMeta.mapType === MAP_TYPES.COUNTRY\r\n                  ? MAP_VIEWS.STATES\r\n                  : MAP_VIEWS.DISTRICTS,\r\n              stat: MAP_STATISTICS.TOTAL,\r\n            });\r\n            if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\r\n              setRegionHighlighted({\r\n                state: regionHighlighted.state,\r\n              });\r\n          }}\r\n        >\r\n          <h4>{t('Total Cases')}</h4>\r\n        </div>\r\n        {isCountryLoaded && (\r\n          <div\r\n            className={`tab ${\r\n              currentMap.stat === MAP_STATISTICS.PER_MILLION ? 'focused' : ''\r\n            }`}\r\n            onClick={() => {\r\n              if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\r\n              setCurrentMap({\r\n                name: currentMap.name,\r\n                view: MAP_VIEWS.STATES,\r\n                stat: MAP_STATISTICS.PER_MILLION,\r\n              });\r\n              setRegionHighlighted({\r\n                state: regionHighlighted.state,\r\n              });\r\n            }}\r\n          >\r\n            <h4>\r\n              {t('Cases per million')}\r\n              <sup>&dagger;</sup>\r\n            </h4>\r\n          </div>\r\n        )}\r\n        {isCountryLoaded && (\r\n          <div\r\n            className={`tab ${\r\n              currentMap.stat === MAP_STATISTICS.HOTSPOTS ? 'focused' : ''\r\n            }`}\r\n            onClick={() => {\r\n              if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\r\n              setCurrentMap({\r\n                name: currentMap.name,\r\n                view: MAP_VIEWS.DISTRICTS,\r\n                stat: MAP_STATISTICS.HOTSPOTS,\r\n              });\r\n            }}\r\n          >\r\n            <h4>{t('Hotspots')}</h4>\r\n          </div>\r\n        )}\r\n        <div\r\n          className={`tab ${\r\n            currentMap.stat === MAP_STATISTICS.ZONE ? 'focused' : ''\r\n          }`}\r\n          onClick={() => {\r\n            setCurrentMap({\r\n              name: currentMap.name,\r\n              view: MAP_VIEWS.DISTRICTS,\r\n              stat: MAP_STATISTICS.ZONE,\r\n            });\r\n            if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\r\n              setRegionHighlighted({\r\n                state: 'Total',\r\n              });\r\n          }}\r\n        >\r\n          <h4>{t('Zones')}</h4>\r\n        </div>\r\n      </div>\r\n\r\n      <h6 className=\"footnote table-fineprint\">\r\n        &dagger; {t('Based on 2019 population projection by NCP') + ' ('}\r\n        <a\r\n          href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\r\n          target=\"_noblank\"\r\n          style={{color: '#6c757d'}}\r\n        >\r\n          {t('source')}\r\n        </a>\r\n        )\r\n      </h6>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(MapExplorer, isEqual);\r\n"]},"metadata":{},"sourceType":"module"}