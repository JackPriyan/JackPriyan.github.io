{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\src\\\\components\\\\knnresults.js\";\nimport { Label, LabelGroup, CounterLabel } from '@primer/components';\nimport axios from 'axios';\nimport classnames from 'classnames';\nimport produce from 'immer';\nimport L from 'leaflet';\nimport * as Knn from 'leaflet-knn';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ExternalLink, Phone } from 'react-feather';\nimport { useEffectOnce } from 'react-use';\n\nfunction medFilter(feature) {\n  return feature.properties.priority;\n}\n\nfunction othersFilter(feature) {\n  return !feature.properties.priority;\n}\n\nfunction getDistance(p1, p2) {\n  // p1 and p2 => [lat1, long1], [lat2, long2]\n  const phi1 = p1[0] * Math.PI / 180;\n  const phi2 = p2[0] * Math.PI / 180;\n  const dLambda = (p2[1] - p1[1]) * Math.PI / 180;\n  const R = 6371e3;\n  const d = Math.acos(Math.sin(phi1) * Math.sin(phi2) + Math.cos(phi1) * Math.cos(phi2) * Math.cos(dLambda)) * R;\n  return Number((d / 1000).toFixed(2));\n} // function panFilter(feature){\n//   const city = feature.properties.city\n//   const state = feature.properties.state\n//   return (city.includes(\"PAN\") && ( state.includes(\"India\") || state.includes(userState) ));\n// }\n\n\nfunction KnnResults({\n  userLocation,\n  userState\n}) {\n  const [geoData, setGeoData] = useState([]);\n  const [results, setResults] = useState();\n  const [categories, setCategories] = useState([]);\n  useEffectOnce(() => {\n    getJSON();\n  }, []);\n  const getJSON = useCallback(() => {\n    axios.get('https://raw.githubusercontent.com/aswaathb/covid19india-react/publish/newResources/geoResources.json').then(response => {\n      setGeoData(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  useEffect(() => {\n    let medKnn;\n    let restKnn;\n    let panKnn;\n    const hK = 5; // K nearest hospitals/labs wrt user location\n\n    const rK = 100; // K nearest essentials wrt user location\n\n    const rad = 10 * 1000; // Max distance of the K points, in meters ; aim to be  ~(avg city radius)\n\n    if (userLocation) {\n      var _geoData$features;\n\n      medKnn = new Knn(L.geoJSON(geoData, {\n        filter: medFilter\n      })).nearestLayer([userLocation[1], userLocation[0]], hK);\n      restKnn = new Knn(L.geoJSON(geoData, {\n        filter: othersFilter\n      })).nearestLayer([userLocation[1], userLocation[0]], rK, rad);\n      panKnn = geoData === null || geoData === void 0 ? void 0 : (_geoData$features = geoData.features) === null || _geoData$features === void 0 ? void 0 : _geoData$features.filter(feat => feat.properties.state === 'PAN India' || feat.properties.state.includes('PAN') && feat.properties.state.includes(userState));\n    }\n\n    const result = {\n      name: 'NearestK-Essentials',\n      type: 'FeatureCollection',\n      features: []\n    };\n\n    if (medKnn) {\n      let i = 0;\n\n      for (i = 0; i < medKnn.length; i++) {\n        result.features.push({\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: medKnn[i].layer.feature.geometry.coordinates\n          },\n          properties: {\n            name: medKnn[i].layer.feature.properties.name,\n            desc: medKnn[i].layer.feature.properties.desc,\n            addr: medKnn[i].layer.feature.properties.addr,\n            phone: medKnn[i].layer.feature.properties.phone,\n            contact: medKnn[i].layer.feature.properties.contact,\n            icon: medKnn[i].layer.feature.properties.icon,\n            recordid: medKnn[i].layer.feature.properties.recordid,\n            dist: getDistance(userLocation, medKnn[i].layer.feature.geometry.coordinates.reverse())\n          }\n        });\n      }\n    }\n\n    if (restKnn) {\n      let j = 0;\n\n      for (j = 0; j < restKnn.length; j++) {\n        result.features.push({\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: restKnn[j].layer.feature.geometry.coordinates\n          },\n          properties: {\n            name: restKnn[j].layer.feature.properties.name,\n            desc: restKnn[j].layer.feature.properties.desc,\n            addr: restKnn[j].layer.feature.properties.addr,\n            phone: restKnn[j].layer.feature.properties.phone,\n            contact: restKnn[j].layer.feature.properties.contact,\n            icon: restKnn[j].layer.feature.properties.icon,\n            recordid: restKnn[j].layer.feature.properties.recordid,\n            dist: getDistance(userLocation, restKnn[j].layer.feature.geometry.coordinates.reverse())\n          }\n        });\n      }\n    }\n\n    if (panKnn) {\n      let k = 0;\n\n      for (k = 0; k < panKnn.length; k++) {\n        result.features.push(panKnn[k]);\n      }\n    }\n\n    setResults(result);\n  }, [geoData, userLocation, userState]);\n\n  const toggleFilter = (categoryName, newIsSelected) => {\n    setCategories(produce(draft => {\n      draft[categoryName].isSelected = newIsSelected;\n    }));\n  };\n\n  useEffect(() => {\n    const categories = {};\n\n    if (results) {\n      results.features.map(function (feature) {\n        var _feature$properties;\n\n        return feature === null || feature === void 0 ? void 0 : (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.icon;\n      }).reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map()).forEach((value, key, map) => {\n        const categoryMeta = {\n          count: value,\n          isSelected: true\n        };\n        categories[key] = categoryMeta;\n      });\n    }\n\n    setCategories(categories);\n  }, [results]);\n  if (results) return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"results fadeInUp\",\n    style: {\n      animationDelay: '0.5s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"labels\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LabelGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, Object.keys(categories).map(categoryName => /*#__PURE__*/React.createElement(Label, {\n    variant: \"xl\",\n    key: categoryName,\n    className: classnames('label-item', {\n      'is-selected': categories[categoryName].isSelected\n    }),\n    onClick: () => toggleFilter(categoryName, !categories[categoryName].isSelected),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  }, categoryName, /*#__PURE__*/React.createElement(CounterLabel, {\n    className: \"counter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }, categories[categoryName].count))))), results === null || results === void 0 ? void 0 : results.features.filter(feature => {\n    return Object.keys(categories).filter(categoryName => categories[categoryName].isSelected === true).includes(feature.properties.icon);\n  }).map((result, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: result.properties.recordid ? result.properties.recordid : i,\n    className: \"essential-result\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-top-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 19\n    }\n  }, result.properties.name), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 19\n    }\n  }, result.properties.addr), result.properties.dist && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-distance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 21\n    }\n  }, result.properties.dist + ' km away')), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"result-category\",\n    href: result.properties.contact,\n    target: \"_noblank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 19\n    }\n  }, result.properties.icon), /*#__PURE__*/React.createElement(ExternalLink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  }, result.properties.desc), result.properties.phone ? /*#__PURE__*/React.createElement(\"a\", {\n    className: \"result-contact\",\n    href: `tel:${result.properties.phone}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Phone, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 19\n    }\n  }, result.properties.phone)) : null)));else return null;\n}\n\nexport default KnnResults;","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/components/knnresults.js"],"names":["Label","LabelGroup","CounterLabel","axios","classnames","produce","L","Knn","React","useState","useEffect","useCallback","ExternalLink","Phone","useEffectOnce","medFilter","feature","properties","priority","othersFilter","getDistance","p1","p2","phi1","Math","PI","phi2","dLambda","R","d","acos","sin","cos","Number","toFixed","KnnResults","userLocation","userState","geoData","setGeoData","results","setResults","categories","setCategories","getJSON","get","then","response","data","catch","error","console","log","medKnn","restKnn","panKnn","hK","rK","rad","geoJSON","filter","nearestLayer","features","feat","state","includes","result","name","type","i","length","push","geometry","coordinates","layer","desc","addr","phone","contact","icon","recordid","dist","reverse","j","k","toggleFilter","categoryName","newIsSelected","draft","isSelected","map","reduce","acc","e","set","Map","forEach","value","key","categoryMeta","count","animationDelay","Object","keys"],"mappings":";AAAA,SAAQA,KAAR,EAAeC,UAAf,EAA2BC,YAA3B,QAA8C,oBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,WAApC,QAAsD,OAAtD;AACA,SAAQC,YAAR,EAAsBC,KAAtB,QAAkC,eAAlC;AACA,SAAQC,aAAR,QAA4B,WAA5B;;AAEA,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,SAAOA,OAAO,CAACC,UAAR,CAAmBC,QAA1B;AACD;;AAED,SAASC,YAAT,CAAsBH,OAAtB,EAA+B;AAC7B,SAAO,CAACA,OAAO,CAACC,UAAR,CAAmBC,QAA3B;AACD;;AAED,SAASE,WAAT,CAAqBC,EAArB,EAAyBC,EAAzB,EAA6B;AAC3B;AACA,QAAMC,IAAI,GAAIF,EAAE,CAAC,CAAD,CAAF,GAAQG,IAAI,CAACC,EAAd,GAAoB,GAAjC;AACA,QAAMC,IAAI,GAAIJ,EAAE,CAAC,CAAD,CAAF,GAAQE,IAAI,CAACC,EAAd,GAAoB,GAAjC;AACA,QAAME,OAAO,GAAI,CAACL,EAAE,CAAC,CAAD,CAAF,GAAQD,EAAE,CAAC,CAAD,CAAX,IAAkBG,IAAI,CAACC,EAAxB,GAA8B,GAA9C;AACA,QAAMG,CAAC,GAAG,MAAV;AACA,QAAMC,CAAC,GACLL,IAAI,CAACM,IAAL,CACEN,IAAI,CAACO,GAAL,CAASR,IAAT,IAAiBC,IAAI,CAACO,GAAL,CAASL,IAAT,CAAjB,GACEF,IAAI,CAACQ,GAAL,CAAST,IAAT,IAAiBC,IAAI,CAACQ,GAAL,CAASN,IAAT,CAAjB,GAAkCF,IAAI,CAACQ,GAAL,CAASL,OAAT,CAFtC,IAGIC,CAJN;AAKA,SAAOK,MAAM,CAAC,CAACJ,CAAC,GAAG,IAAL,EAAWK,OAAX,CAAmB,CAAnB,CAAD,CAAb;AACD,C,CAED;AACA;AACA;AACA;AACA;;;AAEA,SAASC,UAAT,CAAoB;AAACC,EAAAA,YAAD;AAAeC,EAAAA;AAAf,CAApB,EAA+C;AAC7C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB9B,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC+B,OAAD,EAAUC,UAAV,IAAwBhC,QAAQ,EAAtC;AACA,QAAM,CAACiC,UAAD,EAAaC,aAAb,IAA8BlC,QAAQ,CAAC,EAAD,CAA5C;AAEAK,EAAAA,aAAa,CAAC,MAAM;AAClB8B,IAAAA,OAAO;AACR,GAFY,EAEV,EAFU,CAAb;AAIA,QAAMA,OAAO,GAAGjC,WAAW,CAAC,MAAM;AAChCR,IAAAA,KAAK,CACF0C,GADH,CAEI,sGAFJ,EAIGC,IAJH,CAISC,QAAD,IAAc;AAClBR,MAAAA,UAAU,CAACQ,QAAQ,CAACC,IAAV,CAAV;AACD,KANH,EAOGC,KAPH,CAOUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KATH;AAUD,GAX0B,EAWxB,EAXwB,CAA3B;AAaAxC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2C,MAAJ;AACA,QAAIC,OAAJ;AACA,QAAIC,MAAJ;AAEA,UAAMC,EAAE,GAAG,CAAX,CALc,CAKA;;AACd,UAAMC,EAAE,GAAG,GAAX,CANc,CAME;;AAChB,UAAMC,GAAG,GAAG,KAAK,IAAjB,CAPc,CAOS;;AAEvB,QAAItB,YAAJ,EAAkB;AAAA;;AAChBiB,MAAAA,MAAM,GAAG,IAAI9C,GAAJ,CAAQD,CAAC,CAACqD,OAAF,CAAUrB,OAAV,EAAmB;AAACsB,QAAAA,MAAM,EAAE7C;AAAT,OAAnB,CAAR,EAAiD8C,YAAjD,CACP,CAACzB,YAAY,CAAC,CAAD,CAAb,EAAkBA,YAAY,CAAC,CAAD,CAA9B,CADO,EAEPoB,EAFO,CAAT;AAIAF,MAAAA,OAAO,GAAG,IAAI/C,GAAJ,CACRD,CAAC,CAACqD,OAAF,CAAUrB,OAAV,EAAmB;AAACsB,QAAAA,MAAM,EAAEzC;AAAT,OAAnB,CADQ,EAER0C,YAFQ,CAEK,CAACzB,YAAY,CAAC,CAAD,CAAb,EAAkBA,YAAY,CAAC,CAAD,CAA9B,CAFL,EAEyCqB,EAFzC,EAE6CC,GAF7C,CAAV;AAGAH,MAAAA,MAAM,GAAGjB,OAAH,aAAGA,OAAH,4CAAGA,OAAO,CAAEwB,QAAZ,sDAAG,kBAAmBF,MAAnB,CACNG,IAAD,IACEA,IAAI,CAAC9C,UAAL,CAAgB+C,KAAhB,KAA0B,WAA1B,IACCD,IAAI,CAAC9C,UAAL,CAAgB+C,KAAhB,CAAsBC,QAAtB,CAA+B,KAA/B,KACCF,IAAI,CAAC9C,UAAL,CAAgB+C,KAAhB,CAAsBC,QAAtB,CAA+B5B,SAA/B,CAJG,CAAT;AAMD;;AAED,UAAM6B,MAAM,GAAG;AACbC,MAAAA,IAAI,EAAE,qBADO;AAEbC,MAAAA,IAAI,EAAE,mBAFO;AAGbN,MAAAA,QAAQ,EAAE;AAHG,KAAf;;AAMA,QAAIT,MAAJ,EAAY;AACV,UAAIgB,CAAC,GAAG,CAAR;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGhB,MAAM,CAACiB,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClCH,QAAAA,MAAM,CAACJ,QAAP,CAAgBS,IAAhB,CAAqB;AACnBH,UAAAA,IAAI,EAAE,SADa;AAEnBI,UAAAA,QAAQ,EAAE;AACRJ,YAAAA,IAAI,EAAE,OADE;AAERK,YAAAA,WAAW,EAAEpB,MAAM,CAACgB,CAAD,CAAN,CAAUK,KAAV,CAAgB1D,OAAhB,CAAwBwD,QAAxB,CAAiCC;AAFtC,WAFS;AAMnBxD,UAAAA,UAAU,EAAE;AACVkD,YAAAA,IAAI,EAAEd,MAAM,CAACgB,CAAD,CAAN,CAAUK,KAAV,CAAgB1D,OAAhB,CAAwBC,UAAxB,CAAmCkD,IAD/B;AAEVQ,YAAAA,IAAI,EAAEtB,MAAM,CAACgB,CAAD,CAAN,CAAUK,KAAV,CAAgB1D,OAAhB,CAAwBC,UAAxB,CAAmC0D,IAF/B;AAGVC,YAAAA,IAAI,EAAEvB,MAAM,CAACgB,CAAD,CAAN,CAAUK,KAAV,CAAgB1D,OAAhB,CAAwBC,UAAxB,CAAmC2D,IAH/B;AAIVC,YAAAA,KAAK,EAAExB,MAAM,CAACgB,CAAD,CAAN,CAAUK,KAAV,CAAgB1D,OAAhB,CAAwBC,UAAxB,CAAmC4D,KAJhC;AAKVC,YAAAA,OAAO,EAAEzB,MAAM,CAACgB,CAAD,CAAN,CAAUK,KAAV,CAAgB1D,OAAhB,CAAwBC,UAAxB,CAAmC6D,OALlC;AAMVC,YAAAA,IAAI,EAAE1B,MAAM,CAACgB,CAAD,CAAN,CAAUK,KAAV,CAAgB1D,OAAhB,CAAwBC,UAAxB,CAAmC8D,IAN/B;AAOVC,YAAAA,QAAQ,EAAE3B,MAAM,CAACgB,CAAD,CAAN,CAAUK,KAAV,CAAgB1D,OAAhB,CAAwBC,UAAxB,CAAmC+D,QAPnC;AAQVC,YAAAA,IAAI,EAAE7D,WAAW,CACfgB,YADe,EAEfiB,MAAM,CAACgB,CAAD,CAAN,CAAUK,KAAV,CAAgB1D,OAAhB,CAAwBwD,QAAxB,CAAiCC,WAAjC,CAA6CS,OAA7C,EAFe;AARP;AANO,SAArB;AAoBD;AACF;;AAED,QAAI5B,OAAJ,EAAa;AACX,UAAI6B,CAAC,GAAG,CAAR;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG7B,OAAO,CAACgB,MAAxB,EAAgCa,CAAC,EAAjC,EAAqC;AACnCjB,QAAAA,MAAM,CAACJ,QAAP,CAAgBS,IAAhB,CAAqB;AACnBH,UAAAA,IAAI,EAAE,SADa;AAEnBI,UAAAA,QAAQ,EAAE;AACRJ,YAAAA,IAAI,EAAE,OADE;AAERK,YAAAA,WAAW,EAAEnB,OAAO,CAAC6B,CAAD,CAAP,CAAWT,KAAX,CAAiB1D,OAAjB,CAAyBwD,QAAzB,CAAkCC;AAFvC,WAFS;AAMnBxD,UAAAA,UAAU,EAAE;AACVkD,YAAAA,IAAI,EAAEb,OAAO,CAAC6B,CAAD,CAAP,CAAWT,KAAX,CAAiB1D,OAAjB,CAAyBC,UAAzB,CAAoCkD,IADhC;AAEVQ,YAAAA,IAAI,EAAErB,OAAO,CAAC6B,CAAD,CAAP,CAAWT,KAAX,CAAiB1D,OAAjB,CAAyBC,UAAzB,CAAoC0D,IAFhC;AAGVC,YAAAA,IAAI,EAAEtB,OAAO,CAAC6B,CAAD,CAAP,CAAWT,KAAX,CAAiB1D,OAAjB,CAAyBC,UAAzB,CAAoC2D,IAHhC;AAIVC,YAAAA,KAAK,EAAEvB,OAAO,CAAC6B,CAAD,CAAP,CAAWT,KAAX,CAAiB1D,OAAjB,CAAyBC,UAAzB,CAAoC4D,KAJjC;AAKVC,YAAAA,OAAO,EAAExB,OAAO,CAAC6B,CAAD,CAAP,CAAWT,KAAX,CAAiB1D,OAAjB,CAAyBC,UAAzB,CAAoC6D,OALnC;AAMVC,YAAAA,IAAI,EAAEzB,OAAO,CAAC6B,CAAD,CAAP,CAAWT,KAAX,CAAiB1D,OAAjB,CAAyBC,UAAzB,CAAoC8D,IANhC;AAOVC,YAAAA,QAAQ,EAAE1B,OAAO,CAAC6B,CAAD,CAAP,CAAWT,KAAX,CAAiB1D,OAAjB,CAAyBC,UAAzB,CAAoC+D,QAPpC;AAQVC,YAAAA,IAAI,EAAE7D,WAAW,CACfgB,YADe,EAEfkB,OAAO,CAAC6B,CAAD,CAAP,CAAWT,KAAX,CAAiB1D,OAAjB,CAAyBwD,QAAzB,CAAkCC,WAAlC,CAA8CS,OAA9C,EAFe;AARP;AANO,SAArB;AAoBD;AACF;;AAED,QAAI3B,MAAJ,EAAY;AACV,UAAI6B,CAAC,GAAG,CAAR;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG7B,MAAM,CAACe,MAAvB,EAA+Bc,CAAC,EAAhC,EAAoC;AAClClB,QAAAA,MAAM,CAACJ,QAAP,CAAgBS,IAAhB,CAAqBhB,MAAM,CAAC6B,CAAD,CAA3B;AACD;AACF;;AAED3C,IAAAA,UAAU,CAACyB,MAAD,CAAV;AACD,GA3FQ,EA2FN,CAAC5B,OAAD,EAAUF,YAAV,EAAwBC,SAAxB,CA3FM,CAAT;;AA6FA,QAAMgD,YAAY,GAAG,CAACC,YAAD,EAAeC,aAAf,KAAiC;AACpD5C,IAAAA,aAAa,CACXtC,OAAO,CAAEmF,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACF,YAAD,CAAL,CAAoBG,UAApB,GAAiCF,aAAjC;AACD,KAFM,CADI,CAAb;AAKD,GAND;;AAQA7E,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgC,UAAU,GAAG,EAAnB;;AACA,QAAIF,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACsB,QAAR,CACG4B,GADH,CACO,UAAU1E,OAAV,EAAmB;AAAA;;AACtB,eAAOA,OAAP,aAAOA,OAAP,8CAAOA,OAAO,CAAEC,UAAhB,wDAAO,oBAAqB8D,IAA5B;AACD,OAHH,EAIGY,MAJH,CAIU,CAACC,GAAD,EAAMC,CAAN,KAAYD,GAAG,CAACE,GAAJ,CAAQD,CAAR,EAAW,CAACD,GAAG,CAAC/C,GAAJ,CAAQgD,CAAR,KAAc,CAAf,IAAoB,CAA/B,CAJtB,EAIyD,IAAIE,GAAJ,EAJzD,EAKGC,OALH,CAKW,CAACC,KAAD,EAAQC,GAAR,EAAaR,GAAb,KAAqB;AAC5B,cAAMS,YAAY,GAAG;AAACC,UAAAA,KAAK,EAAEH,KAAR;AAAeR,UAAAA,UAAU,EAAE;AAA3B,SAArB;AACA/C,QAAAA,UAAU,CAACwD,GAAD,CAAV,GAAkBC,YAAlB;AACD,OARH;AASD;;AACDxD,IAAAA,aAAa,CAACD,UAAD,CAAb;AACD,GAdQ,EAcN,CAACF,OAAD,CAdM,CAAT;AAgBA,MAAIA,OAAJ,EACE,oBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,KAAK,EAAE;AAAC6D,MAAAA,cAAc,EAAE;AAAjB,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,MAAM,CAACC,IAAP,CAAY7D,UAAZ,EAAwBgD,GAAxB,CAA6BJ,YAAD,iBAC3B,oBAAC,KAAD;AACE,IAAA,OAAO,EAAC,IADV;AAEE,IAAA,GAAG,EAAEA,YAFP;AAGE,IAAA,SAAS,EAAElF,UAAU,CAAC,YAAD,EAAe;AAClC,qBAAesC,UAAU,CAAC4C,YAAD,CAAV,CAAyBG;AADN,KAAf,CAHvB;AAME,IAAA,OAAO,EAAE,MACPJ,YAAY,CACVC,YADU,EAEV,CAAC5C,UAAU,CAAC4C,YAAD,CAAV,CAAyBG,UAFhB,CAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGH,YAbH,eAcE,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG5C,UAAU,CAAC4C,YAAD,CAAV,CAAyBc,KAD5B,CAdF,CADD,CADH,CADF,CADF,EA0BG5D,OA1BH,aA0BGA,OA1BH,uBA0BGA,OAAO,CAAEsB,QAAT,CACEF,MADF,CACU5C,OAAD,IAAa;AACnB,WAAOsF,MAAM,CAACC,IAAP,CAAY7D,UAAZ,EACJkB,MADI,CAEF0B,YAAD,IAAkB5C,UAAU,CAAC4C,YAAD,CAAV,CAAyBG,UAAzB,KAAwC,IAFvD,EAIJxB,QAJI,CAIKjD,OAAO,CAACC,UAAR,CAAmB8D,IAJxB,CAAP;AAKD,GAPF,EAQEW,GARF,CAQM,CAACxB,MAAD,EAASG,CAAT,kBACH;AACE,IAAA,GAAG,EAAEH,MAAM,CAACjD,UAAP,CAAkB+D,QAAlB,GAA6Bd,MAAM,CAACjD,UAAP,CAAkB+D,QAA/C,GAA0DX,CADjE;AAEE,IAAA,SAAS,EAAC,kBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BH,MAAM,CAACjD,UAAP,CAAkBkD,IAAhD,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,MAAM,CAACjD,UAAP,CAAkB2D,IADrB,CAFF,EAKGV,MAAM,CAACjD,UAAP,CAAkBgE,IAAlB,iBACC;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGf,MAAM,CAACjD,UAAP,CAAkBgE,IAAlB,GAAyB,UAD5B,CANJ,CADF,eAYE;AACE,IAAA,SAAS,EAAC,iBADZ;AAEE,IAAA,IAAI,EAAEf,MAAM,CAACjD,UAAP,CAAkB6D,OAF1B;AAGE,IAAA,MAAM,EAAC,UAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOZ,MAAM,CAACjD,UAAP,CAAkB8D,IAAzB,CALF,eAME,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAZF,CAJF,eAyBE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCb,MAAM,CAACjD,UAAP,CAAkB0D,IAAvD,CAzBF,EA0BGT,MAAM,CAACjD,UAAP,CAAkB4D,KAAlB,gBACC;AACE,IAAA,SAAS,EAAC,gBADZ;AAEE,IAAA,IAAI,EAAG,OAAMX,MAAM,CAACjD,UAAP,CAAkB4D,KAAM,EAFvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMX,MAAM,CAACjD,UAAP,CAAkB4D,KAAxB,CALF,CADD,GAQG,IAlCN,CATH,CA1BH,CADF,CADF,KA4EK,OAAO,IAAP;AACN;;AAED,eAAe1C,UAAf","sourcesContent":["import {Label, LabelGroup, CounterLabel} from '@primer/components';\r\nimport axios from 'axios';\r\nimport classnames from 'classnames';\r\nimport produce from 'immer';\r\nimport L from 'leaflet';\r\nimport * as Knn from 'leaflet-knn';\r\nimport React, {useState, useEffect, useCallback} from 'react';\r\nimport {ExternalLink, Phone} from 'react-feather';\r\nimport {useEffectOnce} from 'react-use';\r\n\r\nfunction medFilter(feature) {\r\n  return feature.properties.priority;\r\n}\r\n\r\nfunction othersFilter(feature) {\r\n  return !feature.properties.priority;\r\n}\r\n\r\nfunction getDistance(p1, p2) {\r\n  // p1 and p2 => [lat1, long1], [lat2, long2]\r\n  const phi1 = (p1[0] * Math.PI) / 180;\r\n  const phi2 = (p2[0] * Math.PI) / 180;\r\n  const dLambda = ((p2[1] - p1[1]) * Math.PI) / 180;\r\n  const R = 6371e3;\r\n  const d =\r\n    Math.acos(\r\n      Math.sin(phi1) * Math.sin(phi2) +\r\n        Math.cos(phi1) * Math.cos(phi2) * Math.cos(dLambda)\r\n    ) * R;\r\n  return Number((d / 1000).toFixed(2));\r\n}\r\n\r\n// function panFilter(feature){\r\n//   const city = feature.properties.city\r\n//   const state = feature.properties.state\r\n//   return (city.includes(\"PAN\") && ( state.includes(\"India\") || state.includes(userState) ));\r\n// }\r\n\r\nfunction KnnResults({userLocation, userState}) {\r\n  const [geoData, setGeoData] = useState([]);\r\n  const [results, setResults] = useState();\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  useEffectOnce(() => {\r\n    getJSON();\r\n  }, []);\r\n\r\n  const getJSON = useCallback(() => {\r\n    axios\r\n      .get(\r\n        'https://raw.githubusercontent.com/aswaathb/covid19india-react/publish/newResources/geoResources.json'\r\n      )\r\n      .then((response) => {\r\n        setGeoData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let medKnn;\r\n    let restKnn;\r\n    let panKnn;\r\n\r\n    const hK = 5; // K nearest hospitals/labs wrt user location\r\n    const rK = 100; // K nearest essentials wrt user location\r\n    const rad = 10 * 1000; // Max distance of the K points, in meters ; aim to be  ~(avg city radius)\r\n\r\n    if (userLocation) {\r\n      medKnn = new Knn(L.geoJSON(geoData, {filter: medFilter})).nearestLayer(\r\n        [userLocation[1], userLocation[0]],\r\n        hK\r\n      );\r\n      restKnn = new Knn(\r\n        L.geoJSON(geoData, {filter: othersFilter})\r\n      ).nearestLayer([userLocation[1], userLocation[0]], rK, rad);\r\n      panKnn = geoData?.features?.filter(\r\n        (feat) =>\r\n          feat.properties.state === 'PAN India' ||\r\n          (feat.properties.state.includes('PAN') &&\r\n            feat.properties.state.includes(userState))\r\n      );\r\n    }\r\n\r\n    const result = {\r\n      name: 'NearestK-Essentials',\r\n      type: 'FeatureCollection',\r\n      features: [],\r\n    };\r\n\r\n    if (medKnn) {\r\n      let i = 0;\r\n      for (i = 0; i < medKnn.length; i++) {\r\n        result.features.push({\r\n          type: 'Feature',\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: medKnn[i].layer.feature.geometry.coordinates,\r\n          },\r\n          properties: {\r\n            name: medKnn[i].layer.feature.properties.name,\r\n            desc: medKnn[i].layer.feature.properties.desc,\r\n            addr: medKnn[i].layer.feature.properties.addr,\r\n            phone: medKnn[i].layer.feature.properties.phone,\r\n            contact: medKnn[i].layer.feature.properties.contact,\r\n            icon: medKnn[i].layer.feature.properties.icon,\r\n            recordid: medKnn[i].layer.feature.properties.recordid,\r\n            dist: getDistance(\r\n              userLocation,\r\n              medKnn[i].layer.feature.geometry.coordinates.reverse()\r\n            ),\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    if (restKnn) {\r\n      let j = 0;\r\n      for (j = 0; j < restKnn.length; j++) {\r\n        result.features.push({\r\n          type: 'Feature',\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: restKnn[j].layer.feature.geometry.coordinates,\r\n          },\r\n          properties: {\r\n            name: restKnn[j].layer.feature.properties.name,\r\n            desc: restKnn[j].layer.feature.properties.desc,\r\n            addr: restKnn[j].layer.feature.properties.addr,\r\n            phone: restKnn[j].layer.feature.properties.phone,\r\n            contact: restKnn[j].layer.feature.properties.contact,\r\n            icon: restKnn[j].layer.feature.properties.icon,\r\n            recordid: restKnn[j].layer.feature.properties.recordid,\r\n            dist: getDistance(\r\n              userLocation,\r\n              restKnn[j].layer.feature.geometry.coordinates.reverse()\r\n            ),\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    if (panKnn) {\r\n      let k = 0;\r\n      for (k = 0; k < panKnn.length; k++) {\r\n        result.features.push(panKnn[k]);\r\n      }\r\n    }\r\n\r\n    setResults(result);\r\n  }, [geoData, userLocation, userState]);\r\n\r\n  const toggleFilter = (categoryName, newIsSelected) => {\r\n    setCategories(\r\n      produce((draft) => {\r\n        draft[categoryName].isSelected = newIsSelected;\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const categories = {};\r\n    if (results) {\r\n      results.features\r\n        .map(function (feature) {\r\n          return feature?.properties?.icon;\r\n        })\r\n        .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map())\r\n        .forEach((value, key, map) => {\r\n          const categoryMeta = {count: value, isSelected: true};\r\n          categories[key] = categoryMeta;\r\n        });\r\n    }\r\n    setCategories(categories);\r\n  }, [results]);\r\n\r\n  if (results)\r\n    return (\r\n      <div className=\"results fadeInUp\" style={{animationDelay: '0.5s'}}>\r\n        <div className=\"labels\">\r\n          <LabelGroup>\r\n            {Object.keys(categories).map((categoryName) => (\r\n              <Label\r\n                variant=\"xl\"\r\n                key={categoryName}\r\n                className={classnames('label-item', {\r\n                  'is-selected': categories[categoryName].isSelected,\r\n                })}\r\n                onClick={() =>\r\n                  toggleFilter(\r\n                    categoryName,\r\n                    !categories[categoryName].isSelected\r\n                  )\r\n                }\r\n              >\r\n                {categoryName}\r\n                <CounterLabel className=\"counter\">\r\n                  {categories[categoryName].count}\r\n                </CounterLabel>\r\n              </Label>\r\n            ))}\r\n          </LabelGroup>\r\n        </div>\r\n\r\n        {results?.features\r\n          .filter((feature) => {\r\n            return Object.keys(categories)\r\n              .filter(\r\n                (categoryName) => categories[categoryName].isSelected === true\r\n              )\r\n              .includes(feature.properties.icon);\r\n          })\r\n          .map((result, i) => (\r\n            <div\r\n              key={result.properties.recordid ? result.properties.recordid : i}\r\n              className=\"essential-result\"\r\n            >\r\n              <div className=\"result-top\">\r\n                <div className=\"result-top-left\">\r\n                  <div className=\"result-name\">{result.properties.name}</div>\r\n                  <div className=\"result-location\">\r\n                    {result.properties.addr}\r\n                  </div>\r\n                  {result.properties.dist && (\r\n                    <div className=\"result-distance\">\r\n                      {result.properties.dist + ' km away'}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <a\r\n                  className=\"result-category\"\r\n                  href={result.properties.contact}\r\n                  target=\"_noblank\"\r\n                >\r\n                  <span>{result.properties.icon}</span>\r\n                  <ExternalLink />\r\n                </a>\r\n              </div>\r\n              <div className=\"result-description\">{result.properties.desc}</div>\r\n              {result.properties.phone ? (\r\n                <a\r\n                  className=\"result-contact\"\r\n                  href={`tel:${result.properties.phone}`}\r\n                >\r\n                  <Phone />\r\n                  <div>{result.properties.phone}</div>\r\n                </a>\r\n              ) : null}\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\n\r\nexport default KnnResults;\r\n"]},"metadata":{},"sourceType":"module"}