{"ast":null,"code":"function defaultComparator(a, b) {\n  return a - b;\n}\n\nexports.search = function (item, array, comparator) {\n  if (!comparator) comparator = defaultComparator;\n  var low = 0,\n      high = array.length - 1,\n      mid,\n      comp;\n\n  while (low <= high) {\n    mid = low + high >>> 1;\n    comp = comparator(array[mid], item);\n    if (comp < 0) low = mid + 1;else if (comp > 0) high = mid - 1;else return mid;\n  }\n\n  return -(low + 1);\n};\n\nexports.insert = function (item, array, comparator) {\n  var i = exports.search(item, array, comparator);\n  if (i < 0) i = -(i + 1);\n  array.splice(i, 0, item);\n};","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/node_modules/sphere-knn/lib/binary.js"],"names":["defaultComparator","a","b","exports","search","item","array","comparator","low","high","length","mid","comp","insert","i","splice"],"mappings":"AAAA,SAASA,iBAAT,CAA2BC,CAA3B,EAA8BC,CAA9B,EAAiC;AAC/B,SAAOD,CAAC,GAAGC,CAAX;AACD;;AAEDC,OAAO,CAACC,MAAR,GAAiB,UAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkC;AACjD,MAAG,CAACA,UAAJ,EACEA,UAAU,GAAGP,iBAAb;AAEF,MAAIQ,GAAG,GAAI,CAAX;AAAA,MACIC,IAAI,GAAGH,KAAK,CAACI,MAAN,GAAe,CAD1B;AAAA,MAEIC,GAFJ;AAAA,MAESC,IAFT;;AAIA,SAAMJ,GAAG,IAAIC,IAAb,EAAmB;AACjBE,IAAAA,GAAG,GAAKH,GAAG,GAAGC,IAAP,KAAiB,CAAxB;AACAG,IAAAA,IAAI,GAAGL,UAAU,CAACD,KAAK,CAACK,GAAD,CAAN,EAAaN,IAAb,CAAjB;AAEA,QAAGO,IAAI,GAAG,CAAV,EACEJ,GAAG,GAAGG,GAAG,GAAG,CAAZ,CADF,KAGK,IAAGC,IAAI,GAAG,CAAV,EACHH,IAAI,GAAGE,GAAG,GAAG,CAAb,CADG,KAIH,OAAOA,GAAP;AACH;;AAED,SAAO,EAAEH,GAAG,GAAG,CAAR,CAAP;AACD,CAvBD;;AAyBAL,OAAO,CAACU,MAAR,GAAiB,UAASR,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkC;AACjD,MAAIO,CAAC,GAAGX,OAAO,CAACC,MAAR,CAAeC,IAAf,EAAqBC,KAArB,EAA4BC,UAA5B,CAAR;AAEA,MAAGO,CAAC,GAAG,CAAP,EACEA,CAAC,GAAG,EAAEA,CAAC,GAAG,CAAN,CAAJ;AAEFR,EAAAA,KAAK,CAACS,MAAN,CAAaD,CAAb,EAAgB,CAAhB,EAAmBT,IAAnB;AACD,CAPD","sourcesContent":["function defaultComparator(a, b) {\n  return a - b\n}\n\nexports.search = function(item, array, comparator) {\n  if(!comparator)\n    comparator = defaultComparator\n\n  var low  = 0,\n      high = array.length - 1,\n      mid, comp\n\n  while(low <= high) {\n    mid  = (low + high) >>> 1\n    comp = comparator(array[mid], item)\n\n    if(comp < 0)\n      low = mid + 1\n\n    else if(comp > 0)\n      high = mid - 1\n\n    else\n      return mid\n  }\n\n  return -(low + 1)\n}\n\nexports.insert = function(item, array, comparator) {\n  var i = exports.search(item, array, comparator)\n\n  if(i < 0)\n    i = -(i + 1)\n\n  array.splice(i, 0, item)\n}\n"]},"metadata":{},"sourceType":"script"}