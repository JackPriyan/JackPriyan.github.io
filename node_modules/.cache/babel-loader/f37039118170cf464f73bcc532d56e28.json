{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\src\\\\components\\\\Charts\\\\nationalitychart.js\";\nimport { formatNumber } from './chart-defaults';\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nfunction NationalityChart(props) {\n  if (!props.data || props.data.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const nationality = {};\n  props.data.forEach(patient => {\n    if (!patient.nationality) {\n      return;\n    }\n\n    if (!nationality.hasOwnProperty(patient.nationality.toLowerCase())) {\n      nationality[patient.nationality.toLowerCase()] = 0;\n    }\n\n    nationality[patient.nationality.toLowerCase()]++;\n  }); // delete nationality.india;\n\n  const data = [];\n  const labels = [];\n  Object.keys(nationality).forEach(country => {\n    if (country) {\n      labels.push(country.toUpperCase());\n      data.push(nationality[country]);\n    }\n  });\n  const chartData = {\n    datasets: [{\n      data: data,\n      backgroundColor: ['#ff8a66', '#718af0', '#7dd6fa', '#59b3aa', '#9bc26b', '#e5d22f', '#ffb041', '#db6b8f', '#bd66cc', '#8e8e8e']\n    }],\n    labels: labels\n  };\n  const chartOptions = {\n    layout: {\n      padding: {\n        left: 20,\n        right: 20,\n        top: 0,\n        bottom: 20\n      }\n    },\n    legend: {\n      display: false\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: 'point',\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\n      borderColor: 'rgba(0, 0, 0, 0)',\n      bodyFontColor: 'white',\n      titleFontColor: 'white',\n      events: ['mousemove', 'mouseout', 'touchstart', 'touchmove', 'touchend'],\n      callbacks: {\n        label: function (tooltipItem, data) {\n          const dataset = data.datasets[tooltipItem.datasetIndex];\n\n          const meta = dataset._meta[Object.keys(dataset._meta)[0]];\n\n          const total = meta.total;\n          const currentValue = dataset.data[tooltipItem.index];\n          const percentage = parseFloat((currentValue / total * 100).toFixed(1));\n          return currentValue + ' (' + percentage + '%)';\n        },\n        title: function (tooltipItem, data) {\n          return data.labels[tooltipItem[0].index];\n        }\n      }\n    }\n  };\n  const sampleSize = data.reduce((a, b) => a + b, 0);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"charts-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, props.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-content doughnut\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: chartData,\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Sample size: \", formatNumber(sampleSize), \" patients\"));\n}\n\nexport default NationalityChart;","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/components/Charts/nationalitychart.js"],"names":["formatNumber","React","Doughnut","NationalityChart","props","data","length","nationality","forEach","patient","hasOwnProperty","toLowerCase","labels","Object","keys","country","push","toUpperCase","chartData","datasets","backgroundColor","chartOptions","layout","padding","left","right","top","bottom","legend","display","responsive","maintainAspectRatio","tooltips","mode","borderColor","bodyFontColor","titleFontColor","events","callbacks","label","tooltipItem","dataset","datasetIndex","meta","_meta","total","currentValue","index","percentage","parseFloat","toFixed","title","sampleSize","reduce","a","b"],"mappings":";AAAA,SAAQA,YAAR,QAA2B,kBAA3B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,iBAAvB;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,MAAI,CAACA,KAAK,CAACC,IAAP,IAAeD,KAAK,CAACC,IAAN,CAAWC,MAAX,KAAsB,CAAzC,EAA4C;AAC1C,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,QAAMC,WAAW,GAAG,EAApB;AAEAH,EAAAA,KAAK,CAACC,IAAN,CAAWG,OAAX,CAAoBC,OAAD,IAAa;AAC9B,QAAI,CAACA,OAAO,CAACF,WAAb,EAA0B;AACxB;AACD;;AACD,QAAI,CAACA,WAAW,CAACG,cAAZ,CAA2BD,OAAO,CAACF,WAAR,CAAoBI,WAApB,EAA3B,CAAL,EAAoE;AAClEJ,MAAAA,WAAW,CAACE,OAAO,CAACF,WAAR,CAAoBI,WAApB,EAAD,CAAX,GAAiD,CAAjD;AACD;;AACDJ,IAAAA,WAAW,CAACE,OAAO,CAACF,WAAR,CAAoBI,WAApB,EAAD,CAAX;AACD,GARD,EAP+B,CAiB/B;;AACA,QAAMN,IAAI,GAAG,EAAb;AACA,QAAMO,MAAM,GAAG,EAAf;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYP,WAAZ,EAAyBC,OAAzB,CAAkCO,OAAD,IAAa;AAC5C,QAAIA,OAAJ,EAAa;AACXH,MAAAA,MAAM,CAACI,IAAP,CAAYD,OAAO,CAACE,WAAR,EAAZ;AACAZ,MAAAA,IAAI,CAACW,IAAL,CAAUT,WAAW,CAACQ,OAAD,CAArB;AACD;AACF,GALD;AAOA,QAAMG,SAAS,GAAG;AAChBC,IAAAA,QAAQ,EAAE,CACR;AACEd,MAAAA,IAAI,EAAEA,IADR;AAEEe,MAAAA,eAAe,EAAE,CACf,SADe,EAEf,SAFe,EAGf,SAHe,EAIf,SAJe,EAKf,SALe,EAMf,SANe,EAOf,SAPe,EAQf,SARe,EASf,SATe,EAUf,SAVe;AAFnB,KADQ,CADM;AAkBhBR,IAAAA,MAAM,EAAEA;AAlBQ,GAAlB;AAqBA,QAAMS,YAAY,GAAG;AACnBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,EADC;AAEPC,QAAAA,KAAK,EAAE,EAFA;AAGPC,QAAAA,GAAG,EAAE,CAHE;AAIPC,QAAAA,MAAM,EAAE;AAJD;AADH,KADW;AASnBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE;AADH,KATW;AAYnBC,IAAAA,UAAU,EAAE,IAZO;AAanBC,IAAAA,mBAAmB,EAAE,KAbF;AAcnBC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,IAAI,EAAE,OADE;AAERb,MAAAA,eAAe,EAAE,oBAFT;AAGRc,MAAAA,WAAW,EAAE,kBAHL;AAIRC,MAAAA,aAAa,EAAE,OAJP;AAKRC,MAAAA,cAAc,EAAE,OALR;AAMRC,MAAAA,MAAM,EAAE,CAAC,WAAD,EAAc,UAAd,EAA0B,YAA1B,EAAwC,WAAxC,EAAqD,UAArD,CANA;AAORC,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,UAAUC,WAAV,EAAuBnC,IAAvB,EAA6B;AAClC,gBAAMoC,OAAO,GAAGpC,IAAI,CAACc,QAAL,CAAcqB,WAAW,CAACE,YAA1B,CAAhB;;AACA,gBAAMC,IAAI,GAAGF,OAAO,CAACG,KAAR,CAAc/B,MAAM,CAACC,IAAP,CAAY2B,OAAO,CAACG,KAApB,EAA2B,CAA3B,CAAd,CAAb;;AACA,gBAAMC,KAAK,GAAGF,IAAI,CAACE,KAAnB;AACA,gBAAMC,YAAY,GAAGL,OAAO,CAACpC,IAAR,CAAamC,WAAW,CAACO,KAAzB,CAArB;AACA,gBAAMC,UAAU,GAAGC,UAAU,CAC3B,CAAEH,YAAY,GAAGD,KAAhB,GAAyB,GAA1B,EAA+BK,OAA/B,CAAuC,CAAvC,CAD2B,CAA7B;AAGA,iBAAOJ,YAAY,GAAG,IAAf,GAAsBE,UAAtB,GAAmC,IAA1C;AACD,SAVQ;AAWTG,QAAAA,KAAK,EAAE,UAAUX,WAAV,EAAuBnC,IAAvB,EAA6B;AAClC,iBAAOA,IAAI,CAACO,MAAL,CAAY4B,WAAW,CAAC,CAAD,CAAX,CAAeO,KAA3B,CAAP;AACD;AAbQ;AAPH;AAdS,GAArB;AAuCA,QAAMK,UAAU,GAAG/C,IAAI,CAACgD,MAAL,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA1B,EAA6B,CAA7B,CAAnB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BnD,KAAK,CAAC+C,KAApC,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEjC,SAAhB;AAA2B,IAAA,OAAO,EAAEG,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,eAKE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgBrB,YAAY,CAACoD,UAAD,CAD5B,cALF,CADF;AAWD;;AAED,eAAejD,gBAAf","sourcesContent":["import {formatNumber} from './chart-defaults';\r\n\r\nimport React from 'react';\r\nimport {Doughnut} from 'react-chartjs-2';\r\n\r\nfunction NationalityChart(props) {\r\n  if (!props.data || props.data.length === 0) {\r\n    return <div></div>;\r\n  }\r\n\r\n  const nationality = {};\r\n\r\n  props.data.forEach((patient) => {\r\n    if (!patient.nationality) {\r\n      return;\r\n    }\r\n    if (!nationality.hasOwnProperty(patient.nationality.toLowerCase())) {\r\n      nationality[patient.nationality.toLowerCase()] = 0;\r\n    }\r\n    nationality[patient.nationality.toLowerCase()]++;\r\n  });\r\n\r\n  // delete nationality.india;\r\n  const data = [];\r\n  const labels = [];\r\n\r\n  Object.keys(nationality).forEach((country) => {\r\n    if (country) {\r\n      labels.push(country.toUpperCase());\r\n      data.push(nationality[country]);\r\n    }\r\n  });\r\n\r\n  const chartData = {\r\n    datasets: [\r\n      {\r\n        data: data,\r\n        backgroundColor: [\r\n          '#ff8a66',\r\n          '#718af0',\r\n          '#7dd6fa',\r\n          '#59b3aa',\r\n          '#9bc26b',\r\n          '#e5d22f',\r\n          '#ffb041',\r\n          '#db6b8f',\r\n          '#bd66cc',\r\n          '#8e8e8e',\r\n        ],\r\n      },\r\n    ],\r\n    labels: labels,\r\n  };\r\n\r\n  const chartOptions = {\r\n    layout: {\r\n      padding: {\r\n        left: 20,\r\n        right: 20,\r\n        top: 0,\r\n        bottom: 20,\r\n      },\r\n    },\r\n    legend: {\r\n      display: false,\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: 'point',\r\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n      borderColor: 'rgba(0, 0, 0, 0)',\r\n      bodyFontColor: 'white',\r\n      titleFontColor: 'white',\r\n      events: ['mousemove', 'mouseout', 'touchstart', 'touchmove', 'touchend'],\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          const dataset = data.datasets[tooltipItem.datasetIndex];\r\n          const meta = dataset._meta[Object.keys(dataset._meta)[0]];\r\n          const total = meta.total;\r\n          const currentValue = dataset.data[tooltipItem.index];\r\n          const percentage = parseFloat(\r\n            ((currentValue / total) * 100).toFixed(1)\r\n          );\r\n          return currentValue + ' (' + percentage + '%)';\r\n        },\r\n        title: function (tooltipItem, data) {\r\n          return data.labels[tooltipItem[0].index];\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const sampleSize = data.reduce((a, b) => a + b, 0);\r\n\r\n  return (\r\n    <div className=\"charts-header\">\r\n      <div className=\"chart-title\">{props.title}</div>\r\n      <div className=\"chart-content doughnut\">\r\n        <Doughnut data={chartData} options={chartOptions} />\r\n      </div>\r\n      <div className=\"chart-note\">\r\n        Sample size: {formatNumber(sampleSize)} patients\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NationalityChart;\r\n"]},"metadata":{},"sourceType":"module"}