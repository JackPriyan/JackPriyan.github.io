{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{STATE_CODES,STATE_CODES_REVERSE,LOCALE_SHORTHANDS}from'../constants';import{parse,differenceInDays,isBefore,isSameDay,startOfDay,format,formatDistance}from'date-fns';import{utcToZonedTime}from'date-fns-tz';import i18n from'i18next';export var isDevelopmentOrTest=function isDevelopmentOrTest(){if(process.env.NODE_ENV==='development'||process.env.NODE_ENV==='test')return true;return false;};export var getStateName=function getStateName(code){return STATE_CODES[code.toUpperCase()];};export var getIndiaDay=function getIndiaDay(){return startOfDay(utcToZonedTime(new Date(),'Asia/Kolkata'));};export var formatDate=function formatDate(unformattedDate){var day=unformattedDate.slice(0,2);var month=unformattedDate.slice(3,5);var year=unformattedDate.slice(6,10);var time=unformattedDate.slice(11);return\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T\").concat(time,\"+05:30\");};export var formatDateAbsolute=function formatDateAbsolute(unformattedDate){return format(parse(unformattedDate,'dd/MM/yyyy HH:mm:ss',new Date()),'dd MMM, hh:mm b',{locale:LOCALE_SHORTHANDS[i18n.language]});};export var formatDayMonth=function formatDayMonth(unformattedDate){return format(parse(unformattedDate,'dd/MM/yyyy',new Date()),'dd MMM',{locale:LOCALE_SHORTHANDS[i18n.language]});};export var formatLastUpdated=function formatLastUpdated(unformattedDate){return formatDistance(new Date(formatDate(unformattedDate)),new Date(),{locale:LOCALE_SHORTHANDS[i18n.language]});};export var formatTimeseriesDate=function formatTimeseriesDate(unformattedDate){return format(unformattedDate,'dd MMMM',{locale:LOCALE_SHORTHANDS[i18n.language]});};export var formatTimeseriesTickX=function formatTimeseriesTickX(unformattedDate){return format(unformattedDate,'d MMM',{locale:LOCALE_SHORTHANDS[i18n.language]});};var validateCTS=function validateCTS(){var data=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var dataTypes=['dailyconfirmed','dailydeceased','dailyrecovered','totalconfirmed','totaldeceased','totalrecovered'];return data.filter(function(d){return dataTypes.every(function(dt){return d[dt];})&&d.date;}).filter(function(d){return dataTypes.every(function(dt){return Number(d[dt])>=0;});}).filter(function(d){// Skip data from the current day\nvar today=getIndiaDay();var date=parse(d.date,'dd MMMM',new Date(2020,0,1));return isBefore(date,today);});};export var preprocessTimeseries=function preprocessTimeseries(timeseries){return validateCTS(timeseries).map(function(stat,index){return{date:parse(stat.date,'dd MMMM',new Date(2020,0,1)),totalconfirmed:+stat.totalconfirmed,totalrecovered:+stat.totalrecovered,totaldeceased:+stat.totaldeceased,dailyconfirmed:+stat.dailyconfirmed,dailyrecovered:+stat.dailyrecovered,dailydeceased:+stat.dailydeceased,// Active = Confimed - Recovered - Deceased\ntotalactive:+stat.totalconfirmed-+stat.totalrecovered-+stat.totaldeceased,dailyactive:+stat.dailyconfirmed-+stat.dailyrecovered-+stat.dailydeceased};});};/**\r\n * Returns the last `days` entries\r\n * @param {Array<Object>} timeseries\r\n * @param {number} days\r\n *\r\n * @return {Array<Object>}\r\n */export function sliceTimeseriesFromEnd(timeseries,days){return timeseries.slice(-days);}export var formatNumber=function formatNumber(value){var numberFormatter=new Intl.NumberFormat('en-IN');return isNaN(value)?'-':numberFormatter.format(value);};export var parseStateTimeseries=function parseStateTimeseries(_ref){var data=_ref.states_daily;var statewiseSeries=Object.keys(STATE_CODES).reduce(function(a,c){a[c]=[];return a;},{});var today=getIndiaDay();var _loop=function _loop(i){var date=parse(data[i].date,'dd-MMM-yy',new Date());// Skip data from the current day\nif(isBefore(date,today)){Object.entries(statewiseSeries).forEach(function(_ref2){var _ref3=_slicedToArray(_ref2,2),k=_ref3[0],v=_ref3[1];var stateCode=k.toLowerCase();var prev=v[v.length-1]||{};// Parser\nvar dailyconfirmed=+data[i][stateCode]||0;var dailyrecovered=+data[i+1][stateCode]||0;var dailydeceased=+data[i+2][stateCode]||0;var totalconfirmed=+data[i][stateCode]+(prev.totalconfirmed||0);var totalrecovered=+data[i+1][stateCode]+(prev.totalrecovered||0);var totaldeceased=+data[i+2][stateCode]+(prev.totaldeceased||0);// Push\nv.push({date:date,dailyconfirmed:dailyconfirmed,dailyrecovered:dailyrecovered,dailydeceased:dailydeceased,totalconfirmed:totalconfirmed,totalrecovered:totalrecovered,totaldeceased:totaldeceased,// Active = Confimed - Recovered - Deceased\ntotalactive:totalconfirmed-totalrecovered-totaldeceased,dailyactive:dailyconfirmed-dailyrecovered-dailydeceased});});}};for(var i=0;i<data.length;i+=3){_loop(i);}return statewiseSeries;};export var parseStateTestData=function parseStateTestData(data){var reversed=_toConsumableArray(data).reverse();return Object.keys(STATE_CODES_REVERSE).reduce(function(ret,state){var obj=reversed.find(function(obj){return obj.state===state&&obj.totaltested!=='';});ret[state]={source:(obj===null||obj===void 0?void 0:obj.source1)||(obj===null||obj===void 0?void 0:obj.source2),totaltested:obj===null||obj===void 0?void 0:obj.totaltested,updatedon:obj===null||obj===void 0?void 0:obj.updatedon};return ret;},{});};export var parseStateTestTimeseries=function parseStateTestTimeseries(data){var testTimseries=Object.keys(STATE_CODES).reduce(function(ret,sc){ret[sc]=[];return ret;},{});var today=getIndiaDay();data.forEach(function(d){var date=parse(d.updatedon,'dd/MM/yyyy',new Date());var totaltested=+d.totaltested;var stateCode=STATE_CODES_REVERSE[d.state];if(stateCode&&isBefore(date,today)&&totaltested){var stateTs=testTimseries[stateCode];var dailytested;if(stateTs.length){var prev=stateTs[stateTs.length-1];dailytested=differenceInDays(date,prev.date)===1?totaltested-prev.totaltested:NaN;}else dailytested=NaN;stateTs.push({date:date,totaltested:totaltested,dailytested:dailytested});}});return testTimseries;};export var parseTotalTestTimeseries=function parseTotalTestTimeseries(data){var testTimseries=[];var today=getIndiaDay();data.forEach(function(d){var date=parse(d.updatetimestamp.split(' ')[0],'dd/MM/yyyy',new Date());var totaltested=+d.totalsamplestested;if(isBefore(date,today)&&totaltested){var dailytested;if(testTimseries.length){var prev=testTimseries[testTimseries.length-1];if(isSameDay(date,prev.date)){prev.dailytested+=totaltested-prev.totaltested;prev.totaltested=totaltested;}else{if(differenceInDays(date,prev.date)===1)dailytested=totaltested-prev.totaltested;else dailytested=NaN;}}else dailytested=NaN;testTimseries.push({date:date,totaltested:totaltested,dailytested:dailytested});}});return testTimseries;};export var mergeTimeseries=function mergeTimeseries(ts1,ts2){var tsRet=Object.assign({},ts1);var _loop2=function _loop2(state){if(ts1.hasOwnProperty(state)){tsRet[state]=ts1[state].map(function(d1){var testData=ts2[state].find(function(d2){return isSameDay(d1.date,d2.date);});return _objectSpread({totaltested:testData===null||testData===void 0?void 0:testData.totaltested,dailytested:testData===null||testData===void 0?void 0:testData.dailytested},d1);});}};for(var state in ts1){_loop2(state);}return tsRet;};export var capitalize=function capitalize(s){if(typeof s!=='string')return'';return s.charAt(0).toUpperCase()+s.slice(1);};export var capitalizeAll=function capitalizeAll(s){if(typeof s!=='string')return'';var str=s.toLowerCase().split(' ');for(var i=0;i<str.length;i++){str[i]=capitalize(str[i]);}return str.join(' ');};export var abbreviate=function abbreviate(s){return s.slice(0,1)+s.slice(1).replace(/[aeiou]/gi,'');};export var parseDistrictZones=function parseDistrictZones(data,state){var zones=data.reduce(function(ret,d){ret[d.state]=ret[d.state]||{};ret[d.state][d.district]=d;return ret;},{});Object.values(STATE_CODES).forEach(function(state){if(!zones[state])zones[state]={};});return state?_defineProperty({},state,zones[state]):zones;};export var toTitleCase=function toTitleCase(str){return str.replace(/\\w\\S*/g,function(txt){return txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase();});};","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/utils/commonfunctions.js"],"names":["STATE_CODES","STATE_CODES_REVERSE","LOCALE_SHORTHANDS","parse","differenceInDays","isBefore","isSameDay","startOfDay","format","formatDistance","utcToZonedTime","i18n","isDevelopmentOrTest","process","env","NODE_ENV","getStateName","code","toUpperCase","getIndiaDay","Date","formatDate","unformattedDate","day","slice","month","year","time","formatDateAbsolute","locale","language","formatDayMonth","formatLastUpdated","formatTimeseriesDate","formatTimeseriesTickX","validateCTS","data","dataTypes","filter","d","every","dt","date","Number","today","preprocessTimeseries","timeseries","map","stat","index","totalconfirmed","totalrecovered","totaldeceased","dailyconfirmed","dailyrecovered","dailydeceased","totalactive","dailyactive","sliceTimeseriesFromEnd","days","formatNumber","value","numberFormatter","Intl","NumberFormat","isNaN","parseStateTimeseries","states_daily","statewiseSeries","Object","keys","reduce","a","c","i","entries","forEach","k","v","stateCode","toLowerCase","prev","length","push","parseStateTestData","reversed","reverse","ret","state","obj","find","totaltested","source","source1","source2","updatedon","parseStateTestTimeseries","testTimseries","sc","stateTs","dailytested","NaN","parseTotalTestTimeseries","updatetimestamp","split","totalsamplestested","mergeTimeseries","ts1","ts2","tsRet","assign","hasOwnProperty","d1","testData","d2","capitalize","s","charAt","capitalizeAll","str","join","abbreviate","replace","parseDistrictZones","zones","district","values","toTitleCase","txt","substr"],"mappings":"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","sourcesContent":["import {\r\n  STATE_CODES,\r\n  STATE_CODES_REVERSE,\r\n  LOCALE_SHORTHANDS,\r\n} from '../constants';\r\n\r\nimport {\r\n  parse,\r\n  differenceInDays,\r\n  isBefore,\r\n  isSameDay,\r\n  startOfDay,\r\n  format,\r\n  formatDistance,\r\n} from 'date-fns';\r\nimport {utcToZonedTime} from 'date-fns-tz';\r\nimport i18n from 'i18next';\r\n\r\nexport const isDevelopmentOrTest = () => {\r\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')\r\n    return true;\r\n  return false;\r\n};\r\n\r\nexport const getStateName = (code) => {\r\n  return STATE_CODES[code.toUpperCase()];\r\n};\r\n\r\nexport const getIndiaDay = () => {\r\n  return startOfDay(utcToZonedTime(new Date(), 'Asia/Kolkata'));\r\n};\r\n\r\nexport const formatDate = (unformattedDate) => {\r\n  const day = unformattedDate.slice(0, 2);\r\n  const month = unformattedDate.slice(3, 5);\r\n  const year = unformattedDate.slice(6, 10);\r\n  const time = unformattedDate.slice(11);\r\n  return `${year}-${month}-${day}T${time}+05:30`;\r\n};\r\n\r\nexport const formatDateAbsolute = (unformattedDate) => {\r\n  return format(\r\n    parse(unformattedDate, 'dd/MM/yyyy HH:mm:ss', new Date()),\r\n    'dd MMM, hh:mm b',\r\n    {\r\n      locale: LOCALE_SHORTHANDS[i18n.language],\r\n    }\r\n  );\r\n};\r\n\r\nexport const formatDayMonth = (unformattedDate) => {\r\n  return format(parse(unformattedDate, 'dd/MM/yyyy', new Date()), 'dd MMM', {\r\n    locale: LOCALE_SHORTHANDS[i18n.language],\r\n  });\r\n};\r\n\r\nexport const formatLastUpdated = (unformattedDate) => {\r\n  return formatDistance(new Date(formatDate(unformattedDate)), new Date(), {\r\n    locale: LOCALE_SHORTHANDS[i18n.language],\r\n  });\r\n};\r\n\r\nexport const formatTimeseriesDate = (unformattedDate) => {\r\n  return format(unformattedDate, 'dd MMMM', {\r\n    locale: LOCALE_SHORTHANDS[i18n.language],\r\n  });\r\n};\r\n\r\nexport const formatTimeseriesTickX = (unformattedDate) => {\r\n  return format(unformattedDate, 'd MMM', {\r\n    locale: LOCALE_SHORTHANDS[i18n.language],\r\n  });\r\n};\r\n\r\nconst validateCTS = (data = []) => {\r\n  const dataTypes = [\r\n    'dailyconfirmed',\r\n    'dailydeceased',\r\n    'dailyrecovered',\r\n    'totalconfirmed',\r\n    'totaldeceased',\r\n    'totalrecovered',\r\n  ];\r\n  return data\r\n    .filter((d) => dataTypes.every((dt) => d[dt]) && d.date)\r\n    .filter((d) => dataTypes.every((dt) => Number(d[dt]) >= 0))\r\n    .filter((d) => {\r\n      // Skip data from the current day\r\n      const today = getIndiaDay();\r\n      const date = parse(d.date, 'dd MMMM', new Date(2020, 0, 1));\r\n      return isBefore(date, today);\r\n    });\r\n};\r\n\r\nexport const preprocessTimeseries = (timeseries) => {\r\n  return validateCTS(timeseries).map((stat, index) => ({\r\n    date: parse(stat.date, 'dd MMMM', new Date(2020, 0, 1)),\r\n    totalconfirmed: +stat.totalconfirmed,\r\n    totalrecovered: +stat.totalrecovered,\r\n    totaldeceased: +stat.totaldeceased,\r\n    dailyconfirmed: +stat.dailyconfirmed,\r\n    dailyrecovered: +stat.dailyrecovered,\r\n    dailydeceased: +stat.dailydeceased,\r\n    // Active = Confimed - Recovered - Deceased\r\n    totalactive:\r\n      +stat.totalconfirmed - +stat.totalrecovered - +stat.totaldeceased,\r\n    dailyactive:\r\n      +stat.dailyconfirmed - +stat.dailyrecovered - +stat.dailydeceased,\r\n  }));\r\n};\r\n\r\n/**\r\n * Returns the last `days` entries\r\n * @param {Array<Object>} timeseries\r\n * @param {number} days\r\n *\r\n * @return {Array<Object>}\r\n */\r\nexport function sliceTimeseriesFromEnd(timeseries, days) {\r\n  return timeseries.slice(-days);\r\n}\r\n\r\nexport const formatNumber = (value) => {\r\n  const numberFormatter = new Intl.NumberFormat('en-IN');\r\n  return isNaN(value) ? '-' : numberFormatter.format(value);\r\n};\r\n\r\nexport const parseStateTimeseries = ({states_daily: data}) => {\r\n  const statewiseSeries = Object.keys(STATE_CODES).reduce((a, c) => {\r\n    a[c] = [];\r\n    return a;\r\n  }, {});\r\n\r\n  const today = getIndiaDay();\r\n  for (let i = 0; i < data.length; i += 3) {\r\n    const date = parse(data[i].date, 'dd-MMM-yy', new Date());\r\n    // Skip data from the current day\r\n    if (isBefore(date, today)) {\r\n      Object.entries(statewiseSeries).forEach(([k, v]) => {\r\n        const stateCode = k.toLowerCase();\r\n        const prev = v[v.length - 1] || {};\r\n        // Parser\r\n        const dailyconfirmed = +data[i][stateCode] || 0;\r\n        const dailyrecovered = +data[i + 1][stateCode] || 0;\r\n        const dailydeceased = +data[i + 2][stateCode] || 0;\r\n        const totalconfirmed = +data[i][stateCode] + (prev.totalconfirmed || 0);\r\n        const totalrecovered =\r\n          +data[i + 1][stateCode] + (prev.totalrecovered || 0);\r\n        const totaldeceased =\r\n          +data[i + 2][stateCode] + (prev.totaldeceased || 0);\r\n        // Push\r\n        v.push({\r\n          date: date,\r\n          dailyconfirmed: dailyconfirmed,\r\n          dailyrecovered: dailyrecovered,\r\n          dailydeceased: dailydeceased,\r\n          totalconfirmed: totalconfirmed,\r\n          totalrecovered: totalrecovered,\r\n          totaldeceased: totaldeceased,\r\n          // Active = Confimed - Recovered - Deceased\r\n          totalactive: totalconfirmed - totalrecovered - totaldeceased,\r\n          dailyactive: dailyconfirmed - dailyrecovered - dailydeceased,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  return statewiseSeries;\r\n};\r\n\r\nexport const parseStateTestData = (data) => {\r\n  const reversed = [...data].reverse();\r\n  return Object.keys(STATE_CODES_REVERSE).reduce((ret, state) => {\r\n    const obj = reversed.find(\r\n      (obj) => obj.state === state && obj.totaltested !== ''\r\n    );\r\n    ret[state] = {\r\n      source: obj?.source1 || obj?.source2,\r\n      totaltested: obj?.totaltested,\r\n      updatedon: obj?.updatedon,\r\n    };\r\n    return ret;\r\n  }, {});\r\n};\r\n\r\nexport const parseStateTestTimeseries = (data) => {\r\n  const testTimseries = Object.keys(STATE_CODES).reduce((ret, sc) => {\r\n    ret[sc] = [];\r\n    return ret;\r\n  }, {});\r\n\r\n  const today = getIndiaDay();\r\n  data.forEach((d) => {\r\n    const date = parse(d.updatedon, 'dd/MM/yyyy', new Date());\r\n    const totaltested = +d.totaltested;\r\n    const stateCode = STATE_CODES_REVERSE[d.state];\r\n    if (stateCode && isBefore(date, today) && totaltested) {\r\n      const stateTs = testTimseries[stateCode];\r\n      let dailytested;\r\n      if (stateTs.length) {\r\n        const prev = stateTs[stateTs.length - 1];\r\n        dailytested =\r\n          differenceInDays(date, prev.date) === 1\r\n            ? totaltested - prev.totaltested\r\n            : NaN;\r\n      } else dailytested = NaN;\r\n      stateTs.push({\r\n        date: date,\r\n        totaltested: totaltested,\r\n        dailytested: dailytested,\r\n      });\r\n    }\r\n  });\r\n  return testTimseries;\r\n};\r\n\r\nexport const parseTotalTestTimeseries = (data) => {\r\n  const testTimseries = [];\r\n  const today = getIndiaDay();\r\n  data.forEach((d) => {\r\n    const date = parse(\r\n      d.updatetimestamp.split(' ')[0],\r\n      'dd/MM/yyyy',\r\n      new Date()\r\n    );\r\n    const totaltested = +d.totalsamplestested;\r\n    if (isBefore(date, today) && totaltested) {\r\n      let dailytested;\r\n      if (testTimseries.length) {\r\n        const prev = testTimseries[testTimseries.length - 1];\r\n        if (isSameDay(date, prev.date)) {\r\n          prev.dailytested += totaltested - prev.totaltested;\r\n          prev.totaltested = totaltested;\r\n        } else {\r\n          if (differenceInDays(date, prev.date) === 1)\r\n            dailytested = totaltested - prev.totaltested;\r\n          else dailytested = NaN;\r\n        }\r\n      } else dailytested = NaN;\r\n      testTimseries.push({\r\n        date: date,\r\n        totaltested: totaltested,\r\n        dailytested: dailytested,\r\n      });\r\n    }\r\n  });\r\n  return testTimseries;\r\n};\r\n\r\nexport const mergeTimeseries = (ts1, ts2) => {\r\n  const tsRet = Object.assign({}, ts1);\r\n  for (const state in ts1) {\r\n    if (ts1.hasOwnProperty(state)) {\r\n      tsRet[state] = ts1[state].map((d1) => {\r\n        const testData = ts2[state].find((d2) => isSameDay(d1.date, d2.date));\r\n        return {\r\n          totaltested: testData?.totaltested,\r\n          dailytested: testData?.dailytested,\r\n          ...d1,\r\n        };\r\n      });\r\n    }\r\n  }\r\n  return tsRet;\r\n};\r\n\r\nexport const capitalize = (s) => {\r\n  if (typeof s !== 'string') return '';\r\n  return s.charAt(0).toUpperCase() + s.slice(1);\r\n};\r\n\r\nexport const capitalizeAll = (s) => {\r\n  if (typeof s !== 'string') return '';\r\n  const str = s.toLowerCase().split(' ');\r\n  for (let i = 0; i < str.length; i++) {\r\n    str[i] = capitalize(str[i]);\r\n  }\r\n  return str.join(' ');\r\n};\r\n\r\nexport const abbreviate = (s) => {\r\n  return s.slice(0, 1) + s.slice(1).replace(/[aeiou]/gi, '');\r\n};\r\n\r\nexport const parseDistrictZones = (data, state) => {\r\n  const zones = data.reduce((ret, d) => {\r\n    ret[d.state] = ret[d.state] || {};\r\n    ret[d.state][d.district] = d;\r\n    return ret;\r\n  }, {});\r\n  Object.values(STATE_CODES).forEach((state) => {\r\n    if (!zones[state]) zones[state] = {};\r\n  });\r\n  return state ? {[state]: zones[state]} : zones;\r\n};\r\n\r\nexport const toTitleCase = (str) => {\r\n  return str.replace(/\\w\\S*/g, function (txt) {\r\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}