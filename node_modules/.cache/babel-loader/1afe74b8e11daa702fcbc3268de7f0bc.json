{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\src\\\\components\\\\state.js\";\nimport Clusters from './clusters';\nimport DeltaBarGraph from './deltabargraph';\nimport Footer from './footer';\nimport Level from './level';\nimport MapExplorer from './mapexplorer';\nimport Minigraph from './minigraph';\nimport StateMeta from './statemeta';\nimport TimeSeriesExplorer from './timeseriesexplorer';\nimport { STATE_CODES, STATE_POPULATIONS } from '../constants';\nimport { formatDateAbsolute, formatNumber, mergeTimeseries, parseStateTimeseries, parseStateTestData, parseStateTestTimeseries, parseDistrictZones } from '../utils/commonfunctions';\nimport Breadcrumb from '@primer/components/lib/Breadcrumb';\nimport Dropdown from '@primer/components/lib/Dropdown';\nimport anime from 'animejs';\nimport axios from 'axios';\nimport { format, parse } from 'date-fns';\nimport React, { useState } from 'react';\nimport * as Icon from 'react-feather';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useParams, Redirect } from 'react-router-dom';\nimport { useMeasure, useEffectOnce } from 'react-use';\n\nfunction PureBreadcrumbs({\n  stateName,\n  stateCode,\n  fetched,\n  allStateData\n}) {\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"breadcrumb\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb.Item, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, t('Home')), /*#__PURE__*/React.createElement(Dropdown, {\n    direction: \"w\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"summary\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb.Item, {\n    href: `${stateCode}`,\n    selected: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, t(stateName)), /*#__PURE__*/React.createElement(Dropdown.Caret, {\n    className: \"caret\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  })), fetched && /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    direction: \"se\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, allStateData.map(state => /*#__PURE__*/React.createElement(Dropdown.Item, {\n    key: state.statecode,\n    className: \"item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: `${state.statecode}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }\n  }, t(STATE_CODES[state.statecode]))))))));\n}\n\nconst Breadcrumbs = React.memo(PureBreadcrumbs);\n\nfunction State(props) {\n  const stateCode = useParams().stateCode.toUpperCase();\n  const stateName = STATE_CODES[stateCode];\n  const [allStateData, setAllStateData] = useState({});\n  const [fetched, setFetched] = useState(false);\n  const [districtZones, setDistrictZones] = useState(null);\n  const [timeseries, setTimeseries] = useState({});\n  const [stateData, setStateData] = useState(null);\n  const [testData, setTestData] = useState({});\n  const [sources, setSources] = useState({});\n  const [districtData, setDistrictData] = useState({});\n  const [mapOption, setMapOption] = useState('confirmed');\n  const [mapSwitcher, {\n    width\n  }] = useMeasure();\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    state: stateName\n  });\n  useEffectOnce(() => {\n    getState();\n  });\n  const {\n    t\n  } = useTranslation();\n\n  const getState = async () => {\n    try {\n      const [{\n        data: dataResponse\n      }, {\n        data: stateDistrictWiseResponse\n      }, {\n        data: statesDailyResponse\n      }, {\n        data: stateTestResponse\n      }, {\n        data: sourcesResponse\n      }, {\n        data: zonesResponse\n      }] = await Promise.all([axios.get('https://api.covid19india.org/data.json'), axios.get('https://api.covid19india.org/state_district_wise.json'), axios.get('https://api.covid19india.org/states_daily.json'), axios.get('https://api.covid19india.org/state_test_data.json'), axios.get('https://api.covid19india.org/sources_list.json'), axios.get('https://api.covid19india.org/zones.json')]);\n      const states = dataResponse.statewise;\n      setAllStateData(states.filter(state => state.statecode !== stateCode));\n      setStateData([states.find(s => s.statecode === stateCode)]); // Timeseries\n\n      const ts = parseStateTimeseries(statesDailyResponse)[stateCode];\n      const testTs = parseStateTestTimeseries(stateTestResponse.states_tested_data)[stateCode]; // Merge\n\n      const tsMerged = mergeTimeseries({\n        [stateCode]: ts\n      }, {\n        [stateCode]: testTs\n      });\n      setTimeseries(tsMerged[stateCode]); // District data\n\n      setDistrictData({\n        [stateName]: stateDistrictWiseResponse[stateName]\n      });\n      const sourceList = sourcesResponse.sources_list;\n      setSources(sourceList.filter(state => state.statecode === stateCode));\n      const stateTestData = parseStateTestData(stateTestResponse.states_tested_data);\n      setTestData({\n        [stateName]: stateTestData[stateName]\n      });\n      setDistrictZones(parseDistrictZones(zonesResponse.zones, stateName));\n      setFetched(true);\n      anime({\n        targets: '.highlight',\n        duration: 200,\n        delay: 3000,\n        translateX: mapOption === 'confirmed' ? `${width * 0}px` : mapOption === 'active' ? `${width * 0.25}px` : mapOption === 'recovered' ? `${width * 0.5}px` : mapOption === 'deceased' ? `${width * 0.75}px` : '0px',\n        easing: 'spring(1, 80, 90, 10)',\n        opacity: 1\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const testObj = testData[stateName];\n  const population = STATE_POPULATIONS[stateName];\n\n  function toggleShowAllDistricts() {\n    setShowAllDistricts(!showAllDistricts);\n  }\n\n  const getGridRowCount = () => {\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\n    const districtCount = districtData[stateName] && Object.keys(districtData[stateName].districtData).length || 0;\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\n    return gridRowCount;\n  };\n\n  const gridRowCount = getGridRowCount();\n\n  if (!stateName) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 12\n      }\n    });\n  } else {\n    var _districtData$stateNa, _districtData$stateNa2;\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Helmet, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    }, \"Coronavirus Outbreak in \", STATE_CODES[stateCode], \" - covid19india.org\"), /*#__PURE__*/React.createElement(\"meta\", {\n      name: \"title\",\n      content: `Coronavirus Outbreak in ${STATE_CODES[stateCode]}: Latest Map and Case Count`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"State\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"state-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumbs, {\n      stateName: stateName,\n      stateCode: stateCode,\n      fetched: fetched,\n      allStateData: allStateData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-left fadeInUp\",\n      style: {\n        animationDelay: '0.3s'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }, t(stateName)), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, \"Last Updated on\", ' ', stateData && Object.keys(stateData[0]).length ? formatDateAbsolute(stateData[0].lastupdatedtime) : '')), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-right fadeInUp\",\n      style: {\n        animationDelay: '0.5s'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, t('Tested')), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }, formatNumber(testObj === null || testObj === void 0 ? void 0 : testObj.totaltested)), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"timestamp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, !isNaN(parse(testObj === null || testObj === void 0 ? void 0 : testObj.updatedon, 'dd/MM/yyyy', new Date())) ? `As of ${format(parse(testObj === null || testObj === void 0 ? void 0 : testObj.updatedon, 'dd/MM/yyyy', new Date()), 'dd MMM')}` : ''), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }\n    }, 'per ', (testObj === null || testObj === void 0 ? void 0 : testObj.totaltested) && /*#__PURE__*/React.createElement(\"a\", {\n      href: testObj === null || testObj === void 0 ? void 0 : testObj.source,\n      target: \"_noblank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }\n    }, \"source\")))), fetched && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-switcher\",\n      ref: mapSwitcher,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `highlight ${mapOption}`,\n      style: {\n        transform: `translateX(${width * 0}px)`,\n        opacity: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clickable\",\n      onClick: () => {\n        setMapOption('confirmed');\n        anime({\n          targets: '.highlight',\n          translateX: `${width * 0}px`,\n          easing: 'spring(1, 80, 90, 10)'\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clickable\",\n      onClick: () => {\n        setMapOption('active');\n        anime({\n          targets: '.highlight',\n          translateX: `${width * 0.25}px`,\n          easing: 'spring(1, 80, 90, 10)'\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clickable\",\n      onClick: () => {\n        setMapOption('recovered');\n        anime({\n          targets: '.highlight',\n          translateX: `${width * 0.5}px`,\n          easing: 'spring(1, 80, 90, 10)'\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clickable\",\n      onClick: () => {\n        setMapOption('deceased');\n        anime({\n          targets: '.highlight',\n          translateX: `${width * 0.75}px`,\n          easing: 'spring(1, 80, 90, 10)'\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }\n    })), fetched && /*#__PURE__*/React.createElement(Level, {\n      data: stateData[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 25\n      }\n    }), fetched && /*#__PURE__*/React.createElement(Minigraph, {\n      timeseries: timeseries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 25\n      }\n    }), fetched && /*#__PURE__*/React.createElement(MapExplorer, {\n      mapName: stateName,\n      states: stateData,\n      districts: districtData,\n      zones: districtZones,\n      stateTestData: testData,\n      regionHighlighted: regionHighlighted,\n      setRegionHighlighted: setRegionHighlighted,\n      mapOption: mapOption,\n      isCountryLoaded: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 15\n      }\n    }), fetched && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"meta-secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Icon.AlertCircle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 19\n      }\n    }, \"Awaiting district details for\", ' ', ((_districtData$stateNa = districtData[stateName]) === null || _districtData$stateNa === void 0 ? void 0 : (_districtData$stateNa2 = _districtData$stateNa.districtData['Unknown']) === null || _districtData$stateNa2 === void 0 ? void 0 : _districtData$stateNa2.confirmed) || '0', ' ', \"cases\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Icon.Compass, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 19\n      }\n    }, \"Data collected from sources\", ' ', sources.length > 0 ? Object.keys(sources[0]).map((key, index) => {\n      if (key.match('source') && sources[0][key] !== '') {\n        const num = key.match(/\\d+/);\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 31\n          }\n        }, num > 1 ? ',' : '', /*#__PURE__*/React.createElement(\"a\", {\n          href: sources[0][key],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 33\n          }\n        }, num));\n      }\n\n      return null;\n    }) : ''))), fetched && /*#__PURE__*/React.createElement(StateMeta, {\n      stateData: stateData[0],\n      testObject: testObj,\n      population: population,\n      lastSevenDaysData: timeseries.slice(-7),\n      totalData: allStateData.filter(state => state.statecode === 'TT'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 15\n      }\n    }), fetched && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Clusters fadeInUp\",\n      style: {\n        animationDelay: '0.8s'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }\n    }, \"Network of Transmission\"), /*#__PURE__*/React.createElement(Clusters, {\n      stateCode: stateCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"state-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }\n    }, fetched && /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"district-bar\",\n      style: !showAllDistricts ? {\n        display: 'flex'\n      } : {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"district-bar-left fadeInUp\",\n      style: {\n        animationDelay: '0.6s'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: mapOption,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 21\n      }\n    }, \"Top districts\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: `districts ${showAllDistricts ? 'is-grid' : ''}`,\n      style: showAllDistricts ? {\n        gridTemplateRows: `repeat(${gridRowCount}, 2rem)`\n      } : {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }\n    }, districtData[stateName] ? Object.keys(districtData[stateName].districtData).filter(d => d !== 'Unknown').sort((a, b) => {\n      const districtB = districtData[stateName].districtData[b];\n      const districtA = districtData[stateName].districtData[a];\n      return districtB[mapOption] - districtA[mapOption];\n    }).slice(0, showAllDistricts ? undefined : 5).map((district, index) => {\n      const cases = districtData[stateName].districtData[district];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"district\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 35\n        }\n      }, cases[mapOption]), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 35\n        }\n      }, t(district)), mapOption !== 'active' && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"delta\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Icon.ArrowUp, {\n        className: mapOption,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 39\n        }\n      }), /*#__PURE__*/React.createElement(\"h6\", {\n        className: mapOption,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 39\n        }\n      }, cases.delta[mapOption])));\n    }) : ''), districtData[stateName] && Object.keys(districtData[stateName].districtData).length > 5 && /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: toggleShowAllDistricts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 25\n      }\n    }, showAllDistricts ? `View less` : `View all`)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"district-bar-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 19\n      }\n    }, (mapOption === 'confirmed' || mapOption === 'deceased') && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"happy-sign fadeInUp\",\n      style: {\n        animationDelay: '0.6s'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 23\n      }\n    }, timeseries.slice(-5).every(day => day[`daily${mapOption}`] === 0) && /*#__PURE__*/React.createElement(\"div\", {\n      className: `alert ${mapOption === 'confirmed' ? 'is-green' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Icon.Smile, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 29\n      }\n    }, \"No new \", mapOption, \" cases in the past five days\"))), /*#__PURE__*/React.createElement(DeltaBarGraph, {\n      timeseries: timeseries.slice(-5),\n      caseType: `daily${mapOption}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 23\n      }\n    }))), /*#__PURE__*/React.createElement(TimeSeriesExplorer, {\n      timeseries: timeseries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n\nexport default React.memo(State);","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/components/state.js"],"names":["Clusters","DeltaBarGraph","Footer","Level","MapExplorer","Minigraph","StateMeta","TimeSeriesExplorer","STATE_CODES","STATE_POPULATIONS","formatDateAbsolute","formatNumber","mergeTimeseries","parseStateTimeseries","parseStateTestData","parseStateTestTimeseries","parseDistrictZones","Breadcrumb","Dropdown","anime","axios","format","parse","React","useState","Icon","Helmet","useTranslation","Link","useParams","Redirect","useMeasure","useEffectOnce","PureBreadcrumbs","stateName","stateCode","fetched","allStateData","t","map","state","statecode","Breadcrumbs","memo","State","props","toUpperCase","setAllStateData","setFetched","districtZones","setDistrictZones","timeseries","setTimeseries","stateData","setStateData","testData","setTestData","sources","setSources","districtData","setDistrictData","mapOption","setMapOption","mapSwitcher","width","showAllDistricts","setShowAllDistricts","regionHighlighted","setRegionHighlighted","getState","data","dataResponse","stateDistrictWiseResponse","statesDailyResponse","stateTestResponse","sourcesResponse","zonesResponse","Promise","all","get","states","statewise","filter","find","s","ts","testTs","states_tested_data","tsMerged","sourceList","sources_list","stateTestData","zones","targets","duration","delay","translateX","easing","opacity","err","console","log","testObj","population","toggleShowAllDistricts","getGridRowCount","gridColumnCount","window","innerWidth","districtCount","Object","keys","length","gridRowCount","Math","ceil","animationDelay","lastupdatedtime","totaltested","isNaN","updatedon","Date","source","transform","confirmed","key","index","match","num","slice","display","gridTemplateRows","d","sort","a","b","districtB","districtA","undefined","district","cases","delta","every","day"],"mappings":"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","sourcesContent":["import Clusters from './clusters';\r\nimport DeltaBarGraph from './deltabargraph';\r\nimport Footer from './footer';\r\nimport Level from './level';\r\nimport MapExplorer from './mapexplorer';\r\nimport Minigraph from './minigraph';\r\nimport StateMeta from './statemeta';\r\nimport TimeSeriesExplorer from './timeseriesexplorer';\r\n\r\nimport {STATE_CODES, STATE_POPULATIONS} from '../constants';\r\nimport {\r\n  formatDateAbsolute,\r\n  formatNumber,\r\n  mergeTimeseries,\r\n  parseStateTimeseries,\r\n  parseStateTestData,\r\n  parseStateTestTimeseries,\r\n  parseDistrictZones,\r\n} from '../utils/commonfunctions';\r\n\r\nimport Breadcrumb from '@primer/components/lib/Breadcrumb';\r\nimport Dropdown from '@primer/components/lib/Dropdown';\r\nimport anime from 'animejs';\r\nimport axios from 'axios';\r\nimport {format, parse} from 'date-fns';\r\nimport React, {useState} from 'react';\r\nimport * as Icon from 'react-feather';\r\nimport {Helmet} from 'react-helmet';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {Link, useParams, Redirect} from 'react-router-dom';\r\nimport {useMeasure, useEffectOnce} from 'react-use';\r\n\r\nfunction PureBreadcrumbs({stateName, stateCode, fetched, allStateData}) {\r\n  const {t} = useTranslation();\r\n\r\n  return (\r\n    <div className=\"breadcrumb\">\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">{t('Home')}</Breadcrumb.Item>\r\n        <Dropdown direction=\"w\">\r\n          <summary>\r\n            <Breadcrumb.Item href={`${stateCode}`} selected>\r\n              {t(stateName)}\r\n            </Breadcrumb.Item>\r\n            <Dropdown.Caret className=\"caret\" />\r\n          </summary>\r\n          {fetched && (\r\n            <Dropdown.Menu direction=\"se\">\r\n              {allStateData.map((state) => (\r\n                <Dropdown.Item key={state.statecode} className=\"item\">\r\n                  <Link to={`${state.statecode}`}>\r\n                    {t(STATE_CODES[state.statecode])}\r\n                  </Link>\r\n                </Dropdown.Item>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          )}\r\n        </Dropdown>\r\n      </Breadcrumb>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Breadcrumbs = React.memo(PureBreadcrumbs);\r\n\r\nfunction State(props) {\r\n  const stateCode = useParams().stateCode.toUpperCase();\r\n  const stateName = STATE_CODES[stateCode];\r\n\r\n  const [allStateData, setAllStateData] = useState({});\r\n  const [fetched, setFetched] = useState(false);\r\n  const [districtZones, setDistrictZones] = useState(null);\r\n  const [timeseries, setTimeseries] = useState({});\r\n  const [stateData, setStateData] = useState(null);\r\n  const [testData, setTestData] = useState({});\r\n  const [sources, setSources] = useState({});\r\n  const [districtData, setDistrictData] = useState({});\r\n  const [mapOption, setMapOption] = useState('confirmed');\r\n  const [mapSwitcher, {width}] = useMeasure();\r\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\r\n  const [regionHighlighted, setRegionHighlighted] = useState({\r\n    state: stateName,\r\n  });\r\n\r\n  useEffectOnce(() => {\r\n    getState();\r\n  });\r\n\r\n  const {t} = useTranslation();\r\n\r\n  const getState = async () => {\r\n    try {\r\n      const [\r\n        {data: dataResponse},\r\n        {data: stateDistrictWiseResponse},\r\n        {data: statesDailyResponse},\r\n        {data: stateTestResponse},\r\n        {data: sourcesResponse},\r\n        {data: zonesResponse},\r\n      ] = await Promise.all([\r\n        axios.get('https://api.covid19india.org/data.json'),\r\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\r\n        axios.get('https://api.covid19india.org/states_daily.json'),\r\n        axios.get('https://api.covid19india.org/state_test_data.json'),\r\n        axios.get('https://api.covid19india.org/sources_list.json'),\r\n        axios.get('https://api.covid19india.org/zones.json'),\r\n      ]);\r\n      const states = dataResponse.statewise;\r\n      setAllStateData(states.filter((state) => state.statecode !== stateCode));\r\n      setStateData([states.find((s) => s.statecode === stateCode)]);\r\n      // Timeseries\r\n      const ts = parseStateTimeseries(statesDailyResponse)[stateCode];\r\n      const testTs = parseStateTestTimeseries(\r\n        stateTestResponse.states_tested_data\r\n      )[stateCode];\r\n      // Merge\r\n      const tsMerged = mergeTimeseries(\r\n        {[stateCode]: ts},\r\n        {[stateCode]: testTs}\r\n      );\r\n      setTimeseries(tsMerged[stateCode]);\r\n      // District data\r\n      setDistrictData({\r\n        [stateName]: stateDistrictWiseResponse[stateName],\r\n      });\r\n      const sourceList = sourcesResponse.sources_list;\r\n      setSources(sourceList.filter((state) => state.statecode === stateCode));\r\n\r\n      const stateTestData = parseStateTestData(\r\n        stateTestResponse.states_tested_data\r\n      );\r\n      setTestData({[stateName]: stateTestData[stateName]});\r\n\r\n      setDistrictZones(parseDistrictZones(zonesResponse.zones, stateName));\r\n\r\n      setFetched(true);\r\n      anime({\r\n        targets: '.highlight',\r\n        duration: 200,\r\n        delay: 3000,\r\n        translateX:\r\n          mapOption === 'confirmed'\r\n            ? `${width * 0}px`\r\n            : mapOption === 'active'\r\n            ? `${width * 0.25}px`\r\n            : mapOption === 'recovered'\r\n            ? `${width * 0.5}px`\r\n            : mapOption === 'deceased'\r\n            ? `${width * 0.75}px`\r\n            : '0px',\r\n        easing: 'spring(1, 80, 90, 10)',\r\n        opacity: 1,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const testObj = testData[stateName];\r\n  const population = STATE_POPULATIONS[stateName];\r\n\r\n  function toggleShowAllDistricts() {\r\n    setShowAllDistricts(!showAllDistricts);\r\n  }\r\n\r\n  const getGridRowCount = () => {\r\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\r\n    const districtCount =\r\n      (districtData[stateName] &&\r\n        Object.keys(districtData[stateName].districtData).length) ||\r\n      0;\r\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\r\n    return gridRowCount;\r\n  };\r\n  const gridRowCount = getGridRowCount();\r\n\r\n  if (!stateName) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    return (\r\n      <React.Fragment>\r\n        <Helmet>\r\n          <title>\r\n            Coronavirus Outbreak in {STATE_CODES[stateCode]} - covid19india.org\r\n          </title>\r\n          <meta\r\n            name=\"title\"\r\n            content={`Coronavirus Outbreak in ${STATE_CODES[stateCode]}: Latest Map and Case Count`}\r\n          />\r\n        </Helmet>\r\n\r\n        <div className=\"State\">\r\n          <div className=\"state-left\">\r\n            <Breadcrumbs\r\n              stateName={stateName}\r\n              stateCode={stateCode}\r\n              fetched={fetched}\r\n              allStateData={allStateData}\r\n            />\r\n\r\n            <div className=\"header\">\r\n              <div\r\n                className=\"header-left fadeInUp\"\r\n                style={{animationDelay: '0.3s'}}\r\n              >\r\n                <h1>{t(stateName)}</h1>\r\n                <h5>\r\n                  Last Updated on{' '}\r\n                  {stateData && Object.keys(stateData[0]).length\r\n                    ? formatDateAbsolute(stateData[0].lastupdatedtime)\r\n                    : ''}\r\n                </h5>\r\n              </div>\r\n\r\n              <div\r\n                className=\"header-right fadeInUp\"\r\n                style={{animationDelay: '0.5s'}}\r\n              >\r\n                <h5>{t('Tested')}</h5>\r\n                <h2>{formatNumber(testObj?.totaltested)}</h2>\r\n                <h5 className=\"timestamp\">\r\n                  {!isNaN(parse(testObj?.updatedon, 'dd/MM/yyyy', new Date()))\r\n                    ? `As of ${format(\r\n                        parse(testObj?.updatedon, 'dd/MM/yyyy', new Date()),\r\n                        'dd MMM'\r\n                      )}`\r\n                    : ''}\r\n                </h5>\r\n                <h5>\r\n                  {'per '}\r\n                  {testObj?.totaltested && (\r\n                    <a href={testObj?.source} target=\"_noblank\">\r\n                      source\r\n                    </a>\r\n                  )}\r\n                </h5>\r\n              </div>\r\n            </div>\r\n\r\n            {fetched && (\r\n              <div className=\"map-switcher\" ref={mapSwitcher}>\r\n                <div\r\n                  className={`highlight ${mapOption}`}\r\n                  style={{\r\n                    transform: `translateX(${width * 0}px)`,\r\n                    opacity: 0,\r\n                  }}\r\n                ></div>\r\n                <div\r\n                  className=\"clickable\"\r\n                  onClick={() => {\r\n                    setMapOption('confirmed');\r\n                    anime({\r\n                      targets: '.highlight',\r\n                      translateX: `${width * 0}px`,\r\n                      easing: 'spring(1, 80, 90, 10)',\r\n                    });\r\n                  }}\r\n                ></div>\r\n                <div\r\n                  className=\"clickable\"\r\n                  onClick={() => {\r\n                    setMapOption('active');\r\n                    anime({\r\n                      targets: '.highlight',\r\n                      translateX: `${width * 0.25}px`,\r\n                      easing: 'spring(1, 80, 90, 10)',\r\n                    });\r\n                  }}\r\n                ></div>\r\n                <div\r\n                  className=\"clickable\"\r\n                  onClick={() => {\r\n                    setMapOption('recovered');\r\n                    anime({\r\n                      targets: '.highlight',\r\n                      translateX: `${width * 0.5}px`,\r\n                      easing: 'spring(1, 80, 90, 10)',\r\n                    });\r\n                  }}\r\n                ></div>\r\n                <div\r\n                  className=\"clickable\"\r\n                  onClick={() => {\r\n                    setMapOption('deceased');\r\n                    anime({\r\n                      targets: '.highlight',\r\n                      translateX: `${width * 0.75}px`,\r\n                      easing: 'spring(1, 80, 90, 10)',\r\n                    });\r\n                  }}\r\n                ></div>\r\n              </div>\r\n            )}\r\n\r\n            {fetched && <Level data={stateData[0]} />}\r\n            {fetched && <Minigraph timeseries={timeseries} />}\r\n            {fetched && (\r\n              <MapExplorer\r\n                mapName={stateName}\r\n                states={stateData}\r\n                districts={districtData}\r\n                zones={districtZones}\r\n                stateTestData={testData}\r\n                regionHighlighted={regionHighlighted}\r\n                setRegionHighlighted={setRegionHighlighted}\r\n                mapOption={mapOption}\r\n                isCountryLoaded={false}\r\n              />\r\n            )}\r\n\r\n            {fetched && (\r\n              <div className=\"meta-secondary\">\r\n                <div className=\"alert\">\r\n                  <Icon.AlertCircle />\r\n                  <div className=\"alert-right\">\r\n                    Awaiting district details for{' '}\r\n                    {districtData[stateName]?.districtData['Unknown']\r\n                      ?.confirmed || '0'}{' '}\r\n                    cases\r\n                  </div>\r\n                </div>\r\n                <div className=\"alert\">\r\n                  <Icon.Compass />\r\n                  <div className=\"alert-right\">\r\n                    Data collected from sources{' '}\r\n                    {sources.length > 0\r\n                      ? Object.keys(sources[0]).map((key, index) => {\r\n                          if (key.match('source') && sources[0][key] !== '') {\r\n                            const num = key.match(/\\d+/);\r\n                            return (\r\n                              <React.Fragment key={index}>\r\n                                {num > 1 ? ',' : ''}\r\n                                <a href={sources[0][key]}>{num}</a>\r\n                              </React.Fragment>\r\n                            );\r\n                          }\r\n                          return null;\r\n                        })\r\n                      : ''}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {fetched && (\r\n              <StateMeta\r\n                stateData={stateData[0]}\r\n                testObject={testObj}\r\n                population={population}\r\n                lastSevenDaysData={timeseries.slice(-7)}\r\n                totalData={allStateData.filter(\r\n                  (state) => state.statecode === 'TT'\r\n                )}\r\n              />\r\n            )}\r\n\r\n            {fetched && (\r\n              <div\r\n                className=\"Clusters fadeInUp\"\r\n                style={{animationDelay: '0.8s'}}\r\n              >\r\n                <h1>Network of Transmission</h1>\r\n                <Clusters stateCode={stateCode} />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"state-right\">\r\n            {fetched && (\r\n              <React.Fragment>\r\n                <div\r\n                  className=\"district-bar\"\r\n                  style={!showAllDistricts ? {display: 'flex'} : {}}\r\n                >\r\n                  <div\r\n                    className=\"district-bar-left fadeInUp\"\r\n                    style={{animationDelay: '0.6s'}}\r\n                  >\r\n                    <h2 className={mapOption}>Top districts</h2>\r\n                    <div\r\n                      className={`districts ${\r\n                        showAllDistricts ? 'is-grid' : ''\r\n                      }`}\r\n                      style={\r\n                        showAllDistricts\r\n                          ? {gridTemplateRows: `repeat(${gridRowCount}, 2rem)`}\r\n                          : {}\r\n                      }\r\n                    >\r\n                      {districtData[stateName]\r\n                        ? Object.keys(districtData[stateName].districtData)\r\n                            .filter((d) => d !== 'Unknown')\r\n                            .sort((a, b) => {\r\n                              const districtB =\r\n                                districtData[stateName].districtData[b];\r\n                              const districtA =\r\n                                districtData[stateName].districtData[a];\r\n                              return (\r\n                                districtB[mapOption] - districtA[mapOption]\r\n                              );\r\n                            })\r\n                            .slice(0, showAllDistricts ? undefined : 5)\r\n                            .map((district, index) => {\r\n                              const cases =\r\n                                districtData[stateName].districtData[district];\r\n                              return (\r\n                                <div key={index} className=\"district\">\r\n                                  <h2>{cases[mapOption]}</h2>\r\n                                  <h5>{t(district)}</h5>\r\n                                  {mapOption !== 'active' && (\r\n                                    <div className=\"delta\">\r\n                                      <Icon.ArrowUp className={mapOption} />\r\n                                      <h6 className={mapOption}>\r\n                                        {cases.delta[mapOption]}\r\n                                      </h6>\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                              );\r\n                            })\r\n                        : ''}\r\n                    </div>\r\n                    {districtData[stateName] &&\r\n                      Object.keys(districtData[stateName].districtData).length >\r\n                        5 && (\r\n                        <button\r\n                          className=\"button\"\r\n                          onClick={toggleShowAllDistricts}\r\n                        >\r\n                          {showAllDistricts ? `View less` : `View all`}\r\n                        </button>\r\n                      )}\r\n                  </div>\r\n                  <div className=\"district-bar-right\">\r\n                    {(mapOption === 'confirmed' ||\r\n                      mapOption === 'deceased') && (\r\n                      <div\r\n                        className=\"happy-sign fadeInUp\"\r\n                        style={{animationDelay: '0.6s'}}\r\n                      >\r\n                        {timeseries\r\n                          .slice(-5)\r\n                          .every((day) => day[`daily${mapOption}`] === 0) && (\r\n                          <div\r\n                            className={`alert ${\r\n                              mapOption === 'confirmed' ? 'is-green' : ''\r\n                            }`}\r\n                          >\r\n                            <Icon.Smile />\r\n                            <div className=\"alert-right\">\r\n                              No new {mapOption} cases in the past five days\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                    {\r\n                      <DeltaBarGraph\r\n                        timeseries={timeseries.slice(-5)}\r\n                        caseType={`daily${mapOption}`}\r\n                      />\r\n                    }\r\n                  </div>\r\n                </div>\r\n                <TimeSeriesExplorer timeseries={timeseries} />\r\n              </React.Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default React.memo(State);\r\n"]},"metadata":{},"sourceType":"module"}