{"ast":null,"code":"var marginRE = /^-?\\d*\\.?\\d+(px|%)$/;\nexport function parseRootMargin(rootMargin) {\n  var marginString = rootMargin ? rootMargin.trim() : '0px';\n\n  var _marginString$split$m = marginString.split(/\\s+/).map(function (margin) {\n    if (!marginRE.test(margin)) {\n      throw new Error('rootMargin must be a string literal containing pixels and/or percent values');\n    }\n\n    return margin;\n  }),\n      _marginString$split$m2 = _marginString$split$m[0],\n      m0 = _marginString$split$m2 === void 0 ? '0px' : _marginString$split$m2,\n      _marginString$split$m3 = _marginString$split$m[1],\n      m1 = _marginString$split$m3 === void 0 ? m0 : _marginString$split$m3,\n      _marginString$split$m4 = _marginString$split$m[2],\n      m2 = _marginString$split$m4 === void 0 ? m0 : _marginString$split$m4,\n      _marginString$split$m5 = _marginString$split$m[3],\n      m3 = _marginString$split$m5 === void 0 ? m1 : _marginString$split$m5;\n\n  return m0 + \" \" + m1 + \" \" + m2 + \" \" + m3;\n}\nexport function shallowCompare(next, prev) {\n  if (Array.isArray(next) && Array.isArray(prev)) {\n    if (next.length === prev.length) {\n      return next.some(function (_, index) {\n        return shallowCompare(next[index], prev[index]);\n      });\n    }\n  }\n\n  return next !== prev;\n}","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/node_modules/@researchgate/react-intersection-observer/lib/es/utils.js"],"names":["marginRE","parseRootMargin","rootMargin","marginString","trim","_marginString$split$m","split","map","margin","test","Error","_marginString$split$m2","m0","_marginString$split$m3","m1","_marginString$split$m4","m2","_marginString$split$m5","m3","shallowCompare","next","prev","Array","isArray","length","some","_","index"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,qBAAf;AACA,OAAO,SAASC,eAAT,CAAyBC,UAAzB,EAAqC;AAC1C,MAAIC,YAAY,GAAGD,UAAU,GAAGA,UAAU,CAACE,IAAX,EAAH,GAAuB,KAApD;;AAEA,MAAIC,qBAAqB,GAAGF,YAAY,CAACG,KAAb,CAAmB,KAAnB,EAA0BC,GAA1B,CAA8B,UAAUC,MAAV,EAAkB;AAC1E,QAAI,CAACR,QAAQ,CAACS,IAAT,CAAcD,MAAd,CAAL,EAA4B;AAC1B,YAAM,IAAIE,KAAJ,CAAU,6EAAV,CAAN;AACD;;AAED,WAAOF,MAAP;AACD,GAN2B,CAA5B;AAAA,MAOIG,sBAAsB,GAAGN,qBAAqB,CAAC,CAAD,CAPlD;AAAA,MAQIO,EAAE,GAAGD,sBAAsB,KAAK,KAAK,CAAhC,GAAoC,KAApC,GAA4CA,sBARrD;AAAA,MASIE,sBAAsB,GAAGR,qBAAqB,CAAC,CAAD,CATlD;AAAA,MAUIS,EAAE,GAAGD,sBAAsB,KAAK,KAAK,CAAhC,GAAoCD,EAApC,GAAyCC,sBAVlD;AAAA,MAWIE,sBAAsB,GAAGV,qBAAqB,CAAC,CAAD,CAXlD;AAAA,MAYIW,EAAE,GAAGD,sBAAsB,KAAK,KAAK,CAAhC,GAAoCH,EAApC,GAAyCG,sBAZlD;AAAA,MAaIE,sBAAsB,GAAGZ,qBAAqB,CAAC,CAAD,CAblD;AAAA,MAcIa,EAAE,GAAGD,sBAAsB,KAAK,KAAK,CAAhC,GAAoCH,EAApC,GAAyCG,sBAdlD;;AAgBA,SAAOL,EAAE,GAAG,GAAL,GAAWE,EAAX,GAAgB,GAAhB,GAAsBE,EAAtB,GAA2B,GAA3B,GAAiCE,EAAxC;AACD;AACD,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AACzC,MAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,KAAuBE,KAAK,CAACC,OAAN,CAAcF,IAAd,CAA3B,EAAgD;AAC9C,QAAID,IAAI,CAACI,MAAL,KAAgBH,IAAI,CAACG,MAAzB,EAAiC;AAC/B,aAAOJ,IAAI,CAACK,IAAL,CAAU,UAAUC,CAAV,EAAaC,KAAb,EAAoB;AACnC,eAAOR,cAAc,CAACC,IAAI,CAACO,KAAD,CAAL,EAAcN,IAAI,CAACM,KAAD,CAAlB,CAArB;AACD,OAFM,CAAP;AAGD;AACF;;AAED,SAAOP,IAAI,KAAKC,IAAhB;AACD","sourcesContent":["var marginRE = /^-?\\d*\\.?\\d+(px|%)$/;\nexport function parseRootMargin(rootMargin) {\n  var marginString = rootMargin ? rootMargin.trim() : '0px';\n\n  var _marginString$split$m = marginString.split(/\\s+/).map(function (margin) {\n    if (!marginRE.test(margin)) {\n      throw new Error('rootMargin must be a string literal containing pixels and/or percent values');\n    }\n\n    return margin;\n  }),\n      _marginString$split$m2 = _marginString$split$m[0],\n      m0 = _marginString$split$m2 === void 0 ? '0px' : _marginString$split$m2,\n      _marginString$split$m3 = _marginString$split$m[1],\n      m1 = _marginString$split$m3 === void 0 ? m0 : _marginString$split$m3,\n      _marginString$split$m4 = _marginString$split$m[2],\n      m2 = _marginString$split$m4 === void 0 ? m0 : _marginString$split$m4,\n      _marginString$split$m5 = _marginString$split$m[3],\n      m3 = _marginString$split$m5 === void 0 ? m1 : _marginString$split$m5;\n\n  return m0 + \" \" + m1 + \" \" + m2 + \" \" + m3;\n}\nexport function shallowCompare(next, prev) {\n  if (Array.isArray(next) && Array.isArray(prev)) {\n    if (next.length === prev.length) {\n      return next.some(function (_, index) {\n        return shallowCompare(next[index], prev[index]);\n      });\n    }\n  }\n\n  return next !== prev;\n}"]},"metadata":{},"sourceType":"module"}