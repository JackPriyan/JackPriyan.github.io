{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{ResizeObserver}from'@juggle/resize-observer';import{useState,useEffect}from'react';export var useResizeObserver=function useResizeObserver(ref){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),dimensions=_useState2[0],setDimensions=_useState2[1];useEffect(function(){var observeTarget=ref.current;var resizeObserver=new ResizeObserver(function(entries,observer){entries.forEach(function(entry,index){setDimensions(entry.contentRect);});});resizeObserver.observe(observeTarget);return function(){resizeObserver.unobserve(observeTarget);};},[ref]);return dimensions;};","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/utils/hooks.js"],"names":["ResizeObserver","useState","useEffect","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve"],"mappings":"mKAAA,OAAQA,cAAR,KAA6B,yBAA7B,CACA,OAAQC,QAAR,CAAkBC,SAAlB,KAAkC,OAAlC,CAEA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,GAAD,CAAS,eACJH,QAAQ,CAAC,IAAD,CADJ,wCACjCI,UADiC,eACrBC,aADqB,eAExCJ,SAAS,CAAC,UAAM,CACd,GAAMK,CAAAA,aAAa,CAAGH,GAAG,CAACI,OAA1B,CACA,GAAMC,CAAAA,cAAc,CAAG,GAAIT,CAAAA,cAAJ,CAAmB,SAACU,OAAD,CAAUC,QAAV,CAAuB,CAC/DD,OAAO,CAACE,OAAR,CAAgB,SAACC,KAAD,CAAQC,KAAR,CAAkB,CAChCR,aAAa,CAACO,KAAK,CAACE,WAAP,CAAb,CACD,CAFD,EAGD,CAJsB,CAAvB,CAKAN,cAAc,CAACO,OAAf,CAAuBT,aAAvB,EACA,MAAO,WAAM,CACXE,cAAc,CAACQ,SAAf,CAAyBV,aAAzB,EACD,CAFD,CAGD,CAXQ,CAWN,CAACH,GAAD,CAXM,CAAT,CAYA,MAAOC,CAAAA,UAAP,CACD,CAfM","sourcesContent":["import {ResizeObserver} from '@juggle/resize-observer';\r\nimport {useState, useEffect} from 'react';\r\n\r\nexport const useResizeObserver = (ref) => {\r\n  const [dimensions, setDimensions] = useState(null);\r\n  useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver((entries, observer) => {\r\n      entries.forEach((entry, index) => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n    resizeObserver.observe(observeTarget);\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}