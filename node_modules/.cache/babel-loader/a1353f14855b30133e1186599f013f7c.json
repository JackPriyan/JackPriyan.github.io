{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\src\\\\components\\\\timeseriesexplorer.js\";\nimport TimeSeries from './timeseries';\nimport 'intersection-observer';\nimport Observer from '@researchgate/react-intersection-observer';\nimport equal from 'fast-deep-equal';\nimport React, { useState } from 'react';\nimport * as Icon from 'react-feather';\nimport { useTranslation } from 'react-i18next';\nimport { useLocalStorage } from 'react-use';\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.activeStateCode, prevProps.activeStateCode)) {\n    return false;\n  }\n\n  if (!equal(currProps.anchor, prevProps.anchor)) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction TimeSeriesExplorer({\n  timeseries,\n  activeStateCode,\n  onHighlightState,\n  states,\n  anchor,\n  setAnchor\n}) {\n  const [chartType, setChartType] = useLocalStorage('timeseriesChartType', 1);\n  const [isTimeseriesIntersecting, setIsTimeseriesIntersecting] = useState(false);\n  const [timeseriesMode, setTimeseriesMode] = useLocalStorage('timeseriesMode', true);\n  const [timeseriesLogMode, setTimeseriesLogMode] = useLocalStorage('timeseriesLogMode', false);\n  const {\n    t\n  } = useTranslation();\n  const options = {\n    rootMargin: '0px 0px 0px 0px'\n  };\n  return /*#__PURE__*/React.createElement(Observer, {\n    options: options,\n    onChange: ({\n      isIntersecting\n    }) => setIsTimeseriesIntersecting(isIntersecting),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `TimeSeriesExplorer ${anchor === 'timeseries' ? 'stickied' : ''}`,\n    style: {\n      display: anchor === 'mapexplorer' ? 'none' : ''\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timeseries-header fadeInUp\",\n    style: {\n      animationDelay: '2.5s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, window.innerWidth > 769 && anchor !== undefined && /*#__PURE__*/React.createElement(\"div\", {\n    className: `anchor ${anchor === 'timeseries' ? 'stickied' : ''}`,\n    onClick: () => {\n      setAnchor(anchor === 'timeseries' ? null : 'timeseries');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon.Anchor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, t('Spread Trends')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tabs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `tab ${chartType === 1 ? 'focused' : ''}`,\n    onClick: () => {\n      setChartType(1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, t('Cumulative'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `tab ${chartType === 2 ? 'focused' : ''}`,\n    onClick: () => {\n      setChartType(2);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, t('Daily')))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scale-modes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, t('Scale Modes')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timeseries-mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"timeseries-mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, t('Uniform')), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"timeseries-mode\",\n    type: \"checkbox\",\n    checked: timeseriesMode,\n    className: \"switch\",\n    \"aria-label\": t('Checked by default to scale uniformly.'),\n    onChange: event => {\n      setTimeseriesMode(!timeseriesMode);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: `timeseries-logmode ${chartType !== 1 ? 'disabled' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"timeseries-logmode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, t('Logarithmic')), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"timeseries-logmode\",\n    type: \"checkbox\",\n    checked: chartType === 1 && timeseriesLogMode,\n    className: \"switch\",\n    disabled: chartType !== 1,\n    onChange: event => {\n      setTimeseriesLogMode(!timeseriesLogMode);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }))), states && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trends-state-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: activeStateCode,\n    onChange: ({\n      target\n    }) => {\n      const selectedState = target.selectedOptions[0].getAttribute('statedata');\n      onHighlightState(JSON.parse(selectedState));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }, states.map(s => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: s.statecode,\n      key: s.statecode,\n      statedata: JSON.stringify(s),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, s.statecode === 'TT' ? t('All States') : t(s.state));\n  })))), timeseries && /*#__PURE__*/React.createElement(TimeSeries, {\n    timeseriesProp: timeseries,\n    chartType: chartType,\n    mode: timeseriesMode,\n    logMode: timeseriesLogMode,\n    stateCode: activeStateCode,\n    isIntersecting: isTimeseriesIntersecting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon.AlertOctagon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, t('Tested chart is independent of uniform scaling')))));\n}\n\nexport default React.memo(TimeSeriesExplorer, isEqual);","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/src/components/timeseriesexplorer.js"],"names":["TimeSeries","Observer","equal","React","useState","Icon","useTranslation","useLocalStorage","isEqual","prevProps","currProps","activeStateCode","anchor","TimeSeriesExplorer","timeseries","onHighlightState","states","setAnchor","chartType","setChartType","isTimeseriesIntersecting","setIsTimeseriesIntersecting","timeseriesMode","setTimeseriesMode","timeseriesLogMode","setTimeseriesLogMode","t","options","rootMargin","isIntersecting","display","animationDelay","window","innerWidth","undefined","event","target","selectedState","selectedOptions","getAttribute","JSON","parse","map","s","statecode","stringify","state","memo"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,cAAvB;AAEA,OAAO,uBAAP;AACA,OAAOC,QAAP,MAAqB,2CAArB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,KAAKC,IAAZ,MAAsB,eAAtB;AACA,SAAQC,cAAR,QAA6B,eAA7B;AACA,SAAQC,eAAR,QAA8B,WAA9B;;AAEA,MAAMC,OAAO,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACxC,MAAI,CAACR,KAAK,CAACQ,SAAS,CAACC,eAAX,EAA4BF,SAAS,CAACE,eAAtC,CAAV,EAAkE;AAChE,WAAO,KAAP;AACD;;AACD,MAAI,CAACT,KAAK,CAACQ,SAAS,CAACE,MAAX,EAAmBH,SAAS,CAACG,MAA7B,CAAV,EAAgD;AAC9C,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD,CARD;;AAUA,SAASC,kBAAT,CAA4B;AAC1BC,EAAAA,UAD0B;AAE1BH,EAAAA,eAF0B;AAG1BI,EAAAA,gBAH0B;AAI1BC,EAAAA,MAJ0B;AAK1BJ,EAAAA,MAL0B;AAM1BK,EAAAA;AAN0B,CAA5B,EAOG;AACD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,eAAe,CAAC,qBAAD,EAAwB,CAAxB,CAAjD;AACA,QAAM,CAACa,wBAAD,EAA2BC,2BAA3B,IAA0DjB,QAAQ,CACtE,KADsE,CAAxE;AAIA,QAAM,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsChB,eAAe,CACzD,gBADyD,EAEzD,IAFyD,CAA3D;AAIA,QAAM,CAACiB,iBAAD,EAAoBC,oBAApB,IAA4ClB,eAAe,CAC/D,mBAD+D,EAE/D,KAF+D,CAAjE;AAIA,QAAM;AAACmB,IAAAA;AAAD,MAAMpB,cAAc,EAA1B;AAEA,QAAMqB,OAAO,GAAG;AACdC,IAAAA,UAAU,EAAE;AADE,GAAhB;AAIA,sBACE,oBAAC,QAAD;AACE,IAAA,OAAO,EAAED,OADX;AAEE,IAAA,QAAQ,EAAE,CAAC;AAACE,MAAAA;AAAD,KAAD,KACRR,2BAA2B,CAACQ,cAAD,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AACE,IAAA,SAAS,EAAG,sBACVjB,MAAM,KAAK,YAAX,GAA0B,UAA1B,GAAuC,EACxC,EAHH;AAIE,IAAA,KAAK,EAAE;AAACkB,MAAAA,OAAO,EAAElB,MAAM,KAAK,aAAX,GAA2B,MAA3B,GAAoC;AAA9C,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AACE,IAAA,SAAS,EAAC,4BADZ;AAEE,IAAA,KAAK,EAAE;AAACmB,MAAAA,cAAc,EAAE;AAAjB,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGC,MAAM,CAACC,UAAP,GAAoB,GAApB,IAA2BrB,MAAM,KAAKsB,SAAtC,iBACC;AACE,IAAA,SAAS,EAAG,UAAStB,MAAM,KAAK,YAAX,GAA0B,UAA1B,GAAuC,EAAG,EADjE;AAEE,IAAA,OAAO,EAAE,MAAM;AACbK,MAAAA,SAAS,CAACL,MAAM,KAAK,YAAX,GAA0B,IAA1B,GAAiC,YAAlC,CAAT;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CALJ,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKc,CAAC,CAAC,eAAD,CAAN,CAfF,eAgBE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAG,OAAMR,SAAS,KAAK,CAAd,GAAkB,SAAlB,GAA8B,EAAG,EADrD;AAEE,IAAA,OAAO,EAAE,MAAM;AACbC,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKO,CAAC,CAAC,YAAD,CAAN,CANF,CADF,eASE;AACE,IAAA,SAAS,EAAG,OAAMR,SAAS,KAAK,CAAd,GAAkB,SAAlB,GAA8B,EAAG,EADrD;AAEE,IAAA,OAAO,EAAE,MAAM;AACbC,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKO,CAAC,CAAC,OAAD,CAAN,CANF,CATF,CAhBF,eAmCE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,SAAS,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBA,CAAC,CAAC,aAAD,CAA1B,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCA,CAAC,CAAC,SAAD,CAAnC,CADF,eAEE;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,OAAO,EAAEJ,cAHX;AAIE,IAAA,SAAS,EAAC,QAJZ;AAKE,kBAAYI,CAAC,CAAC,wCAAD,CALf;AAME,IAAA,QAAQ,EAAGS,KAAD,IAAW;AACnBZ,MAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,eAeE;AACE,IAAA,SAAS,EAAG,sBACVJ,SAAS,KAAK,CAAd,GAAkB,UAAlB,GAA+B,EAChC,EAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAO,IAAA,OAAO,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCQ,CAAC,CAAC,aAAD,CAAtC,CALF,eAME;AACE,IAAA,EAAE,EAAC,oBADL;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,OAAO,EAAER,SAAS,KAAK,CAAd,IAAmBM,iBAH9B;AAIE,IAAA,SAAS,EAAC,QAJZ;AAKE,IAAA,QAAQ,EAAEN,SAAS,KAAK,CAL1B;AAME,IAAA,QAAQ,EAAGiB,KAAD,IAAW;AACnBV,MAAAA,oBAAoB,CAAC,CAACD,iBAAF,CAApB;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAfF,CAnCF,EAqEGR,MAAM,iBACL;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAEL,eADT;AAEE,IAAA,QAAQ,EAAE,CAAC;AAACyB,MAAAA;AAAD,KAAD,KAAc;AACtB,YAAMC,aAAa,GAAGD,MAAM,CAACE,eAAP,CAAuB,CAAvB,EAA0BC,YAA1B,CACpB,WADoB,CAAtB;AAGAxB,MAAAA,gBAAgB,CAACyB,IAAI,CAACC,KAAL,CAAWJ,aAAX,CAAD,CAAhB;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGrB,MAAM,CAAC0B,GAAP,CAAYC,CAAD,IAAO;AACjB,wBACE;AACE,MAAA,KAAK,EAAEA,CAAC,CAACC,SADX;AAEE,MAAA,GAAG,EAAED,CAAC,CAACC,SAFT;AAGE,MAAA,SAAS,EAAEJ,IAAI,CAACK,SAAL,CAAeF,CAAf,CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGA,CAAC,CAACC,SAAF,KAAgB,IAAhB,GAAuBlB,CAAC,CAAC,YAAD,CAAxB,GAAyCA,CAAC,CAACiB,CAAC,CAACG,KAAH,CAL7C,CADF;AASD,GAVA,CATH,CADF,CAtEJ,CANF,EAsGGhC,UAAU,iBACT,oBAAC,UAAD;AACE,IAAA,cAAc,EAAEA,UADlB;AAEE,IAAA,SAAS,EAAEI,SAFb;AAGE,IAAA,IAAI,EAAEI,cAHR;AAIE,IAAA,OAAO,EAAEE,iBAJX;AAKE,IAAA,SAAS,EAAEb,eALb;AAME,IAAA,cAAc,EAAES,wBANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvGJ,eAiHE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,YAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,CAAC,CAAC,gDAAD,CADJ,CAFF,CAjHF,CANF,CADF;AAiID;;AAED,eAAevB,KAAK,CAAC4C,IAAN,CAAWlC,kBAAX,EAA+BL,OAA/B,CAAf","sourcesContent":["import TimeSeries from './timeseries';\r\n\r\nimport 'intersection-observer';\r\nimport Observer from '@researchgate/react-intersection-observer';\r\nimport equal from 'fast-deep-equal';\r\nimport React, {useState} from 'react';\r\nimport * as Icon from 'react-feather';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {useLocalStorage} from 'react-use';\r\n\r\nconst isEqual = (prevProps, currProps) => {\r\n  if (!equal(currProps.activeStateCode, prevProps.activeStateCode)) {\r\n    return false;\r\n  }\r\n  if (!equal(currProps.anchor, prevProps.anchor)) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nfunction TimeSeriesExplorer({\r\n  timeseries,\r\n  activeStateCode,\r\n  onHighlightState,\r\n  states,\r\n  anchor,\r\n  setAnchor,\r\n}) {\r\n  const [chartType, setChartType] = useLocalStorage('timeseriesChartType', 1);\r\n  const [isTimeseriesIntersecting, setIsTimeseriesIntersecting] = useState(\r\n    false\r\n  );\r\n\r\n  const [timeseriesMode, setTimeseriesMode] = useLocalStorage(\r\n    'timeseriesMode',\r\n    true\r\n  );\r\n  const [timeseriesLogMode, setTimeseriesLogMode] = useLocalStorage(\r\n    'timeseriesLogMode',\r\n    false\r\n  );\r\n  const {t} = useTranslation();\r\n\r\n  const options = {\r\n    rootMargin: '0px 0px 0px 0px',\r\n  };\r\n\r\n  return (\r\n    <Observer\r\n      options={options}\r\n      onChange={({isIntersecting}) =>\r\n        setIsTimeseriesIntersecting(isIntersecting)\r\n      }\r\n    >\r\n      <div\r\n        className={`TimeSeriesExplorer ${\r\n          anchor === 'timeseries' ? 'stickied' : ''\r\n        }`}\r\n        style={{display: anchor === 'mapexplorer' ? 'none' : ''}}\r\n      >\r\n        <div\r\n          className=\"timeseries-header fadeInUp\"\r\n          style={{animationDelay: '2.5s'}}\r\n        >\r\n          {window.innerWidth > 769 && anchor !== undefined && (\r\n            <div\r\n              className={`anchor ${anchor === 'timeseries' ? 'stickied' : ''}`}\r\n              onClick={() => {\r\n                setAnchor(anchor === 'timeseries' ? null : 'timeseries');\r\n              }}\r\n            >\r\n              <Icon.Anchor />\r\n            </div>\r\n          )}\r\n\r\n          <h1>{t('Spread Trends')}</h1>\r\n          <div className=\"tabs\">\r\n            <div\r\n              className={`tab ${chartType === 1 ? 'focused' : ''}`}\r\n              onClick={() => {\r\n                setChartType(1);\r\n              }}\r\n            >\r\n              <h4>{t('Cumulative')}</h4>\r\n            </div>\r\n            <div\r\n              className={`tab ${chartType === 2 ? 'focused' : ''}`}\r\n              onClick={() => {\r\n                setChartType(2);\r\n              }}\r\n            >\r\n              <h4>{t('Daily')}</h4>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"scale-modes\">\r\n            <label className=\"main\">{t('Scale Modes')}</label>\r\n            <div className=\"timeseries-mode\">\r\n              <label htmlFor=\"timeseries-mode\">{t('Uniform')}</label>\r\n              <input\r\n                id=\"timeseries-mode\"\r\n                type=\"checkbox\"\r\n                checked={timeseriesMode}\r\n                className=\"switch\"\r\n                aria-label={t('Checked by default to scale uniformly.')}\r\n                onChange={(event) => {\r\n                  setTimeseriesMode(!timeseriesMode);\r\n                }}\r\n              />\r\n            </div>\r\n            <div\r\n              className={`timeseries-logmode ${\r\n                chartType !== 1 ? 'disabled' : ''\r\n              }`}\r\n            >\r\n              <label htmlFor=\"timeseries-logmode\">{t('Logarithmic')}</label>\r\n              <input\r\n                id=\"timeseries-logmode\"\r\n                type=\"checkbox\"\r\n                checked={chartType === 1 && timeseriesLogMode}\r\n                className=\"switch\"\r\n                disabled={chartType !== 1}\r\n                onChange={(event) => {\r\n                  setTimeseriesLogMode(!timeseriesLogMode);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {states && (\r\n            <div className=\"trends-state-name\">\r\n              <select\r\n                value={activeStateCode}\r\n                onChange={({target}) => {\r\n                  const selectedState = target.selectedOptions[0].getAttribute(\r\n                    'statedata'\r\n                  );\r\n                  onHighlightState(JSON.parse(selectedState));\r\n                }}\r\n              >\r\n                {states.map((s) => {\r\n                  return (\r\n                    <option\r\n                      value={s.statecode}\r\n                      key={s.statecode}\r\n                      statedata={JSON.stringify(s)}\r\n                    >\r\n                      {s.statecode === 'TT' ? t('All States') : t(s.state)}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {timeseries && (\r\n          <TimeSeries\r\n            timeseriesProp={timeseries}\r\n            chartType={chartType}\r\n            mode={timeseriesMode}\r\n            logMode={timeseriesLogMode}\r\n            stateCode={activeStateCode}\r\n            isIntersecting={isTimeseriesIntersecting}\r\n          />\r\n        )}\r\n\r\n        <div className=\"alert\">\r\n          <Icon.AlertOctagon />\r\n          <div className=\"alert-right\">\r\n            {t('Tested chart is independent of uniform scaling')}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Observer>\r\n  );\r\n}\r\n\r\nexport default React.memo(TimeSeriesExplorer, isEqual);\r\n"]},"metadata":{},"sourceType":"module"}