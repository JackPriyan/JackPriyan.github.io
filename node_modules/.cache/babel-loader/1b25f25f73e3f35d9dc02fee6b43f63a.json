{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Jakith\\\\JackPriyan.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { mutate } from './use-swr';\nimport hash from './libs/hash';\n\nvar Cache = /*#__PURE__*/function () {\n  function Cache() {\n    var initialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Cache);\n\n    this.__cache = new Map(Object.entries(initialData));\n    this.__listeners = [];\n  }\n\n  _createClass(Cache, [{\n    key: \"get\",\n    value: function get(key) {\n      var _this$serializeKey = this.serializeKey(key),\n          _this$serializeKey2 = _slicedToArray(_this$serializeKey, 1),\n          _key = _this$serializeKey2[0];\n\n      return this.__cache.get(_key);\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var shouldNotify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      var _this$serializeKey3 = this.serializeKey(key),\n          _this$serializeKey4 = _slicedToArray(_this$serializeKey3, 1),\n          _key = _this$serializeKey4[0];\n\n      this.__cache.set(_key, value);\n\n      if (shouldNotify) mutate(key, value, false);\n      this.notify();\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return Array.from(this.__cache.keys());\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      var _this$serializeKey5 = this.serializeKey(key),\n          _this$serializeKey6 = _slicedToArray(_this$serializeKey5, 1),\n          _key = _this$serializeKey6[0];\n\n      return this.__cache.has(_key);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var shouldNotify = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (shouldNotify) this.__cache.forEach(function (key) {\n        return mutate(key, null, false);\n      });\n\n      this.__cache.clear();\n\n      this.notify();\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      var shouldNotify = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var _this$serializeKey7 = this.serializeKey(key),\n          _this$serializeKey8 = _slicedToArray(_this$serializeKey7, 1),\n          _key = _this$serializeKey8[0];\n\n      if (shouldNotify) mutate(key, null, false);\n\n      this.__cache.delete(_key);\n\n      this.notify();\n    } // TODO: introduce namespace for the cache\n\n  }, {\n    key: \"serializeKey\",\n    value: function serializeKey(key) {\n      var args = null;\n\n      if (typeof key === 'function') {\n        try {\n          key = key();\n        } catch (err) {\n          // dependencies not ready\n          key = '';\n        }\n      }\n\n      if (Array.isArray(key)) {\n        // args array\n        args = key;\n        key = hash(key);\n      } else {\n        // convert null to ''\n        key = String(key || '');\n      }\n\n      var errorKey = key ? 'err@' + key : '';\n      return [key, args, errorKey];\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(listener) {\n      var _this = this;\n\n      if (typeof listener !== 'function') {\n        throw new Error('Expected the listener to be a function.');\n      }\n\n      var isSubscribed = true;\n\n      this.__listeners.push(listener);\n\n      return function () {\n        if (!isSubscribed) return;\n        isSubscribed = false;\n\n        var index = _this.__listeners.indexOf(listener);\n\n        if (index > -1) {\n          _this.__listeners[index] = _this.__listeners[_this.__listeners.length - 1];\n          _this.__listeners.length--;\n        }\n      };\n    } // Notify Cache subscribers about a change in the cache\n\n  }, {\n    key: \"notify\",\n    value: function notify() {\n      var _iterator = _createForOfIteratorHelper(this.__listeners),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var listener = _step.value;\n          listener();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return Cache;\n}();\n\nexport { Cache as default };","map":{"version":3,"sources":["C:/Users/Jakith/JackPriyan.github.io/node_modules/swr/esm/cache.js"],"names":["mutate","hash","Cache","initialData","__cache","Map","Object","entries","__listeners","key","serializeKey","_key","get","value","shouldNotify","set","notify","Array","from","keys","has","forEach","clear","delete","args","err","isArray","String","errorKey","listener","Error","isSubscribed","push","index","indexOf","length"],"mappings":"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","sourcesContent":["import { mutate } from './use-swr';\nimport hash from './libs/hash';\nexport default class Cache {\n    constructor(initialData = {}) {\n        this.__cache = new Map(Object.entries(initialData));\n        this.__listeners = [];\n    }\n    get(key) {\n        const [_key] = this.serializeKey(key);\n        return this.__cache.get(_key);\n    }\n    set(key, value, shouldNotify = true) {\n        const [_key] = this.serializeKey(key);\n        this.__cache.set(_key, value);\n        if (shouldNotify)\n            mutate(key, value, false);\n        this.notify();\n    }\n    keys() {\n        return Array.from(this.__cache.keys());\n    }\n    has(key) {\n        const [_key] = this.serializeKey(key);\n        return this.__cache.has(_key);\n    }\n    clear(shouldNotify = true) {\n        if (shouldNotify)\n            this.__cache.forEach(key => mutate(key, null, false));\n        this.__cache.clear();\n        this.notify();\n    }\n    delete(key, shouldNotify = true) {\n        const [_key] = this.serializeKey(key);\n        if (shouldNotify)\n            mutate(key, null, false);\n        this.__cache.delete(_key);\n        this.notify();\n    }\n    // TODO: introduce namespace for the cache\n    serializeKey(key) {\n        let args = null;\n        if (typeof key === 'function') {\n            try {\n                key = key();\n            }\n            catch (err) {\n                // dependencies not ready\n                key = '';\n            }\n        }\n        if (Array.isArray(key)) {\n            // args array\n            args = key;\n            key = hash(key);\n        }\n        else {\n            // convert null to ''\n            key = String(key || '');\n        }\n        const errorKey = key ? 'err@' + key : '';\n        return [key, args, errorKey];\n    }\n    subscribe(listener) {\n        if (typeof listener !== 'function') {\n            throw new Error('Expected the listener to be a function.');\n        }\n        let isSubscribed = true;\n        this.__listeners.push(listener);\n        return () => {\n            if (!isSubscribed)\n                return;\n            isSubscribed = false;\n            const index = this.__listeners.indexOf(listener);\n            if (index > -1) {\n                this.__listeners[index] = this.__listeners[this.__listeners.length - 1];\n                this.__listeners.length--;\n            }\n        };\n    }\n    // Notify Cache subscribers about a change in the cache\n    notify() {\n        for (let listener of this.__listeners) {\n            listener();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}